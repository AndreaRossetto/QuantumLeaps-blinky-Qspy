
QuantumLeaps.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000075c0  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e4  08007798  08007798  00008798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800797c  0800797c  0000900c  2**0
                  CONTENTS
  4 .ARM          00000008  0800797c  0800797c  0000897c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007984  08007984  0000900c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007984  08007984  00008984  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007988  08007988  00008988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800798c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000af4  2000000c  08007998  0000900c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b00  08007998  00009b00  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000900c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013245  00000000  00000000  0000903c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004911  00000000  00000000  0001c281  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001028  00000000  00000000  00020b98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bee  00000000  00000000  00021bc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020b57  00000000  00000000  000227ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000112fc  00000000  00000000  00043305  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c3f35  00000000  00000000  00054601  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00118536  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003da8  00000000  00000000  0011857c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  0011c324  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08007780 	.word	0x08007780

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08007780 	.word	0x08007780

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000228:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800050c:	f3bf 8f4f 	dsb	sy
}
 8000510:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000512:	4b06      	ldr	r3, [pc, #24]	@ (800052c <__NVIC_SystemReset+0x24>)
 8000514:	68db      	ldr	r3, [r3, #12]
 8000516:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800051a:	4904      	ldr	r1, [pc, #16]	@ (800052c <__NVIC_SystemReset+0x24>)
 800051c:	4b04      	ldr	r3, [pc, #16]	@ (8000530 <__NVIC_SystemReset+0x28>)
 800051e:	4313      	orrs	r3, r2
 8000520:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000522:	f3bf 8f4f 	dsb	sy
}
 8000526:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000528:	bf00      	nop
 800052a:	e7fd      	b.n	8000528 <__NVIC_SystemReset+0x20>
 800052c:	e000ed00 	.word	0xe000ed00
 8000530:	05fa0004 	.word	0x05fa0004

08000534 <QS_onStartup>:
    }

    QK_ARM_ERRATUM_838869();
}

uint8_t QS_onStartup(void const *arg) {
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
    Q_UNUSED_PAR(arg);

    static uint8_t qsTxBuf[2 * 1024]; // buffer for QS-TX channel
    QS_initBuf(qsTxBuf, sizeof(qsTxBuf));
 800053c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000540:	480b      	ldr	r0, [pc, #44]	@ (8000570 <QS_onStartup+0x3c>)
 8000542:	f004 fd39 	bl	8004fb8 <QS_initBuf>

    static uint8_t qsRxBuf[100];    // buffer for QS-RX channel
    QS_rxInitBuf(qsRxBuf, sizeof(qsRxBuf));
 8000546:	2164      	movs	r1, #100	@ 0x64
 8000548:	480a      	ldr	r0, [pc, #40]	@ (8000574 <QS_onStartup+0x40>)
 800054a:	f006 f83b 	bl	80065c4 <QS_rxInitBuf>
                    (1U <<  5U) | // enable RX interrupt
                    (0U << 12U) | // 8 data bits
                    (0U << 28U) | // 8 data bits
                    (1U <<  0U)); // enable USART*/

    QS_tickPeriod_ = SystemCoreClock / BSP_TICKS_PER_SEC;
 800054e:	4b0a      	ldr	r3, [pc, #40]	@ (8000578 <QS_onStartup+0x44>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	4a0a      	ldr	r2, [pc, #40]	@ (800057c <QS_onStartup+0x48>)
 8000554:	fba2 2303 	umull	r2, r3, r2, r3
 8000558:	095b      	lsrs	r3, r3, #5
 800055a:	4a09      	ldr	r2, [pc, #36]	@ (8000580 <QS_onStartup+0x4c>)
 800055c:	6013      	str	r3, [r2, #0]
    QS_tickTime_ = QS_tickPeriod_; // to start the timestamp at zero
 800055e:	4b08      	ldr	r3, [pc, #32]	@ (8000580 <QS_onStartup+0x4c>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	4a08      	ldr	r2, [pc, #32]	@ (8000584 <QS_onStartup+0x50>)
 8000564:	6013      	str	r3, [r2, #0]

    return 1U; // return success
 8000566:	2301      	movs	r3, #1
}
 8000568:	4618      	mov	r0, r3
 800056a:	3708      	adds	r7, #8
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	20000030 	.word	0x20000030
 8000574:	20000830 	.word	0x20000830
 8000578:	20000000 	.word	0x20000000
 800057c:	51eb851f 	.word	0x51eb851f
 8000580:	2000002c 	.word	0x2000002c
 8000584:	20000028 	.word	0x20000028

08000588 <QS_onCleanup>:
//............................................................................
void QS_onCleanup(void) {
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0

}
 800058c:	bf00      	nop
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr
	...

08000598 <QS_onGetTime>:
//............................................................................
QSTimeCtr QS_onGetTime(void) { // NOTE: invoked with interrupts DISABLED
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
    if( (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == 0U ) // not set?
 800059c:	4b0c      	ldr	r3, [pc, #48]	@ (80005d0 <QS_onGetTime+0x38>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d105      	bne.n	80005b4 <QS_onGetTime+0x1c>
    	return QS_tickTime_ - (QSTimeCtr)SysTick->VAL;
 80005a8:	4b0a      	ldr	r3, [pc, #40]	@ (80005d4 <QS_onGetTime+0x3c>)
 80005aa:	681a      	ldr	r2, [r3, #0]
 80005ac:	4b08      	ldr	r3, [pc, #32]	@ (80005d0 <QS_onGetTime+0x38>)
 80005ae:	689b      	ldr	r3, [r3, #8]
 80005b0:	1ad3      	subs	r3, r2, r3
 80005b2:	e007      	b.n	80005c4 <QS_onGetTime+0x2c>
    else // the rollover occurred, but the SysTick_ISR did not run yet
    	return QS_tickTime_ + QS_tickPeriod_ - (QSTimeCtr)SysTick->VAL;
 80005b4:	4b07      	ldr	r3, [pc, #28]	@ (80005d4 <QS_onGetTime+0x3c>)
 80005b6:	681a      	ldr	r2, [r3, #0]
 80005b8:	4b07      	ldr	r3, [pc, #28]	@ (80005d8 <QS_onGetTime+0x40>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	441a      	add	r2, r3
 80005be:	4b04      	ldr	r3, [pc, #16]	@ (80005d0 <QS_onGetTime+0x38>)
 80005c0:	689b      	ldr	r3, [r3, #8]
 80005c2:	1ad3      	subs	r3, r2, r3

}
 80005c4:	4618      	mov	r0, r3
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop
 80005d0:	e000e010 	.word	0xe000e010
 80005d4:	20000028 	.word	0x20000028
 80005d8:	2000002c 	.word	0x2000002c

080005dc <QS_onFlush>:
//............................................................................
// NOTE:
// No critical section in QS_onFlush() to avoid nesting of critical sections
// in case QS_onFlush() is called from Q_onError().
void QS_onFlush(void) {
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
    for( ;; ) {
        uint16_t b = QS_getByte();
 80005e2:	f004 fd1f 	bl	8005024 <QS_getByte>
 80005e6:	4603      	mov	r3, r0
 80005e8:	80fb      	strh	r3, [r7, #6]
        if( b != QS_EOD ) { // NOT end-of-data
 80005ea:	88fb      	ldrh	r3, [r7, #6]
 80005ec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80005f0:	4293      	cmp	r3, r2
 80005f2:	d00a      	beq.n	800060a <QS_onFlush+0x2e>
            // busy-wait as long as TX has data to transmit
            while( (QSPY_UART->ISR & (1U << 7U)) == 0U ) ;
 80005f4:	bf00      	nop
 80005f6:	4b07      	ldr	r3, [pc, #28]	@ (8000614 <QS_onFlush+0x38>)
 80005f8:	69db      	ldr	r3, [r3, #28]
 80005fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d0f9      	beq.n	80005f6 <QS_onFlush+0x1a>
            QSPY_UART->TDR = b; // put into the TDR register
 8000602:	4a04      	ldr	r2, [pc, #16]	@ (8000614 <QS_onFlush+0x38>)
 8000604:	88fb      	ldrh	r3, [r7, #6]
 8000606:	6293      	str	r3, [r2, #40]	@ 0x28
    for( ;; ) {
 8000608:	e7eb      	b.n	80005e2 <QS_onFlush+0x6>
        }else
            break; // break out of the loop
 800060a:	bf00      	nop
    }
}
 800060c:	bf00      	nop
 800060e:	3708      	adds	r7, #8
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	40008000 	.word	0x40008000

08000618 <QS_onReset>:
//............................................................................
//! callback function to reset the target (to be implemented in the BSP)
void QS_onReset(void) {
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
    NVIC_SystemReset();
 800061c:	f7ff ff74 	bl	8000508 <__NVIC_SystemReset>

08000620 <QS_onCommand>:
}
//............................................................................
void QS_onCommand(uint8_t cmdId, uint32_t param1, uint32_t param2, uint32_t param3){
 8000620:	b480      	push	{r7}
 8000622:	b085      	sub	sp, #20
 8000624:	af00      	add	r7, sp, #0
 8000626:	60b9      	str	r1, [r7, #8]
 8000628:	607a      	str	r2, [r7, #4]
 800062a:	603b      	str	r3, [r7, #0]
 800062c:	4603      	mov	r3, r0
 800062e:	73fb      	strb	r3, [r7, #15]
    Q_UNUSED_PAR(cmdId);
    Q_UNUSED_PAR(param1);
    Q_UNUSED_PAR(param2);
    Q_UNUSED_PAR(param3);
}
 8000630:	bf00      	nop
 8000632:	3714      	adds	r7, #20
 8000634:	46bd      	mov	sp, r7
 8000636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063a:	4770      	bx	lr

0800063c <Blinky_ctor>:
//----------------------------------------------------------------------------
Blinky Blinky_inst;
QActive * const AO_Blinky = &Blinky_inst.super;

//............................................................................
void Blinky_ctor(void) {
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
    Blinky * const me = &Blinky_inst;
 8000642:	4b0d      	ldr	r3, [pc, #52]	@ (8000678 <Blinky_ctor+0x3c>)
 8000644:	607b      	str	r3, [r7, #4]
    QActive_ctor(&me->super, Q_STATE_CAST(&Blinky_initial));
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	490c      	ldr	r1, [pc, #48]	@ (800067c <Blinky_ctor+0x40>)
 800064a:	4618      	mov	r0, r3
 800064c:	f003 fdfa 	bl	8004244 <QActive_ctor>

    QTimeEvt_ctorX(&me->timeEvt, &me->super, TIMEOUT_SIG, 0U);
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8000656:	6879      	ldr	r1, [r7, #4]
 8000658:	2300      	movs	r3, #0
 800065a:	2206      	movs	r2, #6
 800065c:	f003 fed8 	bl	8004410 <QTimeEvt_ctorX>
    // arm the time event to expire in half a second and every half second
	QTimeEvt_armX(&me->timeEvt, BSP_TICKS_PER_SEC / 2U, BSP_TICKS_PER_SEC / 2U);
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	3328      	adds	r3, #40	@ 0x28
 8000664:	2232      	movs	r2, #50	@ 0x32
 8000666:	2132      	movs	r1, #50	@ 0x32
 8000668:	4618      	mov	r0, r3
 800066a:	f003 ff05 	bl	8004478 <QTimeEvt_armX>
}
 800066e:	bf00      	nop
 8000670:	3708      	adds	r7, #8
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	20000894 	.word	0x20000894
 800067c:	08000681 	.word	0x08000681

08000680 <Blinky_initial>:

// HSM definition ----------------------------------------------------------
QState Blinky_initial(Blinky * const me, void const * const par) {
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
 8000688:	6039      	str	r1, [r7, #0]
    Q_UNUSED_PAR(par);

	QS_OBJ_DICTIONARY(&me);
 800068a:	1d3b      	adds	r3, r7, #4
 800068c:	4910      	ldr	r1, [pc, #64]	@ (80006d0 <Blinky_initial+0x50>)
 800068e:	4618      	mov	r0, r3
 8000690:	f005 fcc0 	bl	8006014 <QS_obj_dict_pre_>

	QS_OBJ_ARR_DICTIONARY(&me, 0);
 8000694:	1d3b      	adds	r3, r7, #4
 8000696:	4a0e      	ldr	r2, [pc, #56]	@ (80006d0 <Blinky_initial+0x50>)
 8000698:	2100      	movs	r1, #0
 800069a:	4618      	mov	r0, r3
 800069c:	f005 fcdc 	bl	8006058 <QS_obj_arr_dict_pre_>
	QS_OBJ_ARR_DICTIONARY(&me->timeEvt, 0);
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	3328      	adds	r3, #40	@ 0x28
 80006a4:	4a0b      	ldr	r2, [pc, #44]	@ (80006d4 <Blinky_initial+0x54>)
 80006a6:	2100      	movs	r1, #0
 80006a8:	4618      	mov	r0, r3
 80006aa:	f005 fcd5 	bl	8006058 <QS_obj_arr_dict_pre_>

	QS_FUN_DICTIONARY(&Blinky_on);
 80006ae:	490a      	ldr	r1, [pc, #40]	@ (80006d8 <Blinky_initial+0x58>)
 80006b0:	480a      	ldr	r0, [pc, #40]	@ (80006dc <Blinky_initial+0x5c>)
 80006b2:	f005 fd9f 	bl	80061f4 <QS_fun_dict_pre_>
	QS_FUN_DICTIONARY(&Blinky_off);
 80006b6:	490a      	ldr	r1, [pc, #40]	@ (80006e0 <Blinky_initial+0x60>)
 80006b8:	480a      	ldr	r0, [pc, #40]	@ (80006e4 <Blinky_initial+0x64>)
 80006ba:	f005 fd9b 	bl	80061f4 <QS_fun_dict_pre_>

    return Q_TRAN(&Blinky_off);
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	4a08      	ldr	r2, [pc, #32]	@ (80006e4 <Blinky_initial+0x64>)
 80006c2:	609a      	str	r2, [r3, #8]
 80006c4:	2308      	movs	r3, #8
}
 80006c6:	4618      	mov	r0, r3
 80006c8:	3708      	adds	r7, #8
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	08007798 	.word	0x08007798
 80006d4:	0800779c 	.word	0x0800779c
 80006d8:	080077ac 	.word	0x080077ac
 80006dc:	080007f1 	.word	0x080007f1
 80006e0:	080077b8 	.word	0x080077b8
 80006e4:	080006e9 	.word	0x080006e9

080006e8 <Blinky_off>:


//............................................................................

//............................................................................
QState Blinky_off(Blinky * const me, QEvt const * const e) {
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b084      	sub	sp, #16
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
 80006f0:	6039      	str	r1, [r7, #0]
    QState status;
    switch (e->sig) {
 80006f2:	683b      	ldr	r3, [r7, #0]
 80006f4:	881b      	ldrh	r3, [r3, #0]
 80006f6:	2b01      	cmp	r3, #1
 80006f8:	d002      	beq.n	8000700 <Blinky_off+0x18>
 80006fa:	2b06      	cmp	r3, #6
 80006fc:	d030      	beq.n	8000760 <Blinky_off+0x78>
 80006fe:	e060      	b.n	80007c2 <Blinky_off+0xda>
        case Q_ENTRY_SIG:
        					QS_BEGIN_ID(TIMEOUT_STAT, AO_Blinky->prio)
 8000700:	4b35      	ldr	r3, [pc, #212]	@ (80007d8 <Blinky_off+0xf0>)
 8000702:	7b1b      	ldrb	r3, [r3, #12]
 8000704:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000708:	2b00      	cmp	r3, #0
 800070a:	d024      	beq.n	8000756 <Blinky_off+0x6e>
 800070c:	4b33      	ldr	r3, [pc, #204]	@ (80007dc <Blinky_off+0xf4>)
 800070e:	7b1b      	ldrb	r3, [r3, #12]
 8000710:	08db      	lsrs	r3, r3, #3
 8000712:	b2db      	uxtb	r3, r3
 8000714:	461a      	mov	r2, r3
 8000716:	4b30      	ldr	r3, [pc, #192]	@ (80007d8 <Blinky_off+0xf0>)
 8000718:	4413      	add	r3, r2
 800071a:	7c1b      	ldrb	r3, [r3, #16]
 800071c:	461a      	mov	r2, r3
 800071e:	4b2f      	ldr	r3, [pc, #188]	@ (80007dc <Blinky_off+0xf4>)
 8000720:	7b1b      	ldrb	r3, [r3, #12]
 8000722:	f003 0307 	and.w	r3, r3, #7
 8000726:	fa22 f303 	lsr.w	r3, r2, r3
 800072a:	f003 0301 	and.w	r3, r3, #1
 800072e:	2b00      	cmp	r3, #0
 8000730:	d011      	beq.n	8000756 <Blinky_off+0x6e>
 8000732:	f001 fe33 	bl	800239c <QF_crit_entry_>
 8000736:	2066      	movs	r0, #102	@ 0x66
 8000738:	f005 f846 	bl	80057c8 <QS_beginRec_>
 800073c:	f7ff ff2c 	bl	8000598 <QS_onGetTime>
 8000740:	4603      	mov	r3, r0
 8000742:	4618      	mov	r0, r3
 8000744:	f005 fafc 	bl	8005d40 <QS_u32_raw_>
							QS_STR("Led off"); // LED status
 8000748:	4825      	ldr	r0, [pc, #148]	@ (80007e0 <Blinky_off+0xf8>)
 800074a:	f005 fbd3 	bl	8005ef4 <QS_str_fmt_>
							QS_END()
 800074e:	f005 f8bb 	bl	80058c8 <QS_endRec_>
 8000752:	f001 fe35 	bl	80023c0 <QF_crit_exit_>
							BSP_ledOff();
 8000756:	f000 fa10 	bl	8000b7a <BSP_ledOff>
							status = Q_HANDLED();
 800075a:	2303      	movs	r3, #3
 800075c:	73fb      	strb	r3, [r7, #15]
							break;
 800075e:	e036      	b.n	80007ce <Blinky_off+0xe6>

        case TIMEOUT_SIG:
        					QS_BEGIN_ID(TIMEOUT_STAT, AO_Blinky->prio)
 8000760:	4b1d      	ldr	r3, [pc, #116]	@ (80007d8 <Blinky_off+0xf0>)
 8000762:	7b1b      	ldrb	r3, [r3, #12]
 8000764:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000768:	2b00      	cmp	r3, #0
 800076a:	d024      	beq.n	80007b6 <Blinky_off+0xce>
 800076c:	4b1b      	ldr	r3, [pc, #108]	@ (80007dc <Blinky_off+0xf4>)
 800076e:	7b1b      	ldrb	r3, [r3, #12]
 8000770:	08db      	lsrs	r3, r3, #3
 8000772:	b2db      	uxtb	r3, r3
 8000774:	461a      	mov	r2, r3
 8000776:	4b18      	ldr	r3, [pc, #96]	@ (80007d8 <Blinky_off+0xf0>)
 8000778:	4413      	add	r3, r2
 800077a:	7c1b      	ldrb	r3, [r3, #16]
 800077c:	461a      	mov	r2, r3
 800077e:	4b17      	ldr	r3, [pc, #92]	@ (80007dc <Blinky_off+0xf4>)
 8000780:	7b1b      	ldrb	r3, [r3, #12]
 8000782:	f003 0307 	and.w	r3, r3, #7
 8000786:	fa22 f303 	lsr.w	r3, r2, r3
 800078a:	f003 0301 	and.w	r3, r3, #1
 800078e:	2b00      	cmp	r3, #0
 8000790:	d011      	beq.n	80007b6 <Blinky_off+0xce>
 8000792:	f001 fe03 	bl	800239c <QF_crit_entry_>
 8000796:	2066      	movs	r0, #102	@ 0x66
 8000798:	f005 f816 	bl	80057c8 <QS_beginRec_>
 800079c:	f7ff fefc 	bl	8000598 <QS_onGetTime>
 80007a0:	4603      	mov	r3, r0
 80007a2:	4618      	mov	r0, r3
 80007a4:	f005 facc 	bl	8005d40 <QS_u32_raw_>
							QS_STR("Timeout received in blinky off");
 80007a8:	480e      	ldr	r0, [pc, #56]	@ (80007e4 <Blinky_off+0xfc>)
 80007aa:	f005 fba3 	bl	8005ef4 <QS_str_fmt_>
							QS_END()
 80007ae:	f005 f88b 	bl	80058c8 <QS_endRec_>
 80007b2:	f001 fe05 	bl	80023c0 <QF_crit_exit_>
							status = Q_TRAN(&Blinky_on);
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	4a0b      	ldr	r2, [pc, #44]	@ (80007e8 <Blinky_off+0x100>)
 80007ba:	609a      	str	r2, [r3, #8]
 80007bc:	2308      	movs	r3, #8
 80007be:	73fb      	strb	r3, [r7, #15]
							break;
 80007c0:	e005      	b.n	80007ce <Blinky_off+0xe6>

        default:
					status = Q_SUPER(&QHsm_top);
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	4a09      	ldr	r2, [pc, #36]	@ (80007ec <Blinky_off+0x104>)
 80007c6:	609a      	str	r2, [r3, #8]
 80007c8:	2300      	movs	r3, #0
 80007ca:	73fb      	strb	r3, [r7, #15]
					break;
 80007cc:	bf00      	nop

    }
    return status;
 80007ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80007d0:	4618      	mov	r0, r3
 80007d2:	3710      	adds	r7, #16
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	20000a84 	.word	0x20000a84
 80007dc:	20000894 	.word	0x20000894
 80007e0:	080077c4 	.word	0x080077c4
 80007e4:	080077cc 	.word	0x080077cc
 80007e8:	080007f1 	.word	0x080007f1
 80007ec:	08003239 	.word	0x08003239

080007f0 <Blinky_on>:
//............................................................................
QState Blinky_on(Blinky * const me, QEvt const * const e) {
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b084      	sub	sp, #16
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
 80007f8:	6039      	str	r1, [r7, #0]
    QState status;
    switch (e->sig) {
 80007fa:	683b      	ldr	r3, [r7, #0]
 80007fc:	881b      	ldrh	r3, [r3, #0]
 80007fe:	2b01      	cmp	r3, #1
 8000800:	d002      	beq.n	8000808 <Blinky_on+0x18>
 8000802:	2b06      	cmp	r3, #6
 8000804:	d030      	beq.n	8000868 <Blinky_on+0x78>
 8000806:	e060      	b.n	80008ca <Blinky_on+0xda>
        case Q_ENTRY_SIG:
        					QS_BEGIN_ID(TIMEOUT_STAT, AO_Blinky->prio)
 8000808:	4b35      	ldr	r3, [pc, #212]	@ (80008e0 <Blinky_on+0xf0>)
 800080a:	7b1b      	ldrb	r3, [r3, #12]
 800080c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000810:	2b00      	cmp	r3, #0
 8000812:	d024      	beq.n	800085e <Blinky_on+0x6e>
 8000814:	4b33      	ldr	r3, [pc, #204]	@ (80008e4 <Blinky_on+0xf4>)
 8000816:	7b1b      	ldrb	r3, [r3, #12]
 8000818:	08db      	lsrs	r3, r3, #3
 800081a:	b2db      	uxtb	r3, r3
 800081c:	461a      	mov	r2, r3
 800081e:	4b30      	ldr	r3, [pc, #192]	@ (80008e0 <Blinky_on+0xf0>)
 8000820:	4413      	add	r3, r2
 8000822:	7c1b      	ldrb	r3, [r3, #16]
 8000824:	461a      	mov	r2, r3
 8000826:	4b2f      	ldr	r3, [pc, #188]	@ (80008e4 <Blinky_on+0xf4>)
 8000828:	7b1b      	ldrb	r3, [r3, #12]
 800082a:	f003 0307 	and.w	r3, r3, #7
 800082e:	fa22 f303 	lsr.w	r3, r2, r3
 8000832:	f003 0301 	and.w	r3, r3, #1
 8000836:	2b00      	cmp	r3, #0
 8000838:	d011      	beq.n	800085e <Blinky_on+0x6e>
 800083a:	f001 fdaf 	bl	800239c <QF_crit_entry_>
 800083e:	2066      	movs	r0, #102	@ 0x66
 8000840:	f004 ffc2 	bl	80057c8 <QS_beginRec_>
 8000844:	f7ff fea8 	bl	8000598 <QS_onGetTime>
 8000848:	4603      	mov	r3, r0
 800084a:	4618      	mov	r0, r3
 800084c:	f005 fa78 	bl	8005d40 <QS_u32_raw_>
							QS_STR("Led on"); // LED status
 8000850:	4825      	ldr	r0, [pc, #148]	@ (80008e8 <Blinky_on+0xf8>)
 8000852:	f005 fb4f 	bl	8005ef4 <QS_str_fmt_>
							QS_END()
 8000856:	f005 f837 	bl	80058c8 <QS_endRec_>
 800085a:	f001 fdb1 	bl	80023c0 <QF_crit_exit_>
							BSP_ledOn();
 800085e:	f000 f981 	bl	8000b64 <BSP_ledOn>
							status = Q_HANDLED();
 8000862:	2303      	movs	r3, #3
 8000864:	73fb      	strb	r3, [r7, #15]
							break;
 8000866:	e036      	b.n	80008d6 <Blinky_on+0xe6>

        case TIMEOUT_SIG:
        					QS_BEGIN_ID(TIMEOUT_STAT, AO_Blinky->prio)
 8000868:	4b1d      	ldr	r3, [pc, #116]	@ (80008e0 <Blinky_on+0xf0>)
 800086a:	7b1b      	ldrb	r3, [r3, #12]
 800086c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000870:	2b00      	cmp	r3, #0
 8000872:	d024      	beq.n	80008be <Blinky_on+0xce>
 8000874:	4b1b      	ldr	r3, [pc, #108]	@ (80008e4 <Blinky_on+0xf4>)
 8000876:	7b1b      	ldrb	r3, [r3, #12]
 8000878:	08db      	lsrs	r3, r3, #3
 800087a:	b2db      	uxtb	r3, r3
 800087c:	461a      	mov	r2, r3
 800087e:	4b18      	ldr	r3, [pc, #96]	@ (80008e0 <Blinky_on+0xf0>)
 8000880:	4413      	add	r3, r2
 8000882:	7c1b      	ldrb	r3, [r3, #16]
 8000884:	461a      	mov	r2, r3
 8000886:	4b17      	ldr	r3, [pc, #92]	@ (80008e4 <Blinky_on+0xf4>)
 8000888:	7b1b      	ldrb	r3, [r3, #12]
 800088a:	f003 0307 	and.w	r3, r3, #7
 800088e:	fa22 f303 	lsr.w	r3, r2, r3
 8000892:	f003 0301 	and.w	r3, r3, #1
 8000896:	2b00      	cmp	r3, #0
 8000898:	d011      	beq.n	80008be <Blinky_on+0xce>
 800089a:	f001 fd7f 	bl	800239c <QF_crit_entry_>
 800089e:	2066      	movs	r0, #102	@ 0x66
 80008a0:	f004 ff92 	bl	80057c8 <QS_beginRec_>
 80008a4:	f7ff fe78 	bl	8000598 <QS_onGetTime>
 80008a8:	4603      	mov	r3, r0
 80008aa:	4618      	mov	r0, r3
 80008ac:	f005 fa48 	bl	8005d40 <QS_u32_raw_>
							QS_STR("Timeout received in blinky on");
 80008b0:	480e      	ldr	r0, [pc, #56]	@ (80008ec <Blinky_on+0xfc>)
 80008b2:	f005 fb1f 	bl	8005ef4 <QS_str_fmt_>
							QS_END()
 80008b6:	f005 f807 	bl	80058c8 <QS_endRec_>
 80008ba:	f001 fd81 	bl	80023c0 <QF_crit_exit_>
							status = Q_TRAN(&Blinky_off);
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	4a0b      	ldr	r2, [pc, #44]	@ (80008f0 <Blinky_on+0x100>)
 80008c2:	609a      	str	r2, [r3, #8]
 80008c4:	2308      	movs	r3, #8
 80008c6:	73fb      	strb	r3, [r7, #15]
							break;
 80008c8:	e005      	b.n	80008d6 <Blinky_on+0xe6>

        default:
					status = Q_SUPER(&QHsm_top);
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	4a09      	ldr	r2, [pc, #36]	@ (80008f4 <Blinky_on+0x104>)
 80008ce:	609a      	str	r2, [r3, #8]
 80008d0:	2300      	movs	r3, #0
 80008d2:	73fb      	strb	r3, [r7, #15]
					break;
 80008d4:	bf00      	nop

    }
    return status;
 80008d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80008d8:	4618      	mov	r0, r3
 80008da:	3710      	adds	r7, #16
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	20000a84 	.word	0x20000a84
 80008e4:	20000894 	.word	0x20000894
 80008e8:	080077ec 	.word	0x080077ec
 80008ec:	080077f4 	.word	0x080077f4
 80008f0:	080006e9 	.word	0x080006e9
 80008f4:	08003239 	.word	0x08003239

080008f8 <__NVIC_SetPriorityGrouping>:
{
 80008f8:	b480      	push	{r7}
 80008fa:	b085      	sub	sp, #20
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	f003 0307 	and.w	r3, r3, #7
 8000906:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000908:	4b0c      	ldr	r3, [pc, #48]	@ (800093c <__NVIC_SetPriorityGrouping+0x44>)
 800090a:	68db      	ldr	r3, [r3, #12]
 800090c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800090e:	68ba      	ldr	r2, [r7, #8]
 8000910:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000914:	4013      	ands	r3, r2
 8000916:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800091c:	68bb      	ldr	r3, [r7, #8]
 800091e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000920:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000924:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000928:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800092a:	4a04      	ldr	r2, [pc, #16]	@ (800093c <__NVIC_SetPriorityGrouping+0x44>)
 800092c:	68bb      	ldr	r3, [r7, #8]
 800092e:	60d3      	str	r3, [r2, #12]
}
 8000930:	bf00      	nop
 8000932:	3714      	adds	r7, #20
 8000934:	46bd      	mov	sp, r7
 8000936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093a:	4770      	bx	lr
 800093c:	e000ed00 	.word	0xe000ed00

08000940 <__NVIC_EnableIRQ>:
{
 8000940:	b480      	push	{r7}
 8000942:	b083      	sub	sp, #12
 8000944:	af00      	add	r7, sp, #0
 8000946:	4603      	mov	r3, r0
 8000948:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800094a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800094e:	2b00      	cmp	r3, #0
 8000950:	db0b      	blt.n	800096a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000952:	79fb      	ldrb	r3, [r7, #7]
 8000954:	f003 021f 	and.w	r2, r3, #31
 8000958:	4907      	ldr	r1, [pc, #28]	@ (8000978 <__NVIC_EnableIRQ+0x38>)
 800095a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800095e:	095b      	lsrs	r3, r3, #5
 8000960:	2001      	movs	r0, #1
 8000962:	fa00 f202 	lsl.w	r2, r0, r2
 8000966:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800096a:	bf00      	nop
 800096c:	370c      	adds	r7, #12
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop
 8000978:	e000e100 	.word	0xe000e100

0800097c <__NVIC_SetPriority>:
{
 800097c:	b480      	push	{r7}
 800097e:	b083      	sub	sp, #12
 8000980:	af00      	add	r7, sp, #0
 8000982:	4603      	mov	r3, r0
 8000984:	6039      	str	r1, [r7, #0]
 8000986:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000988:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800098c:	2b00      	cmp	r3, #0
 800098e:	db0a      	blt.n	80009a6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	b2da      	uxtb	r2, r3
 8000994:	490c      	ldr	r1, [pc, #48]	@ (80009c8 <__NVIC_SetPriority+0x4c>)
 8000996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800099a:	0112      	lsls	r2, r2, #4
 800099c:	b2d2      	uxtb	r2, r2
 800099e:	440b      	add	r3, r1
 80009a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80009a4:	e00a      	b.n	80009bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	b2da      	uxtb	r2, r3
 80009aa:	4908      	ldr	r1, [pc, #32]	@ (80009cc <__NVIC_SetPriority+0x50>)
 80009ac:	79fb      	ldrb	r3, [r7, #7]
 80009ae:	f003 030f 	and.w	r3, r3, #15
 80009b2:	3b04      	subs	r3, #4
 80009b4:	0112      	lsls	r2, r2, #4
 80009b6:	b2d2      	uxtb	r2, r2
 80009b8:	440b      	add	r3, r1
 80009ba:	761a      	strb	r2, [r3, #24]
}
 80009bc:	bf00      	nop
 80009be:	370c      	adds	r7, #12
 80009c0:	46bd      	mov	sp, r7
 80009c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c6:	4770      	bx	lr
 80009c8:	e000e100 	.word	0xe000e100
 80009cc:	e000ed00 	.word	0xe000ed00

080009d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	3b01      	subs	r3, #1
 80009dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80009e0:	d301      	bcc.n	80009e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009e2:	2301      	movs	r3, #1
 80009e4:	e00f      	b.n	8000a06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009e6:	4a0a      	ldr	r2, [pc, #40]	@ (8000a10 <SysTick_Config+0x40>)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	3b01      	subs	r3, #1
 80009ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009ee:	210f      	movs	r1, #15
 80009f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80009f4:	f7ff ffc2 	bl	800097c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009f8:	4b05      	ldr	r3, [pc, #20]	@ (8000a10 <SysTick_Config+0x40>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009fe:	4b04      	ldr	r3, [pc, #16]	@ (8000a10 <SysTick_Config+0x40>)
 8000a00:	2207      	movs	r2, #7
 8000a02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a04:	2300      	movs	r3, #0
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	3708      	adds	r7, #8
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	e000e010 	.word	0xe000e010

08000a14 <produce_sig_dict>:
    TIMEOUT_SIG,
    MAX_SIG               // the last signal
};

#ifdef Q_SPY
static inline void produce_sig_dict(void) {
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
    QS_SIG_DICTIONARY(TIMEOUT_SIG, (void *)0);
 8000a18:	4a03      	ldr	r2, [pc, #12]	@ (8000a28 <produce_sig_dict+0x14>)
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	2006      	movs	r0, #6
 8000a1e:	f005 fad1 	bl	8005fc4 <QS_sig_dict_pre_>
}
 8000a22:	bf00      	nop
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	08007814 	.word	0x08007814

08000a2c <Q_onError>:
int isBlinking;

//============================================================================
// Error handler and ISRs...

Q_NORETURN Q_onError(char const *module, int_t const id) {
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
 8000a34:	6039      	str	r1, [r7, #0]
    // NOTE: this implementation of the assertion handler is intended only
    // for debugging and MUST be changed for deployment of the application
    // (assuming that you ship your production code with assertions enabled).
    Q_UNUSED_PAR(module);
    Q_UNUSED_PAR(id);
    QS_ASSERTION(module, id, (uint32_t)10000U);
 8000a36:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000a3a:	6839      	ldr	r1, [r7, #0]
 8000a3c:	6878      	ldr	r0, [r7, #4]
 8000a3e:	f005 fc19 	bl	8006274 <QS_assertion_pre_>

#ifndef NDEBUG
    // light up the user LED
	GPIOA->BSRR = (1U << LD4_PIN);  // turn LED on
 8000a42:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000a46:	2220      	movs	r2, #32
 8000a48:	619a      	str	r2, [r3, #24]
	  //char msg[200];
	  //sprintf(msg, "QonError\r\n");
	  //HAL_UART_Transmit(&lpuart, (uint8_t *)msg, strlen(msg), 2000);

    // for debugging, hang on in an endless loop...
    for (;;) {
 8000a4a:	bf00      	nop
 8000a4c:	e7fd      	b.n	8000a4a <Q_onError+0x1e>
	...

08000a50 <SysTick_Handler>:
    Q_onError(module, id);
}

//............................................................................
void SysTick_Handler(void); // prototype
void SysTick_Handler(void) {
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
    QK_ISR_ENTRY();   // inform QK about entering an ISR

    QTIMEEVT_TICK_X(0U, &l_SysTick_Handler); // time events at rate 0
 8000a56:	4910      	ldr	r1, [pc, #64]	@ (8000a98 <SysTick_Handler+0x48>)
 8000a58:	2000      	movs	r0, #0
 8000a5a:	f003 fda1 	bl	80045a0 <QTimeEvt_tick_>

	#ifdef Q_SPY
    	uint32_t tmp = SysTick->CTRL; // clear CTRL_COUNTFLAG
 8000a5e:	4b0f      	ldr	r3, [pc, #60]	@ (8000a9c <SysTick_Handler+0x4c>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	607b      	str	r3, [r7, #4]
		QS_tickTime_ += QS_tickPeriod_; // account for the clock rollover
 8000a64:	4b0e      	ldr	r3, [pc, #56]	@ (8000aa0 <SysTick_Handler+0x50>)
 8000a66:	681a      	ldr	r2, [r3, #0]
 8000a68:	4b0e      	ldr	r3, [pc, #56]	@ (8000aa4 <SysTick_Handler+0x54>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4413      	add	r3, r2
 8000a6e:	4a0c      	ldr	r2, [pc, #48]	@ (8000aa0 <SysTick_Handler+0x50>)
 8000a70:	6013      	str	r3, [r2, #0]
	#endif

    QK_ISR_EXIT();    // inform QK about exiting an ISR
 8000a72:	f001 fc6f 	bl	8002354 <QF_int_disable_>
 8000a76:	f003 fff5 	bl	8004a64 <QK_sched_>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d003      	beq.n	8000a88 <SysTick_Handler+0x38>
 8000a80:	4b09      	ldr	r3, [pc, #36]	@ (8000aa8 <SysTick_Handler+0x58>)
 8000a82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000a86:	601a      	str	r2, [r3, #0]
 8000a88:	f001 fc76 	bl	8002378 <QF_int_enable_>
 8000a8c:	f3bf 8f4f 	dsb	sy
}
 8000a90:	bf00      	nop
 8000a92:	3708      	adds	r7, #8
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	08007890 	.word	0x08007890
 8000a9c:	e000e010 	.word	0xe000e010
 8000aa0:	200008d0 	.word	0x200008d0
 8000aa4:	200008d4 	.word	0x200008d4
 8000aa8:	e000ed04 	.word	0xe000ed04

08000aac <BSP_init>:

//============================================================================
// BSP functions...

void BSP_init() {
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
	if( !QS_INIT((void *)0) )
 8000ab0:	2000      	movs	r0, #0
 8000ab2:	f7ff fd3f 	bl	8000534 <QS_onStartup>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d105      	bne.n	8000ac8 <BSP_init+0x1c>
		Q_ERROR();
 8000abc:	f001 fc6e 	bl	800239c <QF_crit_entry_>
 8000ac0:	2183      	movs	r1, #131	@ 0x83
 8000ac2:	480f      	ldr	r0, [pc, #60]	@ (8000b00 <BSP_init+0x54>)
 8000ac4:	f7ff ffb2 	bl	8000a2c <Q_onError>

	// dictionaries...
	QS_OBJ_DICTIONARY(&l_SysTick_Handler);
 8000ac8:	490e      	ldr	r1, [pc, #56]	@ (8000b04 <BSP_init+0x58>)
 8000aca:	480f      	ldr	r0, [pc, #60]	@ (8000b08 <BSP_init+0x5c>)
 8000acc:	f005 faa2 	bl	8006014 <QS_obj_dict_pre_>
	QS_USR_DICTIONARY(BLINKY_STAT);
 8000ad0:	490e      	ldr	r1, [pc, #56]	@ (8000b0c <BSP_init+0x60>)
 8000ad2:	2064      	movs	r0, #100	@ 0x64
 8000ad4:	f005 fbb1 	bl	800623a <QS_usr_dict_pre_>
	QS_USR_DICTIONARY(PAUSED_STAT);
 8000ad8:	490d      	ldr	r1, [pc, #52]	@ (8000b10 <BSP_init+0x64>)
 8000ada:	2065      	movs	r0, #101	@ 0x65
 8000adc:	f005 fbad 	bl	800623a <QS_usr_dict_pre_>
	QS_USR_DICTIONARY(CONTEXT_SW);
 8000ae0:	490c      	ldr	r1, [pc, #48]	@ (8000b14 <BSP_init+0x68>)
 8000ae2:	2067      	movs	r0, #103	@ 0x67
 8000ae4:	f005 fba9 	bl	800623a <QS_usr_dict_pre_>

	QS_ONLY(produce_sig_dict());
 8000ae8:	f7ff ff94 	bl	8000a14 <produce_sig_dict>

	// setup the Global QS filters...
	QS_GLB_FILTER(QS_ALL_RECORDS);   // all records
 8000aec:	20f0      	movs	r0, #240	@ 0xf0
 8000aee:	f004 facd 	bl	800508c <QS_glbFilter_>
	QS_GLB_FILTER(-QS_QF_TICK);      // exclude the clock tic
 8000af2:	f06f 001e 	mvn.w	r0, #30
 8000af6:	f004 fac9 	bl	800508c <QS_glbFilter_>
}
 8000afa:	bf00      	nop
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	08007894 	.word	0x08007894
 8000b04:	08007820 	.word	0x08007820
 8000b08:	08007890 	.word	0x08007890
 8000b0c:	08007834 	.word	0x08007834
 8000b10:	08007840 	.word	0x08007840
 8000b14:	0800784c 	.word	0x0800784c

08000b18 <BSP_start>:
//............................................................................
void BSP_start(void) {
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b084      	sub	sp, #16
 8000b1c:	af04      	add	r7, sp, #16
    // initialize event pools
    static QF_MPOOL_EL(QEvt) smlPoolSto[10];
    QF_poolInit(smlPoolSto, sizeof(smlPoolSto), sizeof(smlPoolSto[0]));
 8000b1e:	2208      	movs	r2, #8
 8000b20:	2150      	movs	r1, #80	@ 0x50
 8000b22:	480c      	ldr	r0, [pc, #48]	@ (8000b54 <BSP_start+0x3c>)
 8000b24:	f002 fe3c 	bl	80037a0 <QF_poolInit>

    // initialize publish-subscribe
    static QSubscrList subscrSto[MAX_PUB_SIG];
    QActive_psInit(subscrSto, Q_DIM(subscrSto));
 8000b28:	2105      	movs	r1, #5
 8000b2a:	480b      	ldr	r0, [pc, #44]	@ (8000b58 <BSP_start+0x40>)
 8000b2c:	f003 fa60 	bl	8003ff0 <QActive_psInit>

    // instantiate and start AOs/threads...

    static QEvt const *blinkyQueueSto[10];
    Blinky_ctor();
 8000b30:	f7ff fd84 	bl	800063c <Blinky_ctor>
    QACTIVE_START(AO_Blinky,
 8000b34:	4b09      	ldr	r3, [pc, #36]	@ (8000b5c <BSP_start+0x44>)
 8000b36:	6818      	ldr	r0, [r3, #0]
 8000b38:	2300      	movs	r3, #0
 8000b3a:	9302      	str	r3, [sp, #8]
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	9301      	str	r3, [sp, #4]
 8000b40:	2300      	movs	r3, #0
 8000b42:	9300      	str	r3, [sp, #0]
 8000b44:	230a      	movs	r3, #10
 8000b46:	4a06      	ldr	r2, [pc, #24]	@ (8000b60 <BSP_start+0x48>)
 8000b48:	2101      	movs	r1, #1
 8000b4a:	f004 f9eb 	bl	8004f24 <QActive_start_>
        blinkyQueueSto,               	// event queue storage
        Q_DIM(blinkyQueueSto),       	// queue length [events]
        (void *)0, 0U,               	// no stack storage
        (void *)0);             	// no initialization param

}
 8000b4e:	bf00      	nop
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	200008d8 	.word	0x200008d8
 8000b58:	20000928 	.word	0x20000928
 8000b5c:	0800788c 	.word	0x0800788c
 8000b60:	20000950 	.word	0x20000950

08000b64 <BSP_ledOn>:
	sprintf(msg, "Stop\r\n");
	isBlinking = 0;
	//HAL_UART_Transmit(&lpuart, (uint8_t *)msg, strlen(msg), 2000);
}
//............................................................................
void BSP_ledOn(void) {
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
    GPIOA->BSRR = (1U << LD4_PIN);  // turn LED on
 8000b68:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000b6c:	2220      	movs	r2, #32
 8000b6e:	619a      	str	r2, [r3, #24]
}
 8000b70:	bf00      	nop
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr

08000b7a <BSP_ledOff>:
//............................................................................
void BSP_ledOff(void) {
 8000b7a:	b480      	push	{r7}
 8000b7c:	af00      	add	r7, sp, #0
    GPIOA->BSRR = (1U << (LD4_PIN + 16U));  // turn LED off
 8000b7e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000b82:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000b86:	619a      	str	r2, [r3, #24]
}
 8000b88:	bf00      	nop
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
	...

08000b94 <QF_onStartup>:
    Q_UNUSED_PAR(result);
}

//============================================================================
// QF callbacks...
void QF_onStartup(void) {
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
    // set up the SysTick timer to fire at BSP_TICKS_PER_SEC rate
    SysTick_Config(SystemCoreClock / BSP_TICKS_PER_SEC);
 8000b98:	4b10      	ldr	r3, [pc, #64]	@ (8000bdc <QF_onStartup+0x48>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a10      	ldr	r2, [pc, #64]	@ (8000be0 <QF_onStartup+0x4c>)
 8000b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8000ba2:	095b      	lsrs	r3, r3, #5
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f7ff ff13 	bl	80009d0 <SysTick_Config>

    // assign all priority bits for preemption-prio. and none to sub-prio.
    NVIC_SetPriorityGrouping(0U);
 8000baa:	2000      	movs	r0, #0
 8000bac:	f7ff fea4 	bl	80008f8 <__NVIC_SetPriorityGrouping>

    // set priorities of ALL ISRs used in the system, see NOTE1
    NVIC_SetPriority(QSPY_IRQn,    0); // kernel UNAWARE interrupt
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	205b      	movs	r0, #91	@ 0x5b
 8000bb4:	f7ff fee2 	bl	800097c <__NVIC_SetPriority>
    //NVIC_SetPriority(EXTI0_1_IRQn,   QF_AWARE_ISR_CMSIS_PRI + 0U);
    NVIC_SetPriority(SysTick_IRQn,   QF_AWARE_ISR_CMSIS_PRI + 1U);
 8000bb8:	2104      	movs	r1, #4
 8000bba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000bbe:	f7ff fedd 	bl	800097c <__NVIC_SetPriority>
    // ...
    NVIC_SetPriority(EXTI15_10_IRQn, QF_AWARE_ISR_CMSIS_PRI + 1U);
 8000bc2:	2104      	movs	r1, #4
 8000bc4:	2028      	movs	r0, #40	@ 0x28
 8000bc6:	f7ff fed9 	bl	800097c <__NVIC_SetPriority>

    // enable IRQs...
    NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000bca:	2028      	movs	r0, #40	@ 0x28
 8000bcc:	f7ff feb8 	bl	8000940 <__NVIC_EnableIRQ>

	#ifdef Q_SPY
		NVIC_EnableIRQ(QSPY_IRQn); // UART2 interrupt used for QS-RX
 8000bd0:	205b      	movs	r0, #91	@ 0x5b
 8000bd2:	f7ff feb5 	bl	8000940 <__NVIC_EnableIRQ>
	#endif
}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	20000000 	.word	0x20000000
 8000be0:	51eb851f 	.word	0x51eb851f

08000be4 <QK_onIdle>:
//............................................................................
void QF_onCleanup(void) {

}
//............................................................................
void QK_onIdle(void) {
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
    //GPIOA->BSRR = (1U << (LD4_PIN + 16U)); // turn LED[n] off
    //QF_MEM_APP();
    //QF_INT_ENABLE();

#ifdef Q_SPY
	QS_rxParse();  // parse all the received bytes
 8000bea:	f005 fd33 	bl	8006654 <QS_rxParse>

	if( (QSPY_UART->ISR & (1U << 7U)) != 0U ) {  // is TXE empty?
 8000bee:	4b0d      	ldr	r3, [pc, #52]	@ (8000c24 <QK_onIdle+0x40>)
 8000bf0:	69db      	ldr	r3, [r3, #28]
 8000bf2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d00f      	beq.n	8000c1a <QK_onIdle+0x36>
		QF_INT_DISABLE();
 8000bfa:	f001 fbab 	bl	8002354 <QF_int_disable_>
		uint16_t b = QS_getByte();
 8000bfe:	f004 fa11 	bl	8005024 <QS_getByte>
 8000c02:	4603      	mov	r3, r0
 8000c04:	80fb      	strh	r3, [r7, #6]
		QF_INT_ENABLE();
 8000c06:	f001 fbb7 	bl	8002378 <QF_int_enable_>

		if (b != QS_EOD) {   // not End-Of-Data?
 8000c0a:	88fb      	ldrh	r3, [r7, #6]
 8000c0c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d002      	beq.n	8000c1a <QK_onIdle+0x36>
			QSPY_UART->TDR = b; // put into the DR register
 8000c14:	4a03      	ldr	r2, [pc, #12]	@ (8000c24 <QK_onIdle+0x40>)
 8000c16:	88fb      	ldrh	r3, [r7, #6]
 8000c18:	6293      	str	r3, [r2, #40]	@ 0x28
    // The trick with BOOT(0) is it gets the part to run the System Loader
    // instead of your broken code. When done disconnect BOOT0, and start over.
    //
    //__WFI(); // Wait-For-Interrupt
#endif
}
 8000c1a:	bf00      	nop
 8000c1c:	3708      	adds	r7, #8
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	40008000 	.word	0x40008000

08000c28 <__NVIC_GetPriorityGrouping>:
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c2c:	4b04      	ldr	r3, [pc, #16]	@ (8000c40 <__NVIC_GetPriorityGrouping+0x18>)
 8000c2e:	68db      	ldr	r3, [r3, #12]
 8000c30:	0a1b      	lsrs	r3, r3, #8
 8000c32:	f003 0307 	and.w	r3, r3, #7
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr
 8000c40:	e000ed00 	.word	0xe000ed00

08000c44 <__NVIC_EnableIRQ>:
{
 8000c44:	b480      	push	{r7}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	db0b      	blt.n	8000c6e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c56:	79fb      	ldrb	r3, [r7, #7]
 8000c58:	f003 021f 	and.w	r2, r3, #31
 8000c5c:	4907      	ldr	r1, [pc, #28]	@ (8000c7c <__NVIC_EnableIRQ+0x38>)
 8000c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c62:	095b      	lsrs	r3, r3, #5
 8000c64:	2001      	movs	r0, #1
 8000c66:	fa00 f202 	lsl.w	r2, r0, r2
 8000c6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000c6e:	bf00      	nop
 8000c70:	370c      	adds	r7, #12
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	e000e100 	.word	0xe000e100

08000c80 <__NVIC_SetPriority>:
{
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	4603      	mov	r3, r0
 8000c88:	6039      	str	r1, [r7, #0]
 8000c8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	db0a      	blt.n	8000caa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	b2da      	uxtb	r2, r3
 8000c98:	490c      	ldr	r1, [pc, #48]	@ (8000ccc <__NVIC_SetPriority+0x4c>)
 8000c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9e:	0112      	lsls	r2, r2, #4
 8000ca0:	b2d2      	uxtb	r2, r2
 8000ca2:	440b      	add	r3, r1
 8000ca4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000ca8:	e00a      	b.n	8000cc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	b2da      	uxtb	r2, r3
 8000cae:	4908      	ldr	r1, [pc, #32]	@ (8000cd0 <__NVIC_SetPriority+0x50>)
 8000cb0:	79fb      	ldrb	r3, [r7, #7]
 8000cb2:	f003 030f 	and.w	r3, r3, #15
 8000cb6:	3b04      	subs	r3, #4
 8000cb8:	0112      	lsls	r2, r2, #4
 8000cba:	b2d2      	uxtb	r2, r2
 8000cbc:	440b      	add	r3, r1
 8000cbe:	761a      	strb	r2, [r3, #24]
}
 8000cc0:	bf00      	nop
 8000cc2:	370c      	adds	r7, #12
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr
 8000ccc:	e000e100 	.word	0xe000e100
 8000cd0:	e000ed00 	.word	0xe000ed00

08000cd4 <NVIC_EncodePriority>:
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b089      	sub	sp, #36	@ 0x24
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	60f8      	str	r0, [r7, #12]
 8000cdc:	60b9      	str	r1, [r7, #8]
 8000cde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	f003 0307 	and.w	r3, r3, #7
 8000ce6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ce8:	69fb      	ldr	r3, [r7, #28]
 8000cea:	f1c3 0307 	rsb	r3, r3, #7
 8000cee:	2b04      	cmp	r3, #4
 8000cf0:	bf28      	it	cs
 8000cf2:	2304      	movcs	r3, #4
 8000cf4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cf6:	69fb      	ldr	r3, [r7, #28]
 8000cf8:	3304      	adds	r3, #4
 8000cfa:	2b06      	cmp	r3, #6
 8000cfc:	d902      	bls.n	8000d04 <NVIC_EncodePriority+0x30>
 8000cfe:	69fb      	ldr	r3, [r7, #28]
 8000d00:	3b03      	subs	r3, #3
 8000d02:	e000      	b.n	8000d06 <NVIC_EncodePriority+0x32>
 8000d04:	2300      	movs	r3, #0
 8000d06:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d08:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000d0c:	69bb      	ldr	r3, [r7, #24]
 8000d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d12:	43da      	mvns	r2, r3
 8000d14:	68bb      	ldr	r3, [r7, #8]
 8000d16:	401a      	ands	r2, r3
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d1c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	fa01 f303 	lsl.w	r3, r1, r3
 8000d26:	43d9      	mvns	r1, r3
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d2c:	4313      	orrs	r3, r2
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	3724      	adds	r7, #36	@ 0x24
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr

08000d3a <LL_LPUART_Enable>:
  * @rmtoll CR1          UE            LL_LPUART_Enable
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_Enable(USART_TypeDef *LPUARTx)
{
 8000d3a:	b480      	push	{r7}
 8000d3c:	b083      	sub	sp, #12
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	6078      	str	r0, [r7, #4]
  SET_BIT(LPUARTx->CR1, USART_CR1_UE);
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f043 0201 	orr.w	r2, r3, #1
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	601a      	str	r2, [r3, #0]
}
 8000d4e:	bf00      	nop
 8000d50:	370c      	adds	r7, #12
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr

08000d5a <LL_LPUART_EnableFIFO>:
  * @rmtoll CR1          FIFOEN        LL_LPUART_EnableFIFO
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_EnableFIFO(USART_TypeDef *LPUARTx)
{
 8000d5a:	b480      	push	{r7}
 8000d5c:	b083      	sub	sp, #12
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	6078      	str	r0, [r7, #4]
  SET_BIT(LPUARTx->CR1, USART_CR1_FIFOEN);
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	601a      	str	r2, [r3, #0]
}
 8000d6e:	bf00      	nop
 8000d70:	370c      	adds	r7, #12
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr

08000d7a <LL_LPUART_SetTXFIFOThreshold>:
  *         @arg @ref LL_LPUART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_LPUART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_SetTXFIFOThreshold(USART_TypeDef *LPUARTx, uint32_t Threshold)
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	b089      	sub	sp, #36	@ 0x24
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	6078      	str	r0, [r7, #4]
 8000d82:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(LPUARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	3308      	adds	r3, #8
 8000d88:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	e853 3f00 	ldrex	r3, [r3]
 8000d90:	60bb      	str	r3, [r7, #8]
   return(result);
 8000d92:	68bb      	ldr	r3, [r7, #8]
 8000d94:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	075b      	lsls	r3, r3, #29
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	61fb      	str	r3, [r7, #28]
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	3308      	adds	r3, #8
 8000da4:	69fa      	ldr	r2, [r7, #28]
 8000da6:	61ba      	str	r2, [r7, #24]
 8000da8:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000daa:	6979      	ldr	r1, [r7, #20]
 8000dac:	69ba      	ldr	r2, [r7, #24]
 8000dae:	e841 2300 	strex	r3, r2, [r1]
 8000db2:	613b      	str	r3, [r7, #16]
   return(result);
 8000db4:	693b      	ldr	r3, [r7, #16]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d1e4      	bne.n	8000d84 <LL_LPUART_SetTXFIFOThreshold+0xa>
}
 8000dba:	bf00      	nop
 8000dbc:	bf00      	nop
 8000dbe:	3724      	adds	r7, #36	@ 0x24
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr

08000dc8 <LL_LPUART_SetRXFIFOThreshold>:
  *         @arg @ref LL_LPUART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_LPUART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_SetRXFIFOThreshold(USART_TypeDef *LPUARTx, uint32_t Threshold)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b089      	sub	sp, #36	@ 0x24
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
 8000dd0:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(LPUARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	3308      	adds	r3, #8
 8000dd6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	e853 3f00 	ldrex	r3, [r3]
 8000dde:	60bb      	str	r3, [r7, #8]
   return(result);
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	065b      	lsls	r3, r3, #25
 8000dea:	4313      	orrs	r3, r2
 8000dec:	61fb      	str	r3, [r7, #28]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	3308      	adds	r3, #8
 8000df2:	69fa      	ldr	r2, [r7, #28]
 8000df4:	61ba      	str	r2, [r7, #24]
 8000df6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000df8:	6979      	ldr	r1, [r7, #20]
 8000dfa:	69ba      	ldr	r2, [r7, #24]
 8000dfc:	e841 2300 	strex	r3, r2, [r1]
 8000e00:	613b      	str	r3, [r7, #16]
   return(result);
 8000e02:	693b      	ldr	r3, [r7, #16]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d1e4      	bne.n	8000dd2 <LL_LPUART_SetRXFIFOThreshold+0xa>
}
 8000e08:	bf00      	nop
 8000e0a:	bf00      	nop
 8000e0c:	3724      	adds	r7, #36	@ 0x24
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr

08000e16 <LL_LPUART_IsActiveFlag_TEACK>:
  * @rmtoll ISR          TEACK         LL_LPUART_IsActiveFlag_TEACK
  * @param  LPUARTx LPUART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_LPUART_IsActiveFlag_TEACK(const USART_TypeDef *LPUARTx)
{
 8000e16:	b480      	push	{r7}
 8000e18:	b083      	sub	sp, #12
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	69db      	ldr	r3, [r3, #28]
 8000e22:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e26:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8000e2a:	d101      	bne.n	8000e30 <LL_LPUART_IsActiveFlag_TEACK+0x1a>
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	e000      	b.n	8000e32 <LL_LPUART_IsActiveFlag_TEACK+0x1c>
 8000e30:	2300      	movs	r3, #0
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	370c      	adds	r7, #12
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr

08000e3e <LL_LPUART_IsActiveFlag_REACK>:
  * @rmtoll ISR          REACK         LL_LPUART_IsActiveFlag_REACK
  * @param  LPUARTx LPUART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_LPUART_IsActiveFlag_REACK(const USART_TypeDef *LPUARTx)
{
 8000e3e:	b480      	push	{r7}
 8000e40:	b083      	sub	sp, #12
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	69db      	ldr	r3, [r3, #28]
 8000e4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000e4e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8000e52:	d101      	bne.n	8000e58 <LL_LPUART_IsActiveFlag_REACK+0x1a>
 8000e54:	2301      	movs	r3, #1
 8000e56:	e000      	b.n	8000e5a <LL_LPUART_IsActiveFlag_REACK+0x1c>
 8000e58:	2300      	movs	r3, #0
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	370c      	adds	r7, #12
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
	...

08000e68 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000e6c:	4b05      	ldr	r3, [pc, #20]	@ (8000e84 <LL_RCC_HSI_Enable+0x1c>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a04      	ldr	r2, [pc, #16]	@ (8000e84 <LL_RCC_HSI_Enable+0x1c>)
 8000e72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e76:	6013      	str	r3, [r2, #0]
}
 8000e78:	bf00      	nop
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	40021000 	.word	0x40021000

08000e88 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8000e8c:	4b07      	ldr	r3, [pc, #28]	@ (8000eac <LL_RCC_HSI_IsReady+0x24>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000e98:	d101      	bne.n	8000e9e <LL_RCC_HSI_IsReady+0x16>
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	e000      	b.n	8000ea0 <LL_RCC_HSI_IsReady+0x18>
 8000e9e:	2300      	movs	r3, #0
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	40021000 	.word	0x40021000

08000eb0 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8000eb8:	4b07      	ldr	r3, [pc, #28]	@ (8000ed8 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	061b      	lsls	r3, r3, #24
 8000ec4:	4904      	ldr	r1, [pc, #16]	@ (8000ed8 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	604b      	str	r3, [r1, #4]
}
 8000eca:	bf00      	nop
 8000ecc:	370c      	adds	r7, #12
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	40021000 	.word	0x40021000

08000edc <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000ee4:	4b06      	ldr	r3, [pc, #24]	@ (8000f00 <LL_RCC_SetSysClkSource+0x24>)
 8000ee6:	689b      	ldr	r3, [r3, #8]
 8000ee8:	f023 0203 	bic.w	r2, r3, #3
 8000eec:	4904      	ldr	r1, [pc, #16]	@ (8000f00 <LL_RCC_SetSysClkSource+0x24>)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	608b      	str	r3, [r1, #8]
}
 8000ef4:	bf00      	nop
 8000ef6:	370c      	adds	r7, #12
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr
 8000f00:	40021000 	.word	0x40021000

08000f04 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000f08:	4b04      	ldr	r3, [pc, #16]	@ (8000f1c <LL_RCC_GetSysClkSource+0x18>)
 8000f0a:	689b      	ldr	r3, [r3, #8]
 8000f0c:	f003 030c 	and.w	r3, r3, #12
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	40021000 	.word	0x40021000

08000f20 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000f28:	4b06      	ldr	r3, [pc, #24]	@ (8000f44 <LL_RCC_SetAHBPrescaler+0x24>)
 8000f2a:	689b      	ldr	r3, [r3, #8]
 8000f2c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000f30:	4904      	ldr	r1, [pc, #16]	@ (8000f44 <LL_RCC_SetAHBPrescaler+0x24>)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4313      	orrs	r3, r2
 8000f36:	608b      	str	r3, [r1, #8]
}
 8000f38:	bf00      	nop
 8000f3a:	370c      	adds	r7, #12
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr
 8000f44:	40021000 	.word	0x40021000

08000f48 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000f50:	4b06      	ldr	r3, [pc, #24]	@ (8000f6c <LL_RCC_SetAPB1Prescaler+0x24>)
 8000f52:	689b      	ldr	r3, [r3, #8]
 8000f54:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8000f58:	4904      	ldr	r1, [pc, #16]	@ (8000f6c <LL_RCC_SetAPB1Prescaler+0x24>)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	608b      	str	r3, [r1, #8]
}
 8000f60:	bf00      	nop
 8000f62:	370c      	adds	r7, #12
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr
 8000f6c:	40021000 	.word	0x40021000

08000f70 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000f78:	4b06      	ldr	r3, [pc, #24]	@ (8000f94 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000f7a:	689b      	ldr	r3, [r3, #8]
 8000f7c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8000f80:	4904      	ldr	r1, [pc, #16]	@ (8000f94 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4313      	orrs	r3, r2
 8000f86:	608b      	str	r3, [r1, #8]
}
 8000f88:	bf00      	nop
 8000f8a:	370c      	adds	r7, #12
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr
 8000f94:	40021000 	.word	0x40021000

08000f98 <LL_RCC_SetLPUARTClockSource>:
  *         @arg @ref LL_RCC_LPUART1_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_LPUART1_CLKSOURCE_LSE
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetLPUARTClockSource(uint32_t LPUARTxSource)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8000fa0:	4b07      	ldr	r3, [pc, #28]	@ (8000fc0 <LL_RCC_SetLPUARTClockSource+0x28>)
 8000fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fa6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8000faa:	4905      	ldr	r1, [pc, #20]	@ (8000fc0 <LL_RCC_SetLPUARTClockSource+0x28>)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8000fb4:	bf00      	nop
 8000fb6:	370c      	adds	r7, #12
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr
 8000fc0:	40021000 	.word	0x40021000

08000fc4 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000fc8:	4b05      	ldr	r3, [pc, #20]	@ (8000fe0 <LL_RCC_PLL_Enable+0x1c>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a04      	ldr	r2, [pc, #16]	@ (8000fe0 <LL_RCC_PLL_Enable+0x1c>)
 8000fce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000fd2:	6013      	str	r3, [r2, #0]
}
 8000fd4:	bf00      	nop
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	40021000 	.word	0x40021000

08000fe4 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8000fe8:	4b07      	ldr	r3, [pc, #28]	@ (8001008 <LL_RCC_PLL_IsReady+0x24>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000ff0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8000ff4:	d101      	bne.n	8000ffa <LL_RCC_PLL_IsReady+0x16>
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e000      	b.n	8000ffc <LL_RCC_PLL_IsReady+0x18>
 8000ffa:	2300      	movs	r3, #0
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	40021000 	.word	0x40021000

0800100c <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 800100c:	b480      	push	{r7}
 800100e:	b085      	sub	sp, #20
 8001010:	af00      	add	r7, sp, #0
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	60b9      	str	r1, [r7, #8]
 8001016:	607a      	str	r2, [r7, #4]
 8001018:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 800101a:	4b0a      	ldr	r3, [pc, #40]	@ (8001044 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 800101c:	68da      	ldr	r2, [r3, #12]
 800101e:	4b0a      	ldr	r3, [pc, #40]	@ (8001048 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 8001020:	4013      	ands	r3, r2
 8001022:	68f9      	ldr	r1, [r7, #12]
 8001024:	68ba      	ldr	r2, [r7, #8]
 8001026:	4311      	orrs	r1, r2
 8001028:	687a      	ldr	r2, [r7, #4]
 800102a:	0212      	lsls	r2, r2, #8
 800102c:	4311      	orrs	r1, r2
 800102e:	683a      	ldr	r2, [r7, #0]
 8001030:	430a      	orrs	r2, r1
 8001032:	4904      	ldr	r1, [pc, #16]	@ (8001044 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8001034:	4313      	orrs	r3, r2
 8001036:	60cb      	str	r3, [r1, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 8001038:	bf00      	nop
 800103a:	3714      	adds	r7, #20
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr
 8001044:	40021000 	.word	0x40021000
 8001048:	f9ff800c 	.word	0xf9ff800c

0800104c <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 8001050:	4b05      	ldr	r3, [pc, #20]	@ (8001068 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8001052:	68db      	ldr	r3, [r3, #12]
 8001054:	4a04      	ldr	r2, [pc, #16]	@ (8001068 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8001056:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800105a:	60d3      	str	r3, [r2, #12]
}
 800105c:	bf00      	nop
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	40021000 	.word	0x40021000

0800106c <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800106c:	b480      	push	{r7}
 800106e:	b085      	sub	sp, #20
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001074:	4b08      	ldr	r3, [pc, #32]	@ (8001098 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001076:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001078:	4907      	ldr	r1, [pc, #28]	@ (8001098 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4313      	orrs	r3, r2
 800107e:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001080:	4b05      	ldr	r3, [pc, #20]	@ (8001098 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001082:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	4013      	ands	r3, r2
 8001088:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800108a:	68fb      	ldr	r3, [r7, #12]
}
 800108c:	bf00      	nop
 800108e:	3714      	adds	r7, #20
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr
 8001098:	40021000 	.word	0x40021000

0800109c <LL_APB1_GRP2_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 800109c:	b480      	push	{r7}
 800109e:	b085      	sub	sp, #20
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 80010a4:	4b08      	ldr	r3, [pc, #32]	@ (80010c8 <LL_APB1_GRP2_EnableClock+0x2c>)
 80010a6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80010a8:	4907      	ldr	r1, [pc, #28]	@ (80010c8 <LL_APB1_GRP2_EnableClock+0x2c>)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4313      	orrs	r3, r2
 80010ae:	65cb      	str	r3, [r1, #92]	@ 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 80010b0:	4b05      	ldr	r3, [pc, #20]	@ (80010c8 <LL_APB1_GRP2_EnableClock+0x2c>)
 80010b2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	4013      	ands	r3, r2
 80010b8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80010ba:	68fb      	ldr	r3, [r7, #12]
}
 80010bc:	bf00      	nop
 80010be:	3714      	adds	r7, #20
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr
 80010c8:	40021000 	.word	0x40021000

080010cc <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80010d4:	4b06      	ldr	r3, [pc, #24]	@ (80010f0 <LL_FLASH_SetLatency+0x24>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f023 020f 	bic.w	r2, r3, #15
 80010dc:	4904      	ldr	r1, [pc, #16]	@ (80010f0 <LL_FLASH_SetLatency+0x24>)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	600b      	str	r3, [r1, #0]
}
 80010e4:	bf00      	nop
 80010e6:	370c      	adds	r7, #12
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr
 80010f0:	40022000 	.word	0x40022000

080010f4 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_15 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80010f8:	4b04      	ldr	r3, [pc, #16]	@ (800110c <LL_FLASH_GetLatency+0x18>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f003 030f 	and.w	r3, r3, #15
}
 8001100:	4618      	mov	r0, r3
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	40022000 	.word	0x40022000

08001110 <LL_PWR_EnableRange1BoostMode>:
  * @brief  Enable main regulator voltage range 1 boost mode
  * @rmtoll CR5          R1MODE        LL_PWR_EnableRange1BoostMode
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableRange1BoostMode(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001114:	4b06      	ldr	r3, [pc, #24]	@ (8001130 <LL_PWR_EnableRange1BoostMode+0x20>)
 8001116:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800111a:	4a05      	ldr	r2, [pc, #20]	@ (8001130 <LL_PWR_EnableRange1BoostMode+0x20>)
 800111c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001120:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
}
 8001124:	bf00      	nop
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	40007000 	.word	0x40007000

08001134 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001138:	f000 f9f3 	bl	8001522 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800113c:	f000 f810 	bl	8001160 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001140:	f000 f8f0 	bl	8001324 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8001144:	f000 f864 	bl	8001210 <MX_LPUART1_UART_Init>

  //char msg[200];
  //sprintf(msg, "Blinky example with interrupts\r\n");
  //HAL_UART_Transmit(&hlpuart1, (uint8_t *)msg, strlen(msg), 2000);

  QF_init();       	// Initialize the framework and the underlying RT kernel
 8001148:	f003 fe78 	bl	8004e3c <QF_init>
  BSP_init();      	// Initialize the BSP
 800114c:	f7ff fcae 	bl	8000aac <BSP_init>
  BSP_start();     	// Start the AOs/Threads
 8001150:	f7ff fce2 	bl	8000b18 <BSP_start>

  return QF_run(); 			// run the QF application (endless loop)
 8001154:	f003 febe 	bl	8004ed4 <QF_run>
 8001158:	4603      	mov	r3, r0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  //}
  /* USER CODE END 3 */
}
 800115a:	4618      	mov	r0, r3
 800115c:	bd80      	pop	{r7, pc}
	...

08001160 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_4);
 8001166:	2004      	movs	r0, #4
 8001168:	f7ff ffb0 	bl	80010cc <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_4)
 800116c:	bf00      	nop
 800116e:	f7ff ffc1 	bl	80010f4 <LL_FLASH_GetLatency>
 8001172:	4603      	mov	r3, r0
 8001174:	2b04      	cmp	r3, #4
 8001176:	d1fa      	bne.n	800116e <SystemClock_Config+0xe>
  {
  }
  LL_PWR_EnableRange1BoostMode();
 8001178:	f7ff ffca 	bl	8001110 <LL_PWR_EnableRange1BoostMode>
  LL_RCC_HSI_Enable();
 800117c:	f7ff fe74 	bl	8000e68 <LL_RCC_HSI_Enable>
   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8001180:	bf00      	nop
 8001182:	f7ff fe81 	bl	8000e88 <LL_RCC_HSI_IsReady>
 8001186:	4603      	mov	r3, r0
 8001188:	2b01      	cmp	r3, #1
 800118a:	d1fa      	bne.n	8001182 <SystemClock_Config+0x22>
  {
  }

  LL_RCC_HSI_SetCalibTrimming(64);
 800118c:	2040      	movs	r0, #64	@ 0x40
 800118e:	f7ff fe8f 	bl	8000eb0 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_4, 85, LL_RCC_PLLR_DIV_2);
 8001192:	2300      	movs	r3, #0
 8001194:	2255      	movs	r2, #85	@ 0x55
 8001196:	2130      	movs	r1, #48	@ 0x30
 8001198:	2002      	movs	r0, #2
 800119a:	f7ff ff37 	bl	800100c <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_EnableDomain_SYS();
 800119e:	f7ff ff55 	bl	800104c <LL_RCC_PLL_EnableDomain_SYS>
  LL_RCC_PLL_Enable();
 80011a2:	f7ff ff0f 	bl	8000fc4 <LL_RCC_PLL_Enable>
   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 80011a6:	bf00      	nop
 80011a8:	f7ff ff1c 	bl	8000fe4 <LL_RCC_PLL_IsReady>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b01      	cmp	r3, #1
 80011b0:	d1fa      	bne.n	80011a8 <SystemClock_Config+0x48>
  {
  }

  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 80011b2:	2003      	movs	r0, #3
 80011b4:	f7ff fe92 	bl	8000edc <LL_RCC_SetSysClkSource>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_2);
 80011b8:	2080      	movs	r0, #128	@ 0x80
 80011ba:	f7ff feb1 	bl	8000f20 <LL_RCC_SetAHBPrescaler>
   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80011be:	bf00      	nop
 80011c0:	f7ff fea0 	bl	8000f04 <LL_RCC_GetSysClkSource>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b0c      	cmp	r3, #12
 80011c8:	d1fa      	bne.n	80011c0 <SystemClock_Config+0x60>
  {
  }

  /* Insure 1us transition state at intermediate medium speed clock*/
  for (__IO uint32_t i = (170 >> 1); i !=0; i--);
 80011ca:	2355      	movs	r3, #85	@ 0x55
 80011cc:	607b      	str	r3, [r7, #4]
 80011ce:	e002      	b.n	80011d6 <SystemClock_Config+0x76>
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	3b01      	subs	r3, #1
 80011d4:	607b      	str	r3, [r7, #4]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d1f9      	bne.n	80011d0 <SystemClock_Config+0x70>

  /* Set AHB prescaler*/
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80011dc:	2000      	movs	r0, #0
 80011de:	f7ff fe9f 	bl	8000f20 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80011e2:	2000      	movs	r0, #0
 80011e4:	f7ff feb0 	bl	8000f48 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80011e8:	2000      	movs	r0, #0
 80011ea:	f7ff fec1 	bl	8000f70 <LL_RCC_SetAPB2Prescaler>
  LL_SetSystemCoreClock(170000000);
 80011ee:	4807      	ldr	r0, [pc, #28]	@ (800120c <SystemClock_Config+0xac>)
 80011f0:	f001 f8a0 	bl	8002334 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 80011f4:	2000      	movs	r0, #0
 80011f6:	f000 f9ad 	bl	8001554 <HAL_InitTick>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001200:	f000 f8fc 	bl	80013fc <Error_Handler>
  }
}
 8001204:	bf00      	nop
 8001206:	3708      	adds	r7, #8
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	0a21fe80 	.word	0x0a21fe80

08001210 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b08e      	sub	sp, #56	@ 0x38
 8001214:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LPUART1_Init 0 */

  /* USER CODE END LPUART1_Init 0 */

  LL_LPUART_InitTypeDef LPUART_InitStruct = {0};
 8001216:	f107 031c 	add.w	r3, r7, #28
 800121a:	2200      	movs	r2, #0
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	605a      	str	r2, [r3, #4]
 8001220:	609a      	str	r2, [r3, #8]
 8001222:	60da      	str	r2, [r3, #12]
 8001224:	611a      	str	r2, [r3, #16]
 8001226:	615a      	str	r2, [r3, #20]
 8001228:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800122a:	1d3b      	adds	r3, r7, #4
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	605a      	str	r2, [r3, #4]
 8001232:	609a      	str	r2, [r3, #8]
 8001234:	60da      	str	r2, [r3, #12]
 8001236:	611a      	str	r2, [r3, #16]
 8001238:	615a      	str	r2, [r3, #20]

  LL_RCC_SetLPUARTClockSource(LL_RCC_LPUART1_CLKSOURCE_PCLK1);
 800123a:	2000      	movs	r0, #0
 800123c:	f7ff feac 	bl	8000f98 <LL_RCC_SetLPUARTClockSource>

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_LPUART1);
 8001240:	2001      	movs	r0, #1
 8001242:	f7ff ff2b 	bl	800109c <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8001246:	2001      	movs	r0, #1
 8001248:	f7ff ff10 	bl	800106c <LL_AHB2_GRP1_EnableClock>
  /**LPUART1 GPIO Configuration
  PA2   ------> LPUART1_TX
  PA3   ------> LPUART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 800124c:	2304      	movs	r3, #4
 800124e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001250:	2302      	movs	r3, #2
 8001252:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001254:	2300      	movs	r3, #0
 8001256:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001258:	2300      	movs	r3, #0
 800125a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800125c:	2300      	movs	r3, #0
 800125e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_12;
 8001260:	230c      	movs	r3, #12
 8001262:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001264:	1d3b      	adds	r3, r7, #4
 8001266:	4619      	mov	r1, r3
 8001268:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800126c:	f000 fda9 	bl	8001dc2 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8001270:	2308      	movs	r3, #8
 8001272:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001274:	2302      	movs	r3, #2
 8001276:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001278:	2300      	movs	r3, #0
 800127a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800127c:	2300      	movs	r3, #0
 800127e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001280:	2300      	movs	r3, #0
 8001282:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_12;
 8001284:	230c      	movs	r3, #12
 8001286:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001288:	1d3b      	adds	r3, r7, #4
 800128a:	4619      	mov	r1, r3
 800128c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001290:	f000 fd97 	bl	8001dc2 <LL_GPIO_Init>

  /* LPUART1 interrupt Init */
  NVIC_SetPriority(LPUART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001294:	f7ff fcc8 	bl	8000c28 <__NVIC_GetPriorityGrouping>
 8001298:	4603      	mov	r3, r0
 800129a:	2200      	movs	r2, #0
 800129c:	2100      	movs	r1, #0
 800129e:	4618      	mov	r0, r3
 80012a0:	f7ff fd18 	bl	8000cd4 <NVIC_EncodePriority>
 80012a4:	4603      	mov	r3, r0
 80012a6:	4619      	mov	r1, r3
 80012a8:	205b      	movs	r0, #91	@ 0x5b
 80012aa:	f7ff fce9 	bl	8000c80 <__NVIC_SetPriority>
  NVIC_EnableIRQ(LPUART1_IRQn);
 80012ae:	205b      	movs	r0, #91	@ 0x5b
 80012b0:	f7ff fcc8 	bl	8000c44 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  LPUART_InitStruct.PrescalerValue = LL_LPUART_PRESCALER_DIV1;
 80012b4:	2300      	movs	r3, #0
 80012b6:	61fb      	str	r3, [r7, #28]
  LPUART_InitStruct.BaudRate = 115200;
 80012b8:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 80012bc:	623b      	str	r3, [r7, #32]
  LPUART_InitStruct.DataWidth = LL_LPUART_DATAWIDTH_8B;
 80012be:	2300      	movs	r3, #0
 80012c0:	627b      	str	r3, [r7, #36]	@ 0x24
  LPUART_InitStruct.StopBits = LL_LPUART_STOPBITS_1;
 80012c2:	2300      	movs	r3, #0
 80012c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  LPUART_InitStruct.Parity = LL_LPUART_PARITY_NONE;
 80012c6:	2300      	movs	r3, #0
 80012c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LPUART_InitStruct.TransferDirection = LL_LPUART_DIRECTION_TX_RX;
 80012ca:	230c      	movs	r3, #12
 80012cc:	633b      	str	r3, [r7, #48]	@ 0x30
  LPUART_InitStruct.HardwareFlowControl = LL_LPUART_HWCONTROL_NONE;
 80012ce:	2300      	movs	r3, #0
 80012d0:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_LPUART_Init(LPUART1, &LPUART_InitStruct);
 80012d2:	f107 031c 	add.w	r3, r7, #28
 80012d6:	4619      	mov	r1, r3
 80012d8:	4811      	ldr	r0, [pc, #68]	@ (8001320 <MX_LPUART1_UART_Init+0x110>)
 80012da:	f000 fe79 	bl	8001fd0 <LL_LPUART_Init>
  LL_LPUART_SetTXFIFOThreshold(LPUART1, LL_LPUART_FIFOTHRESHOLD_1_8);
 80012de:	2100      	movs	r1, #0
 80012e0:	480f      	ldr	r0, [pc, #60]	@ (8001320 <MX_LPUART1_UART_Init+0x110>)
 80012e2:	f7ff fd4a 	bl	8000d7a <LL_LPUART_SetTXFIFOThreshold>
  LL_LPUART_SetRXFIFOThreshold(LPUART1, LL_LPUART_FIFOTHRESHOLD_1_8);
 80012e6:	2100      	movs	r1, #0
 80012e8:	480d      	ldr	r0, [pc, #52]	@ (8001320 <MX_LPUART1_UART_Init+0x110>)
 80012ea:	f7ff fd6d 	bl	8000dc8 <LL_LPUART_SetRXFIFOThreshold>
  LL_LPUART_EnableFIFO(LPUART1);
 80012ee:	480c      	ldr	r0, [pc, #48]	@ (8001320 <MX_LPUART1_UART_Init+0x110>)
 80012f0:	f7ff fd33 	bl	8000d5a <LL_LPUART_EnableFIFO>

  /* USER CODE BEGIN WKUPType LPUART1 */

  /* USER CODE END WKUPType LPUART1 */

  LL_LPUART_Enable(LPUART1);
 80012f4:	480a      	ldr	r0, [pc, #40]	@ (8001320 <MX_LPUART1_UART_Init+0x110>)
 80012f6:	f7ff fd20 	bl	8000d3a <LL_LPUART_Enable>

  /* Polling LPUART1 initialisation */
  while((!(LL_LPUART_IsActiveFlag_TEACK(LPUART1))) || (!(LL_LPUART_IsActiveFlag_REACK(LPUART1))))
 80012fa:	bf00      	nop
 80012fc:	4808      	ldr	r0, [pc, #32]	@ (8001320 <MX_LPUART1_UART_Init+0x110>)
 80012fe:	f7ff fd8a 	bl	8000e16 <LL_LPUART_IsActiveFlag_TEACK>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d0f9      	beq.n	80012fc <MX_LPUART1_UART_Init+0xec>
 8001308:	4805      	ldr	r0, [pc, #20]	@ (8001320 <MX_LPUART1_UART_Init+0x110>)
 800130a:	f7ff fd98 	bl	8000e3e <LL_LPUART_IsActiveFlag_REACK>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d0f3      	beq.n	80012fc <MX_LPUART1_UART_Init+0xec>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001314:	bf00      	nop
 8001316:	bf00      	nop
 8001318:	3738      	adds	r7, #56	@ 0x38
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	40008000 	.word	0x40008000

08001324 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b08a      	sub	sp, #40	@ 0x28
 8001328:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800132a:	f107 0314 	add.w	r3, r7, #20
 800132e:	2200      	movs	r2, #0
 8001330:	601a      	str	r2, [r3, #0]
 8001332:	605a      	str	r2, [r3, #4]
 8001334:	609a      	str	r2, [r3, #8]
 8001336:	60da      	str	r2, [r3, #12]
 8001338:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800133a:	4b2e      	ldr	r3, [pc, #184]	@ (80013f4 <MX_GPIO_Init+0xd0>)
 800133c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800133e:	4a2d      	ldr	r2, [pc, #180]	@ (80013f4 <MX_GPIO_Init+0xd0>)
 8001340:	f043 0304 	orr.w	r3, r3, #4
 8001344:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001346:	4b2b      	ldr	r3, [pc, #172]	@ (80013f4 <MX_GPIO_Init+0xd0>)
 8001348:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800134a:	f003 0304 	and.w	r3, r3, #4
 800134e:	613b      	str	r3, [r7, #16]
 8001350:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001352:	4b28      	ldr	r3, [pc, #160]	@ (80013f4 <MX_GPIO_Init+0xd0>)
 8001354:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001356:	4a27      	ldr	r2, [pc, #156]	@ (80013f4 <MX_GPIO_Init+0xd0>)
 8001358:	f043 0320 	orr.w	r3, r3, #32
 800135c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800135e:	4b25      	ldr	r3, [pc, #148]	@ (80013f4 <MX_GPIO_Init+0xd0>)
 8001360:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001362:	f003 0320 	and.w	r3, r3, #32
 8001366:	60fb      	str	r3, [r7, #12]
 8001368:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800136a:	4b22      	ldr	r3, [pc, #136]	@ (80013f4 <MX_GPIO_Init+0xd0>)
 800136c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800136e:	4a21      	ldr	r2, [pc, #132]	@ (80013f4 <MX_GPIO_Init+0xd0>)
 8001370:	f043 0301 	orr.w	r3, r3, #1
 8001374:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001376:	4b1f      	ldr	r3, [pc, #124]	@ (80013f4 <MX_GPIO_Init+0xd0>)
 8001378:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800137a:	f003 0301 	and.w	r3, r3, #1
 800137e:	60bb      	str	r3, [r7, #8]
 8001380:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001382:	4b1c      	ldr	r3, [pc, #112]	@ (80013f4 <MX_GPIO_Init+0xd0>)
 8001384:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001386:	4a1b      	ldr	r2, [pc, #108]	@ (80013f4 <MX_GPIO_Init+0xd0>)
 8001388:	f043 0302 	orr.w	r3, r3, #2
 800138c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800138e:	4b19      	ldr	r3, [pc, #100]	@ (80013f4 <MX_GPIO_Init+0xd0>)
 8001390:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001392:	f003 0302 	and.w	r3, r3, #2
 8001396:	607b      	str	r3, [r7, #4]
 8001398:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800139a:	2200      	movs	r2, #0
 800139c:	2120      	movs	r1, #32
 800139e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013a2:	f000 fb77 	bl	8001a94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80013a6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013ac:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80013b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b2:	2300      	movs	r3, #0
 80013b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013b6:	f107 0314 	add.w	r3, r7, #20
 80013ba:	4619      	mov	r1, r3
 80013bc:	480e      	ldr	r0, [pc, #56]	@ (80013f8 <MX_GPIO_Init+0xd4>)
 80013be:	f000 f9e7 	bl	8001790 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80013c2:	2320      	movs	r3, #32
 80013c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c6:	2301      	movs	r3, #1
 80013c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ca:	2300      	movs	r3, #0
 80013cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ce:	2300      	movs	r3, #0
 80013d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80013d2:	f107 0314 	add.w	r3, r7, #20
 80013d6:	4619      	mov	r1, r3
 80013d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013dc:	f000 f9d8 	bl	8001790 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80013e0:	2200      	movs	r2, #0
 80013e2:	2100      	movs	r1, #0
 80013e4:	2028      	movs	r0, #40	@ 0x28
 80013e6:	f000 f9ac 	bl	8001742 <HAL_NVIC_SetPriority>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013ea:	bf00      	nop
 80013ec:	3728      	adds	r7, #40	@ 0x28
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	40021000 	.word	0x40021000
 80013f8:	48000800 	.word	0x48000800

080013fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001400:	b672      	cpsid	i
}
 8001402:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001404:	bf00      	nop
 8001406:	e7fd      	b.n	8001404 <Error_Handler+0x8>

08001408 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800140e:	4b0f      	ldr	r3, [pc, #60]	@ (800144c <HAL_MspInit+0x44>)
 8001410:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001412:	4a0e      	ldr	r2, [pc, #56]	@ (800144c <HAL_MspInit+0x44>)
 8001414:	f043 0301 	orr.w	r3, r3, #1
 8001418:	6613      	str	r3, [r2, #96]	@ 0x60
 800141a:	4b0c      	ldr	r3, [pc, #48]	@ (800144c <HAL_MspInit+0x44>)
 800141c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800141e:	f003 0301 	and.w	r3, r3, #1
 8001422:	607b      	str	r3, [r7, #4]
 8001424:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001426:	4b09      	ldr	r3, [pc, #36]	@ (800144c <HAL_MspInit+0x44>)
 8001428:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800142a:	4a08      	ldr	r2, [pc, #32]	@ (800144c <HAL_MspInit+0x44>)
 800142c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001430:	6593      	str	r3, [r2, #88]	@ 0x58
 8001432:	4b06      	ldr	r3, [pc, #24]	@ (800144c <HAL_MspInit+0x44>)
 8001434:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001436:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800143a:	603b      	str	r3, [r7, #0]
 800143c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800143e:	f000 fb65 	bl	8001b0c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001442:	bf00      	nop
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	40021000 	.word	0x40021000

08001450 <HardFault_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001454:	bf00      	nop
 8001456:	e7fd      	b.n	8001454 <HardFault_Handler+0x4>

08001458 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800145c:	bf00      	nop
 800145e:	e7fd      	b.n	800145c <MemManage_Handler+0x4>

08001460 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001464:	bf00      	nop
 8001466:	e7fd      	b.n	8001464 <BusFault_Handler+0x4>

08001468 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800146c:	bf00      	nop
 800146e:	e7fd      	b.n	800146c <UsageFault_Handler+0x4>

08001470 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001474:	bf00      	nop
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr

0800147e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800147e:	b480      	push	{r7}
 8001480:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001482:	bf00      	nop
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr

0800148c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001490:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001494:	f000 fb16 	bl	8001ac4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001498:	bf00      	nop
 800149a:	bd80      	pop	{r7, pc}

0800149c <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0

  /* USER CODE END LPUART1_IRQn 0 */
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80014a0:	bf00      	nop
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
	...

080014ac <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80014b0:	4b06      	ldr	r3, [pc, #24]	@ (80014cc <SystemInit+0x20>)
 80014b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014b6:	4a05      	ldr	r2, [pc, #20]	@ (80014cc <SystemInit+0x20>)
 80014b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80014bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014c0:	bf00      	nop
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	e000ed00 	.word	0xe000ed00

080014d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80014d0:	480d      	ldr	r0, [pc, #52]	@ (8001508 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80014d2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80014d4:	f7ff ffea 	bl	80014ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014d8:	480c      	ldr	r0, [pc, #48]	@ (800150c <LoopForever+0x6>)
  ldr r1, =_edata
 80014da:	490d      	ldr	r1, [pc, #52]	@ (8001510 <LoopForever+0xa>)
  ldr r2, =_sidata
 80014dc:	4a0d      	ldr	r2, [pc, #52]	@ (8001514 <LoopForever+0xe>)
  movs r3, #0
 80014de:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80014e0:	e002      	b.n	80014e8 <LoopCopyDataInit>

080014e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014e6:	3304      	adds	r3, #4

080014e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014ec:	d3f9      	bcc.n	80014e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001518 <LoopForever+0x12>)
  ldr r4, =_ebss
 80014f0:	4c0a      	ldr	r4, [pc, #40]	@ (800151c <LoopForever+0x16>)
  movs r3, #0
 80014f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014f4:	e001      	b.n	80014fa <LoopFillZerobss>

080014f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014f8:	3204      	adds	r2, #4

080014fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014fc:	d3fb      	bcc.n	80014f6 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80014fe:	f006 f91b 	bl	8007738 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001502:	f7ff fe17 	bl	8001134 <main>

08001506 <LoopForever>:

LoopForever:
    b LoopForever
 8001506:	e7fe      	b.n	8001506 <LoopForever>
  ldr   r0, =_estack
 8001508:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800150c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001510:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001514:	0800798c 	.word	0x0800798c
  ldr r2, =_sbss
 8001518:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800151c:	20000b00 	.word	0x20000b00

08001520 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001520:	e7fe      	b.n	8001520 <ADC1_2_IRQHandler>

08001522 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001522:	b580      	push	{r7, lr}
 8001524:	b082      	sub	sp, #8
 8001526:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001528:	2300      	movs	r3, #0
 800152a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800152c:	2003      	movs	r0, #3
 800152e:	f000 f8fd 	bl	800172c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001532:	2000      	movs	r0, #0
 8001534:	f000 f80e 	bl	8001554 <HAL_InitTick>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d002      	beq.n	8001544 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	71fb      	strb	r3, [r7, #7]
 8001542:	e001      	b.n	8001548 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001544:	f7ff ff60 	bl	8001408 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001548:	79fb      	ldrb	r3, [r7, #7]

}
 800154a:	4618      	mov	r0, r3
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
	...

08001554 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800155c:	2300      	movs	r3, #0
 800155e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001560:	4b16      	ldr	r3, [pc, #88]	@ (80015bc <HAL_InitTick+0x68>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d022      	beq.n	80015ae <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001568:	4b15      	ldr	r3, [pc, #84]	@ (80015c0 <HAL_InitTick+0x6c>)
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	4b13      	ldr	r3, [pc, #76]	@ (80015bc <HAL_InitTick+0x68>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001574:	fbb1 f3f3 	udiv	r3, r1, r3
 8001578:	fbb2 f3f3 	udiv	r3, r2, r3
 800157c:	4618      	mov	r0, r3
 800157e:	f000 f8fa 	bl	8001776 <HAL_SYSTICK_Config>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d10f      	bne.n	80015a8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2b0f      	cmp	r3, #15
 800158c:	d809      	bhi.n	80015a2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800158e:	2200      	movs	r2, #0
 8001590:	6879      	ldr	r1, [r7, #4]
 8001592:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001596:	f000 f8d4 	bl	8001742 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800159a:	4a0a      	ldr	r2, [pc, #40]	@ (80015c4 <HAL_InitTick+0x70>)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6013      	str	r3, [r2, #0]
 80015a0:	e007      	b.n	80015b2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	73fb      	strb	r3, [r7, #15]
 80015a6:	e004      	b.n	80015b2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80015a8:	2301      	movs	r3, #1
 80015aa:	73fb      	strb	r3, [r7, #15]
 80015ac:	e001      	b.n	80015b2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80015b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3710      	adds	r7, #16
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	20000008 	.word	0x20000008
 80015c0:	20000000 	.word	0x20000000
 80015c4:	20000004 	.word	0x20000004

080015c8 <__NVIC_SetPriorityGrouping>:
{
 80015c8:	b480      	push	{r7}
 80015ca:	b085      	sub	sp, #20
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	f003 0307 	and.w	r3, r3, #7
 80015d6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015d8:	4b0c      	ldr	r3, [pc, #48]	@ (800160c <__NVIC_SetPriorityGrouping+0x44>)
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015de:	68ba      	ldr	r2, [r7, #8]
 80015e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015e4:	4013      	ands	r3, r2
 80015e6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80015f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015fa:	4a04      	ldr	r2, [pc, #16]	@ (800160c <__NVIC_SetPriorityGrouping+0x44>)
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	60d3      	str	r3, [r2, #12]
}
 8001600:	bf00      	nop
 8001602:	3714      	adds	r7, #20
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr
 800160c:	e000ed00 	.word	0xe000ed00

08001610 <__NVIC_GetPriorityGrouping>:
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001614:	4b04      	ldr	r3, [pc, #16]	@ (8001628 <__NVIC_GetPriorityGrouping+0x18>)
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	0a1b      	lsrs	r3, r3, #8
 800161a:	f003 0307 	and.w	r3, r3, #7
}
 800161e:	4618      	mov	r0, r3
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr
 8001628:	e000ed00 	.word	0xe000ed00

0800162c <__NVIC_SetPriority>:
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	4603      	mov	r3, r0
 8001634:	6039      	str	r1, [r7, #0]
 8001636:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001638:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800163c:	2b00      	cmp	r3, #0
 800163e:	db0a      	blt.n	8001656 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	b2da      	uxtb	r2, r3
 8001644:	490c      	ldr	r1, [pc, #48]	@ (8001678 <__NVIC_SetPriority+0x4c>)
 8001646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800164a:	0112      	lsls	r2, r2, #4
 800164c:	b2d2      	uxtb	r2, r2
 800164e:	440b      	add	r3, r1
 8001650:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001654:	e00a      	b.n	800166c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	b2da      	uxtb	r2, r3
 800165a:	4908      	ldr	r1, [pc, #32]	@ (800167c <__NVIC_SetPriority+0x50>)
 800165c:	79fb      	ldrb	r3, [r7, #7]
 800165e:	f003 030f 	and.w	r3, r3, #15
 8001662:	3b04      	subs	r3, #4
 8001664:	0112      	lsls	r2, r2, #4
 8001666:	b2d2      	uxtb	r2, r2
 8001668:	440b      	add	r3, r1
 800166a:	761a      	strb	r2, [r3, #24]
}
 800166c:	bf00      	nop
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr
 8001678:	e000e100 	.word	0xe000e100
 800167c:	e000ed00 	.word	0xe000ed00

08001680 <NVIC_EncodePriority>:
{
 8001680:	b480      	push	{r7}
 8001682:	b089      	sub	sp, #36	@ 0x24
 8001684:	af00      	add	r7, sp, #0
 8001686:	60f8      	str	r0, [r7, #12]
 8001688:	60b9      	str	r1, [r7, #8]
 800168a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	f003 0307 	and.w	r3, r3, #7
 8001692:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	f1c3 0307 	rsb	r3, r3, #7
 800169a:	2b04      	cmp	r3, #4
 800169c:	bf28      	it	cs
 800169e:	2304      	movcs	r3, #4
 80016a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	3304      	adds	r3, #4
 80016a6:	2b06      	cmp	r3, #6
 80016a8:	d902      	bls.n	80016b0 <NVIC_EncodePriority+0x30>
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	3b03      	subs	r3, #3
 80016ae:	e000      	b.n	80016b2 <NVIC_EncodePriority+0x32>
 80016b0:	2300      	movs	r3, #0
 80016b2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016b4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80016b8:	69bb      	ldr	r3, [r7, #24]
 80016ba:	fa02 f303 	lsl.w	r3, r2, r3
 80016be:	43da      	mvns	r2, r3
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	401a      	ands	r2, r3
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016c8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	fa01 f303 	lsl.w	r3, r1, r3
 80016d2:	43d9      	mvns	r1, r3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016d8:	4313      	orrs	r3, r2
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3724      	adds	r7, #36	@ 0x24
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
	...

080016e8 <SysTick_Config>:
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	3b01      	subs	r3, #1
 80016f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80016f8:	d301      	bcc.n	80016fe <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80016fa:	2301      	movs	r3, #1
 80016fc:	e00f      	b.n	800171e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001728 <SysTick_Config+0x40>)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	3b01      	subs	r3, #1
 8001704:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001706:	210f      	movs	r1, #15
 8001708:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800170c:	f7ff ff8e 	bl	800162c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001710:	4b05      	ldr	r3, [pc, #20]	@ (8001728 <SysTick_Config+0x40>)
 8001712:	2200      	movs	r2, #0
 8001714:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001716:	4b04      	ldr	r3, [pc, #16]	@ (8001728 <SysTick_Config+0x40>)
 8001718:	2207      	movs	r2, #7
 800171a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800171c:	2300      	movs	r3, #0
}
 800171e:	4618      	mov	r0, r3
 8001720:	3708      	adds	r7, #8
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	e000e010 	.word	0xe000e010

0800172c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001734:	6878      	ldr	r0, [r7, #4]
 8001736:	f7ff ff47 	bl	80015c8 <__NVIC_SetPriorityGrouping>
}
 800173a:	bf00      	nop
 800173c:	3708      	adds	r7, #8
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}

08001742 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001742:	b580      	push	{r7, lr}
 8001744:	b086      	sub	sp, #24
 8001746:	af00      	add	r7, sp, #0
 8001748:	4603      	mov	r3, r0
 800174a:	60b9      	str	r1, [r7, #8]
 800174c:	607a      	str	r2, [r7, #4]
 800174e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001750:	f7ff ff5e 	bl	8001610 <__NVIC_GetPriorityGrouping>
 8001754:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001756:	687a      	ldr	r2, [r7, #4]
 8001758:	68b9      	ldr	r1, [r7, #8]
 800175a:	6978      	ldr	r0, [r7, #20]
 800175c:	f7ff ff90 	bl	8001680 <NVIC_EncodePriority>
 8001760:	4602      	mov	r2, r0
 8001762:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001766:	4611      	mov	r1, r2
 8001768:	4618      	mov	r0, r3
 800176a:	f7ff ff5f 	bl	800162c <__NVIC_SetPriority>
}
 800176e:	bf00      	nop
 8001770:	3718      	adds	r7, #24
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}

08001776 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001776:	b580      	push	{r7, lr}
 8001778:	b082      	sub	sp, #8
 800177a:	af00      	add	r7, sp, #0
 800177c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f7ff ffb2 	bl	80016e8 <SysTick_Config>
 8001784:	4603      	mov	r3, r0
}
 8001786:	4618      	mov	r0, r3
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
	...

08001790 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001790:	b480      	push	{r7}
 8001792:	b087      	sub	sp, #28
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800179a:	2300      	movs	r3, #0
 800179c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800179e:	e15a      	b.n	8001a56 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	2101      	movs	r1, #1
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	fa01 f303 	lsl.w	r3, r1, r3
 80017ac:	4013      	ands	r3, r2
 80017ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	f000 814c 	beq.w	8001a50 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f003 0303 	and.w	r3, r3, #3
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d005      	beq.n	80017d0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	d130      	bne.n	8001832 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	005b      	lsls	r3, r3, #1
 80017da:	2203      	movs	r2, #3
 80017dc:	fa02 f303 	lsl.w	r3, r2, r3
 80017e0:	43db      	mvns	r3, r3
 80017e2:	693a      	ldr	r2, [r7, #16]
 80017e4:	4013      	ands	r3, r2
 80017e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	68da      	ldr	r2, [r3, #12]
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	005b      	lsls	r3, r3, #1
 80017f0:	fa02 f303 	lsl.w	r3, r2, r3
 80017f4:	693a      	ldr	r2, [r7, #16]
 80017f6:	4313      	orrs	r3, r2
 80017f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	693a      	ldr	r2, [r7, #16]
 80017fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001806:	2201      	movs	r2, #1
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	fa02 f303 	lsl.w	r3, r2, r3
 800180e:	43db      	mvns	r3, r3
 8001810:	693a      	ldr	r2, [r7, #16]
 8001812:	4013      	ands	r3, r2
 8001814:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	091b      	lsrs	r3, r3, #4
 800181c:	f003 0201 	and.w	r2, r3, #1
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	fa02 f303 	lsl.w	r3, r2, r3
 8001826:	693a      	ldr	r2, [r7, #16]
 8001828:	4313      	orrs	r3, r2
 800182a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	693a      	ldr	r2, [r7, #16]
 8001830:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f003 0303 	and.w	r3, r3, #3
 800183a:	2b03      	cmp	r3, #3
 800183c:	d017      	beq.n	800186e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	68db      	ldr	r3, [r3, #12]
 8001842:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	2203      	movs	r2, #3
 800184a:	fa02 f303 	lsl.w	r3, r2, r3
 800184e:	43db      	mvns	r3, r3
 8001850:	693a      	ldr	r2, [r7, #16]
 8001852:	4013      	ands	r3, r2
 8001854:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	689a      	ldr	r2, [r3, #8]
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	005b      	lsls	r3, r3, #1
 800185e:	fa02 f303 	lsl.w	r3, r2, r3
 8001862:	693a      	ldr	r2, [r7, #16]
 8001864:	4313      	orrs	r3, r2
 8001866:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	693a      	ldr	r2, [r7, #16]
 800186c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	f003 0303 	and.w	r3, r3, #3
 8001876:	2b02      	cmp	r3, #2
 8001878:	d123      	bne.n	80018c2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	08da      	lsrs	r2, r3, #3
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	3208      	adds	r2, #8
 8001882:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001886:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	f003 0307 	and.w	r3, r3, #7
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	220f      	movs	r2, #15
 8001892:	fa02 f303 	lsl.w	r3, r2, r3
 8001896:	43db      	mvns	r3, r3
 8001898:	693a      	ldr	r2, [r7, #16]
 800189a:	4013      	ands	r3, r2
 800189c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	691a      	ldr	r2, [r3, #16]
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	f003 0307 	and.w	r3, r3, #7
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	fa02 f303 	lsl.w	r3, r2, r3
 80018ae:	693a      	ldr	r2, [r7, #16]
 80018b0:	4313      	orrs	r3, r2
 80018b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	08da      	lsrs	r2, r3, #3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	3208      	adds	r2, #8
 80018bc:	6939      	ldr	r1, [r7, #16]
 80018be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	005b      	lsls	r3, r3, #1
 80018cc:	2203      	movs	r2, #3
 80018ce:	fa02 f303 	lsl.w	r3, r2, r3
 80018d2:	43db      	mvns	r3, r3
 80018d4:	693a      	ldr	r2, [r7, #16]
 80018d6:	4013      	ands	r3, r2
 80018d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f003 0203 	and.w	r2, r3, #3
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	005b      	lsls	r3, r3, #1
 80018e6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ea:	693a      	ldr	r2, [r7, #16]
 80018ec:	4313      	orrs	r3, r2
 80018ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	693a      	ldr	r2, [r7, #16]
 80018f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	f000 80a6 	beq.w	8001a50 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001904:	4b5b      	ldr	r3, [pc, #364]	@ (8001a74 <HAL_GPIO_Init+0x2e4>)
 8001906:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001908:	4a5a      	ldr	r2, [pc, #360]	@ (8001a74 <HAL_GPIO_Init+0x2e4>)
 800190a:	f043 0301 	orr.w	r3, r3, #1
 800190e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001910:	4b58      	ldr	r3, [pc, #352]	@ (8001a74 <HAL_GPIO_Init+0x2e4>)
 8001912:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001914:	f003 0301 	and.w	r3, r3, #1
 8001918:	60bb      	str	r3, [r7, #8]
 800191a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800191c:	4a56      	ldr	r2, [pc, #344]	@ (8001a78 <HAL_GPIO_Init+0x2e8>)
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	089b      	lsrs	r3, r3, #2
 8001922:	3302      	adds	r3, #2
 8001924:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001928:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	f003 0303 	and.w	r3, r3, #3
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	220f      	movs	r2, #15
 8001934:	fa02 f303 	lsl.w	r3, r2, r3
 8001938:	43db      	mvns	r3, r3
 800193a:	693a      	ldr	r2, [r7, #16]
 800193c:	4013      	ands	r3, r2
 800193e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001946:	d01f      	beq.n	8001988 <HAL_GPIO_Init+0x1f8>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	4a4c      	ldr	r2, [pc, #304]	@ (8001a7c <HAL_GPIO_Init+0x2ec>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d019      	beq.n	8001984 <HAL_GPIO_Init+0x1f4>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	4a4b      	ldr	r2, [pc, #300]	@ (8001a80 <HAL_GPIO_Init+0x2f0>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d013      	beq.n	8001980 <HAL_GPIO_Init+0x1f0>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	4a4a      	ldr	r2, [pc, #296]	@ (8001a84 <HAL_GPIO_Init+0x2f4>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d00d      	beq.n	800197c <HAL_GPIO_Init+0x1ec>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	4a49      	ldr	r2, [pc, #292]	@ (8001a88 <HAL_GPIO_Init+0x2f8>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d007      	beq.n	8001978 <HAL_GPIO_Init+0x1e8>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	4a48      	ldr	r2, [pc, #288]	@ (8001a8c <HAL_GPIO_Init+0x2fc>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d101      	bne.n	8001974 <HAL_GPIO_Init+0x1e4>
 8001970:	2305      	movs	r3, #5
 8001972:	e00a      	b.n	800198a <HAL_GPIO_Init+0x1fa>
 8001974:	2306      	movs	r3, #6
 8001976:	e008      	b.n	800198a <HAL_GPIO_Init+0x1fa>
 8001978:	2304      	movs	r3, #4
 800197a:	e006      	b.n	800198a <HAL_GPIO_Init+0x1fa>
 800197c:	2303      	movs	r3, #3
 800197e:	e004      	b.n	800198a <HAL_GPIO_Init+0x1fa>
 8001980:	2302      	movs	r3, #2
 8001982:	e002      	b.n	800198a <HAL_GPIO_Init+0x1fa>
 8001984:	2301      	movs	r3, #1
 8001986:	e000      	b.n	800198a <HAL_GPIO_Init+0x1fa>
 8001988:	2300      	movs	r3, #0
 800198a:	697a      	ldr	r2, [r7, #20]
 800198c:	f002 0203 	and.w	r2, r2, #3
 8001990:	0092      	lsls	r2, r2, #2
 8001992:	4093      	lsls	r3, r2
 8001994:	693a      	ldr	r2, [r7, #16]
 8001996:	4313      	orrs	r3, r2
 8001998:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800199a:	4937      	ldr	r1, [pc, #220]	@ (8001a78 <HAL_GPIO_Init+0x2e8>)
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	089b      	lsrs	r3, r3, #2
 80019a0:	3302      	adds	r3, #2
 80019a2:	693a      	ldr	r2, [r7, #16]
 80019a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80019a8:	4b39      	ldr	r3, [pc, #228]	@ (8001a90 <HAL_GPIO_Init+0x300>)
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	43db      	mvns	r3, r3
 80019b2:	693a      	ldr	r2, [r7, #16]
 80019b4:	4013      	ands	r3, r2
 80019b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d003      	beq.n	80019cc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80019c4:	693a      	ldr	r2, [r7, #16]
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80019cc:	4a30      	ldr	r2, [pc, #192]	@ (8001a90 <HAL_GPIO_Init+0x300>)
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80019d2:	4b2f      	ldr	r3, [pc, #188]	@ (8001a90 <HAL_GPIO_Init+0x300>)
 80019d4:	68db      	ldr	r3, [r3, #12]
 80019d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	43db      	mvns	r3, r3
 80019dc:	693a      	ldr	r2, [r7, #16]
 80019de:	4013      	ands	r3, r2
 80019e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d003      	beq.n	80019f6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80019ee:	693a      	ldr	r2, [r7, #16]
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	4313      	orrs	r3, r2
 80019f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80019f6:	4a26      	ldr	r2, [pc, #152]	@ (8001a90 <HAL_GPIO_Init+0x300>)
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80019fc:	4b24      	ldr	r3, [pc, #144]	@ (8001a90 <HAL_GPIO_Init+0x300>)
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	43db      	mvns	r3, r3
 8001a06:	693a      	ldr	r2, [r7, #16]
 8001a08:	4013      	ands	r3, r2
 8001a0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d003      	beq.n	8001a20 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001a18:	693a      	ldr	r2, [r7, #16]
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a20:	4a1b      	ldr	r2, [pc, #108]	@ (8001a90 <HAL_GPIO_Init+0x300>)
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001a26:	4b1a      	ldr	r3, [pc, #104]	@ (8001a90 <HAL_GPIO_Init+0x300>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	43db      	mvns	r3, r3
 8001a30:	693a      	ldr	r2, [r7, #16]
 8001a32:	4013      	ands	r3, r2
 8001a34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d003      	beq.n	8001a4a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001a42:	693a      	ldr	r2, [r7, #16]
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	4313      	orrs	r3, r2
 8001a48:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a4a:	4a11      	ldr	r2, [pc, #68]	@ (8001a90 <HAL_GPIO_Init+0x300>)
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	3301      	adds	r3, #1
 8001a54:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	fa22 f303 	lsr.w	r3, r2, r3
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	f47f ae9d 	bne.w	80017a0 <HAL_GPIO_Init+0x10>
  }
}
 8001a66:	bf00      	nop
 8001a68:	bf00      	nop
 8001a6a:	371c      	adds	r7, #28
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr
 8001a74:	40021000 	.word	0x40021000
 8001a78:	40010000 	.word	0x40010000
 8001a7c:	48000400 	.word	0x48000400
 8001a80:	48000800 	.word	0x48000800
 8001a84:	48000c00 	.word	0x48000c00
 8001a88:	48001000 	.word	0x48001000
 8001a8c:	48001400 	.word	0x48001400
 8001a90:	40010400 	.word	0x40010400

08001a94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	807b      	strh	r3, [r7, #2]
 8001aa0:	4613      	mov	r3, r2
 8001aa2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001aa4:	787b      	ldrb	r3, [r7, #1]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d003      	beq.n	8001ab2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001aaa:	887a      	ldrh	r2, [r7, #2]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ab0:	e002      	b.n	8001ab8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ab2:	887a      	ldrh	r2, [r7, #2]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001ab8:	bf00      	nop
 8001aba:	370c      	adds	r7, #12
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr

08001ac4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	4603      	mov	r3, r0
 8001acc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001ace:	4b08      	ldr	r3, [pc, #32]	@ (8001af0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ad0:	695a      	ldr	r2, [r3, #20]
 8001ad2:	88fb      	ldrh	r3, [r7, #6]
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d006      	beq.n	8001ae8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001ada:	4a05      	ldr	r2, [pc, #20]	@ (8001af0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001adc:	88fb      	ldrh	r3, [r7, #6]
 8001ade:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ae0:	88fb      	ldrh	r3, [r7, #6]
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f000 f806 	bl	8001af4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001ae8:	bf00      	nop
 8001aea:	3708      	adds	r7, #8
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	40010400 	.word	0x40010400

08001af4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	4603      	mov	r3, r0
 8001afc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001afe:	bf00      	nop
 8001b00:	370c      	adds	r7, #12
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr
	...

08001b0c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001b10:	4b05      	ldr	r3, [pc, #20]	@ (8001b28 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	4a04      	ldr	r2, [pc, #16]	@ (8001b28 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001b16:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b1a:	6093      	str	r3, [r2, #8]
}
 8001b1c:	bf00      	nop
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	40007000 	.word	0x40007000

08001b2c <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b08b      	sub	sp, #44	@ 0x2c
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	60f8      	str	r0, [r7, #12]
 8001b34:	60b9      	str	r1, [r7, #8]
 8001b36:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	fa93 f3a3 	rbit	r3, r3
 8001b46:	613b      	str	r3, [r7, #16]
  return result;
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001b4c:	69bb      	ldr	r3, [r7, #24]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d101      	bne.n	8001b56 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8001b52:	2320      	movs	r3, #32
 8001b54:	e003      	b.n	8001b5e <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8001b56:	69bb      	ldr	r3, [r7, #24]
 8001b58:	fab3 f383 	clz	r3, r3
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	005b      	lsls	r3, r3, #1
 8001b60:	2103      	movs	r1, #3
 8001b62:	fa01 f303 	lsl.w	r3, r1, r3
 8001b66:	43db      	mvns	r3, r3
 8001b68:	401a      	ands	r2, r3
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b6e:	6a3b      	ldr	r3, [r7, #32]
 8001b70:	fa93 f3a3 	rbit	r3, r3
 8001b74:	61fb      	str	r3, [r7, #28]
  return result;
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8001b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d101      	bne.n	8001b84 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8001b80:	2320      	movs	r3, #32
 8001b82:	e003      	b.n	8001b8c <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8001b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b86:	fab3 f383 	clz	r3, r3
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	005b      	lsls	r3, r3, #1
 8001b8e:	6879      	ldr	r1, [r7, #4]
 8001b90:	fa01 f303 	lsl.w	r3, r1, r3
 8001b94:	431a      	orrs	r2, r3
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	601a      	str	r2, [r3, #0]
}
 8001b9a:	bf00      	nop
 8001b9c:	372c      	adds	r7, #44	@ 0x2c
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr

08001ba6 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8001ba6:	b480      	push	{r7}
 8001ba8:	b085      	sub	sp, #20
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	60f8      	str	r0, [r7, #12]
 8001bae:	60b9      	str	r1, [r7, #8]
 8001bb0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	685a      	ldr	r2, [r3, #4]
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	43db      	mvns	r3, r3
 8001bba:	401a      	ands	r2, r3
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	6879      	ldr	r1, [r7, #4]
 8001bc0:	fb01 f303 	mul.w	r3, r1, r3
 8001bc4:	431a      	orrs	r2, r3
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	605a      	str	r2, [r3, #4]
}
 8001bca:	bf00      	nop
 8001bcc:	3714      	adds	r7, #20
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr

08001bd6 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8001bd6:	b480      	push	{r7}
 8001bd8:	b08b      	sub	sp, #44	@ 0x2c
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	60f8      	str	r0, [r7, #12]
 8001bde:	60b9      	str	r1, [r7, #8]
 8001be0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	689a      	ldr	r2, [r3, #8]
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	fa93 f3a3 	rbit	r3, r3
 8001bf0:	613b      	str	r3, [r7, #16]
  return result;
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001bf6:	69bb      	ldr	r3, [r7, #24]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d101      	bne.n	8001c00 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8001bfc:	2320      	movs	r3, #32
 8001bfe:	e003      	b.n	8001c08 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8001c00:	69bb      	ldr	r3, [r7, #24]
 8001c02:	fab3 f383 	clz	r3, r3
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	005b      	lsls	r3, r3, #1
 8001c0a:	2103      	movs	r1, #3
 8001c0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c10:	43db      	mvns	r3, r3
 8001c12:	401a      	ands	r2, r3
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c18:	6a3b      	ldr	r3, [r7, #32]
 8001c1a:	fa93 f3a3 	rbit	r3, r3
 8001c1e:	61fb      	str	r3, [r7, #28]
  return result;
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8001c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d101      	bne.n	8001c2e <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8001c2a:	2320      	movs	r3, #32
 8001c2c:	e003      	b.n	8001c36 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8001c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c30:	fab3 f383 	clz	r3, r3
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	005b      	lsls	r3, r3, #1
 8001c38:	6879      	ldr	r1, [r7, #4]
 8001c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c3e:	431a      	orrs	r2, r3
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8001c44:	bf00      	nop
 8001c46:	372c      	adds	r7, #44	@ 0x2c
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr

08001c50 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b08b      	sub	sp, #44	@ 0x2c
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	60f8      	str	r0, [r7, #12]
 8001c58:	60b9      	str	r1, [r7, #8]
 8001c5a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	68da      	ldr	r2, [r3, #12]
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	fa93 f3a3 	rbit	r3, r3
 8001c6a:	613b      	str	r3, [r7, #16]
  return result;
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001c70:	69bb      	ldr	r3, [r7, #24]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d101      	bne.n	8001c7a <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8001c76:	2320      	movs	r3, #32
 8001c78:	e003      	b.n	8001c82 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8001c7a:	69bb      	ldr	r3, [r7, #24]
 8001c7c:	fab3 f383 	clz	r3, r3
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	005b      	lsls	r3, r3, #1
 8001c84:	2103      	movs	r1, #3
 8001c86:	fa01 f303 	lsl.w	r3, r1, r3
 8001c8a:	43db      	mvns	r3, r3
 8001c8c:	401a      	ands	r2, r3
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c92:	6a3b      	ldr	r3, [r7, #32]
 8001c94:	fa93 f3a3 	rbit	r3, r3
 8001c98:	61fb      	str	r3, [r7, #28]
  return result;
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8001c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d101      	bne.n	8001ca8 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8001ca4:	2320      	movs	r3, #32
 8001ca6:	e003      	b.n	8001cb0 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8001ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001caa:	fab3 f383 	clz	r3, r3
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	005b      	lsls	r3, r3, #1
 8001cb2:	6879      	ldr	r1, [r7, #4]
 8001cb4:	fa01 f303 	lsl.w	r3, r1, r3
 8001cb8:	431a      	orrs	r2, r3
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	60da      	str	r2, [r3, #12]
}
 8001cbe:	bf00      	nop
 8001cc0:	372c      	adds	r7, #44	@ 0x2c
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr

08001cca <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8001cca:	b480      	push	{r7}
 8001ccc:	b08b      	sub	sp, #44	@ 0x2c
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	60f8      	str	r0, [r7, #12]
 8001cd2:	60b9      	str	r1, [r7, #8]
 8001cd4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	6a1a      	ldr	r2, [r3, #32]
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	fa93 f3a3 	rbit	r3, r3
 8001ce4:	613b      	str	r3, [r7, #16]
  return result;
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d101      	bne.n	8001cf4 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8001cf0:	2320      	movs	r3, #32
 8001cf2:	e003      	b.n	8001cfc <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8001cf4:	69bb      	ldr	r3, [r7, #24]
 8001cf6:	fab3 f383 	clz	r3, r3
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	210f      	movs	r1, #15
 8001d00:	fa01 f303 	lsl.w	r3, r1, r3
 8001d04:	43db      	mvns	r3, r3
 8001d06:	401a      	ands	r2, r3
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d0c:	6a3b      	ldr	r3, [r7, #32]
 8001d0e:	fa93 f3a3 	rbit	r3, r3
 8001d12:	61fb      	str	r3, [r7, #28]
  return result;
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8001d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d101      	bne.n	8001d22 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8001d1e:	2320      	movs	r3, #32
 8001d20:	e003      	b.n	8001d2a <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8001d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d24:	fab3 f383 	clz	r3, r3
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	6879      	ldr	r1, [r7, #4]
 8001d2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d32:	431a      	orrs	r2, r3
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8001d38:	bf00      	nop
 8001d3a:	372c      	adds	r7, #44	@ 0x2c
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b08b      	sub	sp, #44	@ 0x2c
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	60f8      	str	r0, [r7, #12]
 8001d4c:	60b9      	str	r1, [r7, #8]
 8001d4e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	0a1b      	lsrs	r3, r3, #8
 8001d58:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	fa93 f3a3 	rbit	r3, r3
 8001d60:	613b      	str	r3, [r7, #16]
  return result;
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001d66:	69bb      	ldr	r3, [r7, #24]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d101      	bne.n	8001d70 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8001d6c:	2320      	movs	r3, #32
 8001d6e:	e003      	b.n	8001d78 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8001d70:	69bb      	ldr	r3, [r7, #24]
 8001d72:	fab3 f383 	clz	r3, r3
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	210f      	movs	r1, #15
 8001d7c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d80:	43db      	mvns	r3, r3
 8001d82:	401a      	ands	r2, r3
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	0a1b      	lsrs	r3, r3, #8
 8001d88:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d8a:	6a3b      	ldr	r3, [r7, #32]
 8001d8c:	fa93 f3a3 	rbit	r3, r3
 8001d90:	61fb      	str	r3, [r7, #28]
  return result;
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8001d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d101      	bne.n	8001da0 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8001d9c:	2320      	movs	r3, #32
 8001d9e:	e003      	b.n	8001da8 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8001da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001da2:	fab3 f383 	clz	r3, r3
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	6879      	ldr	r1, [r7, #4]
 8001dac:	fa01 f303 	lsl.w	r3, r1, r3
 8001db0:	431a      	orrs	r2, r3
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	625a      	str	r2, [r3, #36]	@ 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8001db6:	bf00      	nop
 8001db8:	372c      	adds	r7, #44	@ 0x2c
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr

08001dc2 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001dc2:	b580      	push	{r7, lr}
 8001dc4:	b088      	sub	sp, #32
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	6078      	str	r0, [r7, #4]
 8001dca:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	fa93 f3a3 	rbit	r3, r3
 8001dd8:	60fb      	str	r3, [r7, #12]
  return result;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d101      	bne.n	8001de8 <LL_GPIO_Init+0x26>
    return 32U;
 8001de4:	2320      	movs	r3, #32
 8001de6:	e003      	b.n	8001df0 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	fab3 f383 	clz	r3, r3
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001df2:	e048      	b.n	8001e86 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	2101      	movs	r1, #1
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	fa01 f303 	lsl.w	r3, r1, r3
 8001e00:	4013      	ands	r3, r2
 8001e02:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8001e04:	69bb      	ldr	r3, [r7, #24]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d03a      	beq.n	8001e80 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d003      	beq.n	8001e1a <LL_GPIO_Init+0x58>
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d10e      	bne.n	8001e38 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	461a      	mov	r2, r3
 8001e20:	69b9      	ldr	r1, [r7, #24]
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f7ff fed7 	bl	8001bd6 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	6819      	ldr	r1, [r3, #0]
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	461a      	mov	r2, r3
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f7ff feb7 	bl	8001ba6 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	691b      	ldr	r3, [r3, #16]
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	69b9      	ldr	r1, [r7, #24]
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	f7ff ff05 	bl	8001c50 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d111      	bne.n	8001e72 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8001e4e:	69bb      	ldr	r3, [r7, #24]
 8001e50:	2bff      	cmp	r3, #255	@ 0xff
 8001e52:	d807      	bhi.n	8001e64 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	695b      	ldr	r3, [r3, #20]
 8001e58:	461a      	mov	r2, r3
 8001e5a:	69b9      	ldr	r1, [r7, #24]
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	f7ff ff34 	bl	8001cca <LL_GPIO_SetAFPin_0_7>
 8001e62:	e006      	b.n	8001e72 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	695b      	ldr	r3, [r3, #20]
 8001e68:	461a      	mov	r2, r3
 8001e6a:	69b9      	ldr	r1, [r7, #24]
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	f7ff ff69 	bl	8001d44 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	461a      	mov	r2, r3
 8001e78:	69b9      	ldr	r1, [r7, #24]
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f7ff fe56 	bl	8001b2c <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	3301      	adds	r3, #1
 8001e84:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	fa22 f303 	lsr.w	r3, r2, r3
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d1af      	bne.n	8001df4 <LL_GPIO_Init+0x32>
  }
  return (SUCCESS);
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3720      	adds	r7, #32
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}

08001e9e <LL_LPUART_IsEnabled>:
{
 8001e9e:	b480      	push	{r7}
 8001ea0:	b083      	sub	sp, #12
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 0301 	and.w	r3, r3, #1
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d101      	bne.n	8001eb6 <LL_LPUART_IsEnabled+0x18>
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e000      	b.n	8001eb8 <LL_LPUART_IsEnabled+0x1a>
 8001eb6:	2300      	movs	r3, #0
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	370c      	adds	r7, #12
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr

08001ec4 <LL_LPUART_SetPrescaler>:
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPUARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ed2:	f023 030f 	bic.w	r3, r3, #15
 8001ed6:	683a      	ldr	r2, [r7, #0]
 8001ed8:	b292      	uxth	r2, r2
 8001eda:	431a      	orrs	r2, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8001ee0:	bf00      	nop
 8001ee2:	370c      	adds	r7, #12
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr

08001eec <LL_LPUART_SetStopBitsLength>:
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPUARTx->CR2, USART_CR2_STOP, StopBits);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	431a      	orrs	r2, r3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	605a      	str	r2, [r3, #4]
}
 8001f06:	bf00      	nop
 8001f08:	370c      	adds	r7, #12
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr

08001f12 <LL_LPUART_SetHWFlowCtrl>:
{
 8001f12:	b480      	push	{r7}
 8001f14:	b083      	sub	sp, #12
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
 8001f1a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPUARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	431a      	orrs	r2, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	609a      	str	r2, [r3, #8]
}
 8001f2c:	bf00      	nop
 8001f2e:	370c      	adds	r7, #12
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr

08001f38 <LL_LPUART_SetBaudRate>:
{
 8001f38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f3c:	b088      	sub	sp, #32
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	61f8      	str	r0, [r7, #28]
 8001f42:	61b9      	str	r1, [r7, #24]
 8001f44:	617a      	str	r2, [r7, #20]
 8001f46:	613b      	str	r3, [r7, #16]
  if (BaudRate != 0U)
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d039      	beq.n	8001fc2 <LL_LPUART_SetBaudRate+0x8a>
    LPUARTx->BRR = __LL_LPUART_DIV(PeriphClk, PrescalerValue, BaudRate);
 8001f4e:	69bb      	ldr	r3, [r7, #24]
 8001f50:	2200      	movs	r2, #0
 8001f52:	60bb      	str	r3, [r7, #8]
 8001f54:	60fa      	str	r2, [r7, #12]
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	b29b      	uxth	r3, r3
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	4b1b      	ldr	r3, [pc, #108]	@ (8001fcc <LL_LPUART_SetBaudRate+0x94>)
 8001f5e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001f62:	b29b      	uxth	r3, r3
 8001f64:	2200      	movs	r2, #0
 8001f66:	603b      	str	r3, [r7, #0]
 8001f68:	607a      	str	r2, [r7, #4]
 8001f6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001f6e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001f72:	f7fe f951 	bl	8000218 <__aeabi_uldivmod>
 8001f76:	4602      	mov	r2, r0
 8001f78:	460b      	mov	r3, r1
 8001f7a:	4610      	mov	r0, r2
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	f04f 0200 	mov.w	r2, #0
 8001f82:	f04f 0300 	mov.w	r3, #0
 8001f86:	020b      	lsls	r3, r1, #8
 8001f88:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8001f8c:	0202      	lsls	r2, r0, #8
 8001f8e:	6939      	ldr	r1, [r7, #16]
 8001f90:	0849      	lsrs	r1, r1, #1
 8001f92:	2000      	movs	r0, #0
 8001f94:	460c      	mov	r4, r1
 8001f96:	4605      	mov	r5, r0
 8001f98:	eb12 0804 	adds.w	r8, r2, r4
 8001f9c:	eb43 0905 	adc.w	r9, r3, r5
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	469a      	mov	sl, r3
 8001fa6:	4693      	mov	fp, r2
 8001fa8:	4652      	mov	r2, sl
 8001faa:	465b      	mov	r3, fp
 8001fac:	4640      	mov	r0, r8
 8001fae:	4649      	mov	r1, r9
 8001fb0:	f7fe f932 	bl	8000218 <__aeabi_uldivmod>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	460b      	mov	r3, r1
 8001fb8:	4613      	mov	r3, r2
 8001fba:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	60da      	str	r2, [r3, #12]
}
 8001fc2:	bf00      	nop
 8001fc4:	3720      	adds	r7, #32
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001fcc:	080078c0 	.word	0x080078c0

08001fd0 <LL_LPUART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: LPUART registers are initialized according to LPUART_InitStruct content
  *          - ERROR: Problem occurred during LPUART Registers initialization
  */
ErrorStatus LL_LPUART_Init(USART_TypeDef *LPUARTx, const LL_LPUART_InitTypeDef *LPUART_InitStruct)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_LPUART_DIRECTION(LPUART_InitStruct->TransferDirection));
  assert_param(IS_LL_LPUART_HWCONTROL(LPUART_InitStruct->HardwareFlowControl));

  /* LPUART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers. Otherwise (LPUART not in Disabled state) => return ERROR */
  if (LL_LPUART_IsEnabled(LPUARTx) == 0U)
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f7ff ff5d 	bl	8001e9e <LL_LPUART_IsEnabled>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d136      	bne.n	8002058 <LL_LPUART_Init+0x88>
     * Configure LPUARTx CR1 (LPUART Word Length, Parity and Transfer Direction bits) with parameters:
     * - DataWidth:          USART_CR1_M bits according to LPUART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to LPUART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to LPUART_InitStruct->TransferDirection value
     */
    MODIFY_REG(LPUARTx->CR1,
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	4b1d      	ldr	r3, [pc, #116]	@ (8002064 <LL_LPUART_Init+0x94>)
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	683a      	ldr	r2, [r7, #0]
 8001ff4:	6891      	ldr	r1, [r2, #8]
 8001ff6:	683a      	ldr	r2, [r7, #0]
 8001ff8:	6912      	ldr	r2, [r2, #16]
 8001ffa:	4311      	orrs	r1, r2
 8001ffc:	683a      	ldr	r2, [r7, #0]
 8001ffe:	6952      	ldr	r2, [r2, #20]
 8002000:	430a      	orrs	r2, r1
 8002002:	431a      	orrs	r2, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	601a      	str	r2, [r3, #0]

    /*---------------------------- LPUART CR2 Configuration -----------------------
     * Configure LPUARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to LPUART_InitStruct->StopBits value.
     */
    LL_LPUART_SetStopBitsLength(LPUARTx, LPUART_InitStruct->StopBits);
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	4619      	mov	r1, r3
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f7ff ff6c 	bl	8001eec <LL_LPUART_SetStopBitsLength>
    /*---------------------------- LPUART CR3 Configuration -----------------------
     * Configure LPUARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according
     *   to LPUART_InitStruct->HardwareFlowControl value.
     */
    LL_LPUART_SetHWFlowCtrl(LPUARTx, LPUART_InitStruct->HardwareFlowControl);
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	699b      	ldr	r3, [r3, #24]
 8002018:	4619      	mov	r1, r3
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f7ff ff79 	bl	8001f12 <LL_LPUART_SetHWFlowCtrl>

    /*---------------------------- LPUART BRR Configuration -----------------------
     * Retrieve Clock frequency used for LPUART Peripheral
     */
    periphclk = LL_RCC_GetLPUARTClockFreq(LL_RCC_LPUART1_CLKSOURCE);
 8002020:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8002024:	f000 f8bc 	bl	80021a0 <LL_RCC_GetLPUARTClockFreq>
 8002028:	60b8      	str	r0, [r7, #8]
    /* Configure the LPUART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d00d      	beq.n	800204c <LL_LPUART_Init+0x7c>
        && (LPUART_InitStruct->BaudRate != 0U))
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d009      	beq.n	800204c <LL_LPUART_Init+0x7c>
    {
      status = SUCCESS;
 8002038:	2300      	movs	r3, #0
 800203a:	73fb      	strb	r3, [r7, #15]
      LL_LPUART_SetBaudRate(LPUARTx,
                            periphclk,
                            LPUART_InitStruct->PrescalerValue,
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	681a      	ldr	r2, [r3, #0]
                            LPUART_InitStruct->BaudRate);
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	685b      	ldr	r3, [r3, #4]
      LL_LPUART_SetBaudRate(LPUARTx,
 8002044:	68b9      	ldr	r1, [r7, #8]
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f7ff ff76 	bl	8001f38 <LL_LPUART_SetBaudRate>

    /*---------------------------- LPUART PRESC Configuration -----------------------
     * Configure LPUARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: LPUART_PRESC_PRESCALER bits according to LPUART_InitStruct->PrescalerValue value.
     */
    LL_LPUART_SetPrescaler(LPUARTx, LPUART_InitStruct->PrescalerValue);
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4619      	mov	r1, r3
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f7ff ff36 	bl	8001ec4 <LL_LPUART_SetPrescaler>
  }

  return (status);
 8002058:	7bfb      	ldrb	r3, [r7, #15]
}
 800205a:	4618      	mov	r0, r3
 800205c:	3710      	adds	r7, #16
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	efffe9f3 	.word	0xefffe9f3

08002068 <LL_RCC_HSI_IsReady>:
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800206c:	4b07      	ldr	r3, [pc, #28]	@ (800208c <LL_RCC_HSI_IsReady+0x24>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002074:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002078:	d101      	bne.n	800207e <LL_RCC_HSI_IsReady+0x16>
 800207a:	2301      	movs	r3, #1
 800207c:	e000      	b.n	8002080 <LL_RCC_HSI_IsReady+0x18>
 800207e:	2300      	movs	r3, #0
}
 8002080:	4618      	mov	r0, r3
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	40021000 	.word	0x40021000

08002090 <LL_RCC_LSE_IsReady>:
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002094:	4b07      	ldr	r3, [pc, #28]	@ (80020b4 <LL_RCC_LSE_IsReady+0x24>)
 8002096:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800209a:	f003 0302 	and.w	r3, r3, #2
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d101      	bne.n	80020a6 <LL_RCC_LSE_IsReady+0x16>
 80020a2:	2301      	movs	r3, #1
 80020a4:	e000      	b.n	80020a8 <LL_RCC_LSE_IsReady+0x18>
 80020a6:	2300      	movs	r3, #0
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	40021000 	.word	0x40021000

080020b8 <LL_RCC_GetSysClkSource>:
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80020bc:	4b04      	ldr	r3, [pc, #16]	@ (80020d0 <LL_RCC_GetSysClkSource+0x18>)
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	f003 030c 	and.w	r3, r3, #12
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop
 80020d0:	40021000 	.word	0x40021000

080020d4 <LL_RCC_GetAHBPrescaler>:
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80020d8:	4b04      	ldr	r3, [pc, #16]	@ (80020ec <LL_RCC_GetAHBPrescaler+0x18>)
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	40021000 	.word	0x40021000

080020f0 <LL_RCC_GetAPB1Prescaler>:
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80020f4:	4b04      	ldr	r3, [pc, #16]	@ (8002108 <LL_RCC_GetAPB1Prescaler+0x18>)
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	40021000 	.word	0x40021000

0800210c <LL_RCC_GetLPUARTClockSource>:
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8002114:	4b05      	ldr	r3, [pc, #20]	@ (800212c <LL_RCC_GetLPUARTClockSource+0x20>)
 8002116:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4013      	ands	r3, r2
}
 800211e:	4618      	mov	r0, r3
 8002120:	370c      	adds	r7, #12
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	40021000 	.word	0x40021000

08002130 <LL_RCC_PLL_GetMainSource>:
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002134:	4b04      	ldr	r3, [pc, #16]	@ (8002148 <LL_RCC_PLL_GetMainSource+0x18>)
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	f003 0303 	and.w	r3, r3, #3
}
 800213c:	4618      	mov	r0, r3
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
 8002146:	bf00      	nop
 8002148:	40021000 	.word	0x40021000

0800214c <LL_RCC_PLL_GetN>:
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002150:	4b04      	ldr	r3, [pc, #16]	@ (8002164 <LL_RCC_PLL_GetN+0x18>)
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	0a1b      	lsrs	r3, r3, #8
 8002156:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 800215a:	4618      	mov	r0, r3
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr
 8002164:	40021000 	.word	0x40021000

08002168 <LL_RCC_PLL_GetR>:
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800216c:	4b04      	ldr	r3, [pc, #16]	@ (8002180 <LL_RCC_PLL_GetR+0x18>)
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
}
 8002174:	4618      	mov	r0, r3
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	40021000 	.word	0x40021000

08002184 <LL_RCC_PLL_GetDivider>:
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002188:	4b04      	ldr	r3, [pc, #16]	@ (800219c <LL_RCC_PLL_GetDivider+0x18>)
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002190:	4618      	mov	r0, r3
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	40021000 	.word	0x40021000

080021a0 <LL_RCC_GetLPUARTClockFreq>:
  *         @arg @ref LL_RCC_LPUART1_CLKSOURCE
  * @retval LPUART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetLPUARTClockFreq(uint32_t LPUARTxSource)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b084      	sub	sp, #16
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  uint32_t lpuart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80021a8:	2300      	movs	r3, #0
 80021aa:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_LPUART_CLKSOURCE(LPUARTxSource));

  /* LPUART1CLK clock frequency */
  switch (LL_RCC_GetLPUARTClockSource(LPUARTxSource))
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	f7ff ffad 	bl	800210c <LL_RCC_GetLPUARTClockSource>
 80021b2:	4603      	mov	r3, r0
 80021b4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80021b8:	d015      	beq.n	80021e6 <LL_RCC_GetLPUARTClockFreq+0x46>
 80021ba:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80021be:	d81b      	bhi.n	80021f8 <LL_RCC_GetLPUARTClockFreq+0x58>
 80021c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021c4:	d003      	beq.n	80021ce <LL_RCC_GetLPUARTClockFreq+0x2e>
 80021c6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80021ca:	d004      	beq.n	80021d6 <LL_RCC_GetLPUARTClockFreq+0x36>
 80021cc:	e014      	b.n	80021f8 <LL_RCC_GetLPUARTClockFreq+0x58>
  {
    case LL_RCC_LPUART1_CLKSOURCE_SYSCLK: /* LPUART1 Clock is System Clock */
      lpuart_frequency = RCC_GetSystemClockFreq();
 80021ce:	f000 f829 	bl	8002224 <RCC_GetSystemClockFreq>
 80021d2:	60f8      	str	r0, [r7, #12]
      break;
 80021d4:	e01f      	b.n	8002216 <LL_RCC_GetLPUARTClockFreq+0x76>

    case LL_RCC_LPUART1_CLKSOURCE_HSI:    /* LPUART1 Clock is HSI Osc. */
      if (LL_RCC_HSI_IsReady() != 0U)
 80021d6:	f7ff ff47 	bl	8002068 <LL_RCC_HSI_IsReady>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d017      	beq.n	8002210 <LL_RCC_GetLPUARTClockFreq+0x70>
      {
        lpuart_frequency = HSI_VALUE;
 80021e0:	4b0f      	ldr	r3, [pc, #60]	@ (8002220 <LL_RCC_GetLPUARTClockFreq+0x80>)
 80021e2:	60fb      	str	r3, [r7, #12]
      }
      break;
 80021e4:	e014      	b.n	8002210 <LL_RCC_GetLPUARTClockFreq+0x70>

    case LL_RCC_LPUART1_CLKSOURCE_LSE:    /* LPUART1 Clock is LSE Osc. */
      if (LL_RCC_LSE_IsReady() != 0U)
 80021e6:	f7ff ff53 	bl	8002090 <LL_RCC_LSE_IsReady>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d011      	beq.n	8002214 <LL_RCC_GetLPUARTClockFreq+0x74>
      {
        lpuart_frequency = LSE_VALUE;
 80021f0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80021f4:	60fb      	str	r3, [r7, #12]
      }
      break;
 80021f6:	e00d      	b.n	8002214 <LL_RCC_GetLPUARTClockFreq+0x74>

    case LL_RCC_LPUART1_CLKSOURCE_PCLK1:  /* LPUART1 Clock is PCLK1 */
    default:
      lpuart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80021f8:	f000 f814 	bl	8002224 <RCC_GetSystemClockFreq>
 80021fc:	4603      	mov	r3, r0
 80021fe:	4618      	mov	r0, r3
 8002200:	f000 f836 	bl	8002270 <RCC_GetHCLKClockFreq>
 8002204:	4603      	mov	r3, r0
 8002206:	4618      	mov	r0, r3
 8002208:	f000 f84a 	bl	80022a0 <RCC_GetPCLK1ClockFreq>
 800220c:	60f8      	str	r0, [r7, #12]
      break;
 800220e:	e002      	b.n	8002216 <LL_RCC_GetLPUARTClockFreq+0x76>
      break;
 8002210:	bf00      	nop
 8002212:	e000      	b.n	8002216 <LL_RCC_GetLPUARTClockFreq+0x76>
      break;
 8002214:	bf00      	nop
  }

  return lpuart_frequency;
 8002216:	68fb      	ldr	r3, [r7, #12]
}
 8002218:	4618      	mov	r0, r3
 800221a:	3710      	adds	r7, #16
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	00f42400 	.word	0x00f42400

08002224 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800222a:	f7ff ff45 	bl	80020b8 <LL_RCC_GetSysClkSource>
 800222e:	4603      	mov	r3, r0
 8002230:	2b0c      	cmp	r3, #12
 8002232:	d00c      	beq.n	800224e <RCC_GetSystemClockFreq+0x2a>
 8002234:	2b0c      	cmp	r3, #12
 8002236:	d80e      	bhi.n	8002256 <RCC_GetSystemClockFreq+0x32>
 8002238:	2b04      	cmp	r3, #4
 800223a:	d002      	beq.n	8002242 <RCC_GetSystemClockFreq+0x1e>
 800223c:	2b08      	cmp	r3, #8
 800223e:	d003      	beq.n	8002248 <RCC_GetSystemClockFreq+0x24>
 8002240:	e009      	b.n	8002256 <RCC_GetSystemClockFreq+0x32>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8002242:	4b09      	ldr	r3, [pc, #36]	@ (8002268 <RCC_GetSystemClockFreq+0x44>)
 8002244:	607b      	str	r3, [r7, #4]
      break;
 8002246:	e009      	b.n	800225c <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8002248:	4b08      	ldr	r3, [pc, #32]	@ (800226c <RCC_GetSystemClockFreq+0x48>)
 800224a:	607b      	str	r3, [r7, #4]
      break;
 800224c:	e006      	b.n	800225c <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 800224e:	f000 f83d 	bl	80022cc <RCC_PLL_GetFreqDomain_SYS>
 8002252:	6078      	str	r0, [r7, #4]
      break;
 8002254:	e002      	b.n	800225c <RCC_GetSystemClockFreq+0x38>

    default:
      frequency = HSI_VALUE;
 8002256:	4b04      	ldr	r3, [pc, #16]	@ (8002268 <RCC_GetSystemClockFreq+0x44>)
 8002258:	607b      	str	r3, [r7, #4]
      break;
 800225a:	bf00      	nop
  }

  return frequency;
 800225c:	687b      	ldr	r3, [r7, #4]
}
 800225e:	4618      	mov	r0, r3
 8002260:	3708      	adds	r7, #8
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	00f42400 	.word	0x00f42400
 800226c:	016e3600 	.word	0x016e3600

08002270 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8002278:	f7ff ff2c 	bl	80020d4 <LL_RCC_GetAHBPrescaler>
 800227c:	4603      	mov	r3, r0
 800227e:	091b      	lsrs	r3, r3, #4
 8002280:	f003 030f 	and.w	r3, r3, #15
 8002284:	4a05      	ldr	r2, [pc, #20]	@ (800229c <RCC_GetHCLKClockFreq+0x2c>)
 8002286:	5cd3      	ldrb	r3, [r2, r3]
 8002288:	f003 031f 	and.w	r3, r3, #31
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002292:	4618      	mov	r0, r3
 8002294:	3708      	adds	r7, #8
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	080078a8 	.word	0x080078a8

080022a0 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80022a8:	f7ff ff22 	bl	80020f0 <LL_RCC_GetAPB1Prescaler>
 80022ac:	4603      	mov	r3, r0
 80022ae:	0a1b      	lsrs	r3, r3, #8
 80022b0:	4a05      	ldr	r2, [pc, #20]	@ (80022c8 <RCC_GetPCLK1ClockFreq+0x28>)
 80022b2:	5cd3      	ldrb	r3, [r2, r3]
 80022b4:	f003 031f 	and.w	r3, r3, #31
 80022b8:	687a      	ldr	r2, [r7, #4]
 80022ba:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3708      	adds	r7, #8
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	080078b8 	.word	0x080078b8

080022cc <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 80022cc:	b590      	push	{r4, r7, lr}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 80022d2:	f7ff ff2d 	bl	8002130 <LL_RCC_PLL_GetMainSource>
 80022d6:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d003      	beq.n	80022e6 <RCC_PLL_GetFreqDomain_SYS+0x1a>
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	2b03      	cmp	r3, #3
 80022e2:	d003      	beq.n	80022ec <RCC_PLL_GetFreqDomain_SYS+0x20>
 80022e4:	e005      	b.n	80022f2 <RCC_PLL_GetFreqDomain_SYS+0x26>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 80022e6:	4b11      	ldr	r3, [pc, #68]	@ (800232c <RCC_PLL_GetFreqDomain_SYS+0x60>)
 80022e8:	607b      	str	r3, [r7, #4]
      break;
 80022ea:	e005      	b.n	80022f8 <RCC_PLL_GetFreqDomain_SYS+0x2c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80022ec:	4b10      	ldr	r3, [pc, #64]	@ (8002330 <RCC_PLL_GetFreqDomain_SYS+0x64>)
 80022ee:	607b      	str	r3, [r7, #4]
      break;
 80022f0:	e002      	b.n	80022f8 <RCC_PLL_GetFreqDomain_SYS+0x2c>

    default:
      pllinputfreq = HSI_VALUE;
 80022f2:	4b0e      	ldr	r3, [pc, #56]	@ (800232c <RCC_PLL_GetFreqDomain_SYS+0x60>)
 80022f4:	607b      	str	r3, [r7, #4]
      break;
 80022f6:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80022f8:	f7ff ff28 	bl	800214c <LL_RCC_PLL_GetN>
 80022fc:	4602      	mov	r2, r0
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	fb03 f402 	mul.w	r4, r3, r2
 8002304:	f7ff ff3e 	bl	8002184 <LL_RCC_PLL_GetDivider>
 8002308:	4603      	mov	r3, r0
 800230a:	091b      	lsrs	r3, r3, #4
 800230c:	3301      	adds	r3, #1
 800230e:	fbb4 f4f3 	udiv	r4, r4, r3
 8002312:	f7ff ff29 	bl	8002168 <LL_RCC_PLL_GetR>
 8002316:	4603      	mov	r3, r0
 8002318:	0e5b      	lsrs	r3, r3, #25
 800231a:	3301      	adds	r3, #1
 800231c:	005b      	lsls	r3, r3, #1
 800231e:	fbb4 f3f3 	udiv	r3, r4, r3
                                   LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 8002322:	4618      	mov	r0, r3
 8002324:	370c      	adds	r7, #12
 8002326:	46bd      	mov	sp, r7
 8002328:	bd90      	pop	{r4, r7, pc}
 800232a:	bf00      	nop
 800232c:	00f42400 	.word	0x00f42400
 8002330:	016e3600 	.word	0x016e3600

08002334 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 800233c:	4a04      	ldr	r2, [pc, #16]	@ (8002350 <LL_SetSystemCoreClock+0x1c>)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6013      	str	r3, [r2, #0]
}
 8002342:	bf00      	nop
 8002344:	370c      	adds	r7, #12
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr
 800234e:	bf00      	nop
 8002350:	20000000 	.word	0x20000000

08002354 <QF_int_disable_>:
// On ARMv7-M and higher, interrupts are disabled *selectively* with the
// BASEPRI register.
// Additionally, the function also asserts that the interrupts are
// NOT disabled upon the entry to the function.
__attribute__ ((naked, weak)) void QF_int_disable_(void) {
__asm volatile (
 8002354:	f3ef 8011 	mrs	r0, BASEPRI
 8002358:	213f      	movs	r1, #63	@ 0x3f
 800235a:	f381 8811 	msr	BASEPRI, r1
 800235e:	2800      	cmp	r0, #0
 8002360:	d100      	bne.n	8002364 <QF_int_disable_error>
 8002362:	4770      	bx	lr

08002364 <QF_int_disable_error>:
 8002364:	4802      	ldr	r0, [pc, #8]	@ (8002370 <QF_int_disable_error+0xc>)
 8002366:	2164      	movs	r1, #100	@ 0x64
 8002368:	4a02      	ldr	r2, [pc, #8]	@ (8002374 <QF_int_disable_error+0x10>)
 800236a:	4710      	bx	r2
    "  LDR     r0,=QF_port_module_ \n"
    "  MOVS    r1,#100          \n"
    "  LDR     r2,=Q_onError    \n"
    "  BX      r2               \n"
    );
}
 800236c:	bf00      	nop
 800236e:	0000      	.short	0x0000
 8002370:	080078d8 	.word	0x080078d8
 8002374:	08000a2d 	.word	0x08000a2d

08002378 <QF_int_enable_>:
// On ARMv6-M, interrupts are enabled with the PRIMASK register.
// On ARMv7-M and higher, interrupts are enabled with the BASEPRI register.
// Additionally, the function also asserts that the interrupts ARE
// disabled upon the entry to the function.
__attribute__ ((naked, weak)) void QF_int_enable_(void) {
__asm volatile (
 8002378:	f3ef 8011 	mrs	r0, BASEPRI
 800237c:	2800      	cmp	r0, #0
 800237e:	d003      	beq.n	8002388 <QF_int_enable_error>
 8002380:	2100      	movs	r1, #0
 8002382:	f381 8811 	msr	BASEPRI, r1
 8002386:	4770      	bx	lr

08002388 <QF_int_enable_error>:
 8002388:	4802      	ldr	r0, [pc, #8]	@ (8002394 <QF_int_enable_error+0xc>)
 800238a:	2165      	movs	r1, #101	@ 0x65
 800238c:	4a02      	ldr	r2, [pc, #8]	@ (8002398 <QF_int_enable_error+0x10>)
 800238e:	4710      	bx	r2
    "  LDR     r0,=QF_port_module_ \n"
    "  MOVS    r1,#101          \n"
    "  LDR     r2,=Q_onError    \n"
    "  BX      r2               \n"
    );
}
 8002390:	bf00      	nop
 8002392:	0000      	.short	0x0000
 8002394:	080078d8 	.word	0x080078d8
 8002398:	08000a2d 	.word	0x08000a2d

0800239c <QF_crit_entry_>:
// NOT disabled upon the entry to the function.
//
// NOTE:
// The assertion means that this critical section CANNOT nest.
__attribute__ ((naked, weak)) void QF_crit_entry_(void) {
__asm volatile (
 800239c:	f3ef 8011 	mrs	r0, BASEPRI
 80023a0:	213f      	movs	r1, #63	@ 0x3f
 80023a2:	f381 8811 	msr	BASEPRI, r1
 80023a6:	2800      	cmp	r0, #0
 80023a8:	d100      	bne.n	80023ac <QF_crit_entry_error>
 80023aa:	4770      	bx	lr

080023ac <QF_crit_entry_error>:
 80023ac:	4802      	ldr	r0, [pc, #8]	@ (80023b8 <QF_crit_entry_error+0xc>)
 80023ae:	216e      	movs	r1, #110	@ 0x6e
 80023b0:	4a02      	ldr	r2, [pc, #8]	@ (80023bc <QF_crit_entry_error+0x10>)
 80023b2:	4710      	bx	r2
    "  LDR     r0,=QF_port_module_ \n"
    "  MOVS    r1,#110          \n"
    "  LDR     r2,=Q_onError    \n"
    "  BX      r2               \n"
    );
}
 80023b4:	bf00      	nop
 80023b6:	0000      	.short	0x0000
 80023b8:	080078d8 	.word	0x080078d8
 80023bc:	08000a2d 	.word	0x08000a2d

080023c0 <QF_crit_exit_>:
// disabled upon the entry to the function.
//
// NOTE:
// The assertion means that this critical section CANNOT nest.
__attribute__ ((naked, weak)) void QF_crit_exit_(void) {
__asm volatile (
 80023c0:	f3ef 8011 	mrs	r0, BASEPRI
 80023c4:	2800      	cmp	r0, #0
 80023c6:	d003      	beq.n	80023d0 <QF_crit_exit_error>
 80023c8:	2100      	movs	r1, #0
 80023ca:	f381 8811 	msr	BASEPRI, r1
 80023ce:	4770      	bx	lr

080023d0 <QF_crit_exit_error>:
 80023d0:	4802      	ldr	r0, [pc, #8]	@ (80023dc <QF_crit_exit_error+0xc>)
 80023d2:	216f      	movs	r1, #111	@ 0x6f
 80023d4:	4a02      	ldr	r2, [pc, #8]	@ (80023e0 <QF_crit_exit_error+0x10>)
 80023d6:	4710      	bx	r2
    "  LDR     r0,=QF_port_module_ \n"
    "  MOVS    r1,#111          \n"
    "  LDR     r2,=Q_onError    \n"
    "  BX      r2               \n"
    );
}
 80023d8:	bf00      	nop
 80023da:	0000      	.short	0x0000
 80023dc:	080078d8 	.word	0x080078d8
 80023e0:	08000a2d 	.word	0x08000a2d

080023e4 <QK_init>:
// application programmer forgets to explicitly set priorities of all
// "kernel aware" interrupts.
//
// The interrupt priorities established in QK_init() can be later
// changed by the application-level code.
void QK_init(void) {
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0

#if (__ARM_ARCH != 6)   //--------- if ARMv7-M and higher...

    // SCB_SYSPRI[2]:  SysTick
    SCB_SYSPRI[2] = (SCB_SYSPRI[2] | (QF_BASEPRI << 24U));
 80023ea:	4b18      	ldr	r3, [pc, #96]	@ (800244c <QK_init+0x68>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a17      	ldr	r2, [pc, #92]	@ (800244c <QK_init+0x68>)
 80023f0:	f043 537c 	orr.w	r3, r3, #1056964608	@ 0x3f000000
 80023f4:	6013      	str	r3, [r2, #0]

    // set all 240 possible IRQ priories to QF_BASEPRI...
    for (uint_fast8_t n = 0U; n < (240U/sizeof(uint32_t)); ++n) {
 80023f6:	2300      	movs	r3, #0
 80023f8:	607b      	str	r3, [r7, #4]
 80023fa:	e00b      	b.n	8002414 <QK_init+0x30>
        NVIC_IP[n] = (QF_BASEPRI << 24U) | (QF_BASEPRI << 16U)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 8002404:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 8002408:	f04f 323f 	mov.w	r2, #1061109567	@ 0x3f3f3f3f
 800240c:	601a      	str	r2, [r3, #0]
    for (uint_fast8_t n = 0U; n < (240U/sizeof(uint32_t)); ++n) {
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	3301      	adds	r3, #1
 8002412:	607b      	str	r3, [r7, #4]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2b3b      	cmp	r3, #59	@ 0x3b
 8002418:	d9f0      	bls.n	80023fc <QK_init+0x18>
    }

#endif                  //--------- ARMv7-M or higher

    // SCB_SYSPRI[2]: PendSV set to priority 0xFF (lowest)
    SCB_SYSPRI[2] = (SCB_SYSPRI[2] | (0xFFU << 16U));
 800241a:	4b0c      	ldr	r3, [pc, #48]	@ (800244c <QK_init+0x68>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a0b      	ldr	r2, [pc, #44]	@ (800244c <QK_init+0x68>)
 8002420:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002424:	6013      	str	r3, [r2, #0]
    NVIC_EN[QK_USE_IRQ_NUM >> 5U] = (1U << (QK_USE_IRQ_NUM & 0x1FU));
#endif                  //--------- QK IRQ specified

#ifdef __ARM_FP         //--------- if VFP available...
    // make sure that the FPU is enabled by setting CP10 & CP11 Full Access
    SCB_CPACR = (SCB_CPACR | ((3UL << 20U) | (3UL << 22U)));
 8002426:	4b0a      	ldr	r3, [pc, #40]	@ (8002450 <QK_init+0x6c>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a09      	ldr	r2, [pc, #36]	@ (8002450 <QK_init+0x6c>)
 800242c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002430:	6013      	str	r3, [r2, #0]

    // FPU automatic state preservation (ASPEN) lazy stacking (LSPEN)
    FPU_FPCCR = (FPU_FPCCR | (1U << 30U) | (1U << 31U));
 8002432:	4b08      	ldr	r3, [pc, #32]	@ (8002454 <QK_init+0x70>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a07      	ldr	r2, [pc, #28]	@ (8002454 <QK_init+0x70>)
 8002438:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800243c:	6013      	str	r3, [r2, #0]
#endif                  //--------- VFP available
}
 800243e:	bf00      	nop
 8002440:	370c      	adds	r7, #12
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr
 800244a:	bf00      	nop
 800244c:	e000ed20 	.word	0xe000ed20
 8002450:	e000ed88 	.word	0xe000ed88
 8002454:	e000ef34 	.word	0xe000ef34

08002458 <PendSV_Handler>:
// The inline GNU assembler does not accept mnemonics MOVS, LSRS and ADDS,
// but for ARMv6-M the mnemonics MOV, LSR and ADD always set the condition
// flags in the PSR.
__attribute__ ((naked, optimize("-fno-stack-protector")))
void PendSV_Handler(void) {
__asm volatile (
 8002458:	b501      	push	{r0, lr}
 800245a:	480c      	ldr	r0, [pc, #48]	@ (800248c <PendSV_Handler+0x34>)
 800245c:	4780      	blx	r0
 800245e:	4a0c      	ldr	r2, [pc, #48]	@ (8002490 <PendSV_Handler+0x38>)
 8002460:	f04f 0101 	mov.w	r1, #1
 8002464:	ea4f 61c1 	mov.w	r1, r1, lsl #27
 8002468:	6011      	str	r1, [r2, #0]
 800246a:	ea4f 03d1 	mov.w	r3, r1, lsr #3
 800246e:	4a09      	ldr	r2, [pc, #36]	@ (8002494 <PendSV_Handler+0x3c>)
 8002470:	f1a2 0201 	sub.w	r2, r2, #1
 8002474:	4908      	ldr	r1, [pc, #32]	@ (8002498 <PendSV_Handler+0x40>)
 8002476:	b088      	sub	sp, #32
 8002478:	a805      	add	r0, sp, #20
 800247a:	c00e      	stmia	r0!, {r1, r2, r3}
 800247c:	f04f 0006 	mov.w	r0, #6
 8002480:	ea6f 0000 	mvn.w	r0, r0
 8002484:	f3bf 8f4f 	dsb	sy
 8002488:	4700      	bx	r0
#if (__ARM_ARCH != 6)   //--------- if ARMv7-M and higher...
    "  DSB                      \n" // ARM Erratum 838869
#endif                  //--------- ARMv7-M and higher
    "  BX      r0               \n" // exception-return to the QK activator
    );
}
 800248a:	bf00      	nop
 800248c:	08002355 	.word	0x08002355
 8002490:	e000ed04 	.word	0xe000ed04
 8002494:	08004b2d 	.word	0x08004b2d
 8002498:	0800249d 	.word	0x0800249d

0800249c <QK_thread_ret>:
//
// NOTE: QK_thread_ret does not execute in the PendSV context!
// NOTE: QK_thread_ret is entered with interrupts DISABLED.
__attribute__ ((naked, used, optimize("-fno-stack-protector")))
void QK_thread_ret(void) {
__asm volatile (
 800249c:	f3ef 8014 	mrs	r0, CONTROL
 80024a0:	f020 0004 	bic.w	r0, r0, #4
 80024a4:	f380 8814 	msr	CONTROL, r0
 80024a8:	f3bf 8f6f 	isb	sy
 80024ac:	4803      	ldr	r0, [pc, #12]	@ (80024bc <QK_thread_ret+0x20>)
 80024ae:	f04f 0101 	mov.w	r1, #1
 80024b2:	ea4f 71c1 	mov.w	r1, r1, lsl #31
 80024b6:	6001      	str	r1, [r0, #0]
 80024b8:	e7fe      	b.n	80024b8 <QK_thread_ret+0x1c>
#endif                  //--------- use IRQ

    // NOTE! interrupts are still disabled when NMI is used
    "  B       .                \n" // wait for preemption by NMI/IRQ
    );
}
 80024ba:	bf00      	nop
 80024bc:	e000ed04 	.word	0xe000ed04

080024c0 <NMI_Handler>:
__attribute__ ((naked, optimize("-fno-stack-protector")))
#ifndef QK_USE_IRQ_NUM  //--------- IRQ NOT defined, use NMI by default

// NOTE: The NMI_Handler() is entered with interrupts still DISABLED!
void NMI_Handler(void) {
__asm volatile (
 80024c0:	4802      	ldr	r0, [pc, #8]	@ (80024cc <NMI_Handler+0xc>)
 80024c2:	4780      	blx	r0
// NOTE: The IRQ Handler is entered with interrupts already ENABLED
void QK_USE_IRQ_HANDLER(void) {
#endif                  //--------- use IRQ

  // ...continue here from either NMI_Handler() or IRQ_Handler()
__asm volatile (
 80024c4:	b008      	add	sp, #32
 80024c6:	bd01      	pop	{r0, pc}
    "  ADD     sp,sp,#(8*4)     \n" // remove one 8-register exception frame
    "  POP     {r0,pc}          \n" // pop stack aligner and EXC_RETURN to pc
    );
}
 80024c8:	bf00      	nop
 80024ca:	0000      	.short	0x0000
 80024cc:	08002379 	.word	0x08002379

080024d0 <QEvt_verify_>:
}

// private:

//! @private @memberof QEvt
static inline bool QEvt_verify_(QEvt const * const me) {
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
    return (me != (QEvt const *)0)
           && ((me->evtTag_ & 0xF0U) == QEVT_MARKER);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d007      	beq.n	80024ee <QEvt_verify_+0x1e>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	78db      	ldrb	r3, [r3, #3]
 80024e2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80024e6:	2be0      	cmp	r3, #224	@ 0xe0
 80024e8:	d101      	bne.n	80024ee <QEvt_verify_+0x1e>
 80024ea:	2301      	movs	r3, #1
 80024ec:	e000      	b.n	80024f0 <QEvt_verify_+0x20>
 80024ee:	2300      	movs	r3, #0
 80024f0:	f003 0301 	and.w	r3, r3, #1
 80024f4:	b2db      	uxtb	r3, r3
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	370c      	adds	r7, #12
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
	...

08002504 <QHsm_ctor>:

//${QEP::QHsm::ctor} .........................................................
//! @protected @memberof QHsm
void QHsm_ctor(QHsm * const me,
    QStateHandler const initial)
{
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	6039      	str	r1, [r7, #0]
    #ifdef Q_SPY
        ,&QHsm_getStateHandler_
    #endif
    };
    // do not call the QAsm_ctor() here
    me->super.vptr      = &vtable;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	4a06      	ldr	r2, [pc, #24]	@ (800252c <QHsm_ctor+0x28>)
 8002512:	601a      	str	r2, [r3, #0]
    me->super.state.fun = Q_STATE_CAST(&QHsm_top);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	4a06      	ldr	r2, [pc, #24]	@ (8002530 <QHsm_ctor+0x2c>)
 8002518:	605a      	str	r2, [r3, #4]
    me->super.temp.fun  = initial;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	683a      	ldr	r2, [r7, #0]
 800251e:	609a      	str	r2, [r3, #8]
}
 8002520:	bf00      	nop
 8002522:	370c      	adds	r7, #12
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr
 800252c:	080078f8 	.word	0x080078f8
 8002530:	08003239 	.word	0x08003239

08002534 <QHsm_init_>:
//! @private @memberof QHsm
void QHsm_init_(
    QAsm * const me,
    void const * const e,
    uint_fast8_t const qsId)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b08e      	sub	sp, #56	@ 0x38
 8002538:	af00      	add	r7, sp, #0
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	60b9      	str	r1, [r7, #8]
 800253e:	607a      	str	r2, [r7, #4]
    QF_CRIT_STAT

    #ifdef Q_SPY
    QS_CRIT_ENTRY();
 8002540:	f7ff ff2c 	bl	800239c <QF_crit_entry_>
    QS_MEM_SYS();
    if ((QS_priv_.flags & 0x01U) == 0U) {
 8002544:	4bac      	ldr	r3, [pc, #688]	@ (80027f8 <QHsm_init_+0x2c4>)
 8002546:	7cdb      	ldrb	r3, [r3, #19]
 8002548:	f003 0301 	and.w	r3, r3, #1
 800254c:	2b00      	cmp	r3, #0
 800254e:	d10d      	bne.n	800256c <QHsm_init_+0x38>
        QS_priv_.flags |= 0x01U;
 8002550:	4ba9      	ldr	r3, [pc, #676]	@ (80027f8 <QHsm_init_+0x2c4>)
 8002552:	7cdb      	ldrb	r3, [r3, #19]
 8002554:	f043 0301 	orr.w	r3, r3, #1
 8002558:	b2da      	uxtb	r2, r3
 800255a:	4ba7      	ldr	r3, [pc, #668]	@ (80027f8 <QHsm_init_+0x2c4>)
 800255c:	74da      	strb	r2, [r3, #19]
        QS_MEM_APP();
        QS_CRIT_EXIT();
 800255e:	f7ff ff2f 	bl	80023c0 <QF_crit_exit_>
        QS_FUN_DICTIONARY(&QHsm_top);
 8002562:	49a6      	ldr	r1, [pc, #664]	@ (80027fc <QHsm_init_+0x2c8>)
 8002564:	48a6      	ldr	r0, [pc, #664]	@ (8002800 <QHsm_init_+0x2cc>)
 8002566:	f003 fe45 	bl	80061f4 <QS_fun_dict_pre_>
 800256a:	e001      	b.n	8002570 <QHsm_init_+0x3c>
    }
    else {
        QS_MEM_APP();
        QS_CRIT_EXIT();
 800256c:	f7ff ff28 	bl	80023c0 <QF_crit_exit_>
    }
    #else
    Q_UNUSED_PAR(qsId);
    #endif

    QStateHandler t = me->state.fun;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	637b      	str	r3, [r7, #52]	@ 0x34

    QF_CRIT_ENTRY();
 8002576:	f7ff ff11 	bl	800239c <QF_crit_entry_>
    Q_REQUIRE_INCRIT(200, (me->vptr != (struct QAsmVtable *)0)
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d007      	beq.n	8002592 <QHsm_init_+0x5e>
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d003      	beq.n	8002592 <QHsm_init_+0x5e>
 800258a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800258c:	4a9c      	ldr	r2, [pc, #624]	@ (8002800 <QHsm_init_+0x2cc>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d003      	beq.n	800259a <QHsm_init_+0x66>
 8002592:	21c8      	movs	r1, #200	@ 0xc8
 8002594:	489b      	ldr	r0, [pc, #620]	@ (8002804 <QHsm_init_+0x2d0>)
 8002596:	f7fe fa49 	bl	8000a2c <Q_onError>
                      && (me->temp.fun != Q_STATE_CAST(0))
                      && (t == Q_STATE_CAST(&QHsm_top)));
    QF_CRIT_EXIT();
 800259a:	f7ff ff11 	bl	80023c0 <QF_crit_exit_>

    // execute the top-most initial tran.
    QState r = (*me->temp.fun)(me, Q_EVT_CAST(QEvt));
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	68b9      	ldr	r1, [r7, #8]
 80025a4:	68f8      	ldr	r0, [r7, #12]
 80025a6:	4798      	blx	r3
 80025a8:	4603      	mov	r3, r0
 80025aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

    QF_CRIT_ENTRY();
 80025ae:	f7ff fef5 	bl	800239c <QF_crit_entry_>
    // the top-most initial tran. must be taken
    Q_ASSERT_INCRIT(210, r == Q_RET_TRAN);
 80025b2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80025b6:	2b08      	cmp	r3, #8
 80025b8:	d003      	beq.n	80025c2 <QHsm_init_+0x8e>
 80025ba:	21d2      	movs	r1, #210	@ 0xd2
 80025bc:	4891      	ldr	r0, [pc, #580]	@ (8002804 <QHsm_init_+0x2d0>)
 80025be:	f7fe fa35 	bl	8000a2c <Q_onError>

    QS_MEM_SYS();
    QS_BEGIN_PRE_(QS_QEP_STATE_INIT, qsId)
 80025c2:	4b91      	ldr	r3, [pc, #580]	@ (8002808 <QHsm_init_+0x2d4>)
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	f003 0308 	and.w	r3, r3, #8
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d01f      	beq.n	800260e <QHsm_init_+0xda>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	08db      	lsrs	r3, r3, #3
 80025d2:	4a8d      	ldr	r2, [pc, #564]	@ (8002808 <QHsm_init_+0x2d4>)
 80025d4:	4413      	add	r3, r2
 80025d6:	7c1b      	ldrb	r3, [r3, #16]
 80025d8:	461a      	mov	r2, r3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	f003 0307 	and.w	r3, r3, #7
 80025e0:	fa22 f303 	lsr.w	r3, r2, r3
 80025e4:	f003 0301 	and.w	r3, r3, #1
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d010      	beq.n	800260e <QHsm_init_+0xda>
 80025ec:	2003      	movs	r0, #3
 80025ee:	f003 f8eb 	bl	80057c8 <QS_beginRec_>
        QS_OBJ_PRE_(me);           // this state machine object
 80025f2:	68f8      	ldr	r0, [r7, #12]
 80025f4:	f003 fc1c 	bl	8005e30 <QS_obj_raw_>
        QS_FUN_PRE_(t);            // the source state
 80025f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025fa:	4618      	mov	r0, r3
 80025fc:	f003 fba0 	bl	8005d40 <QS_u32_raw_>
        QS_FUN_PRE_(me->temp.fun); // the target of the initial tran.
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	4618      	mov	r0, r3
 8002606:	f003 fb9b 	bl	8005d40 <QS_u32_raw_>
    QS_END_PRE_()
 800260a:	f003 f95d 	bl	80058c8 <QS_endRec_>
    QS_MEM_APP();

    QF_CRIT_EXIT();
 800260e:	f7ff fed7 	bl	80023c0 <QF_crit_exit_>

    // drill down into the state hierarchy with initial transitions...
    int_fast8_t limit = QHSM_MAX_NEST_DEPTH_; // loop hard limit
 8002612:	2306      	movs	r3, #6
 8002614:	633b      	str	r3, [r7, #48]	@ 0x30
    do {
        QStateHandler path[QHSM_MAX_NEST_DEPTH_]; // tran entry path array
        int_fast8_t ip = 0; // tran entry path index
 8002616:	2300      	movs	r3, #0
 8002618:	62fb      	str	r3, [r7, #44]	@ 0x2c

        path[0] = me->temp.fun;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	613b      	str	r3, [r7, #16]
        (void)QHSM_RESERVED_EVT_(me->temp.fun, Q_EMPTY_SIG);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	4979      	ldr	r1, [pc, #484]	@ (800280c <QHsm_init_+0x2d8>)
 8002626:	68f8      	ldr	r0, [r7, #12]
 8002628:	4798      	blx	r3
        while ((me->temp.fun != t) && (ip < (QHSM_MAX_NEST_DEPTH_ - 1))) {
 800262a:	e00f      	b.n	800264c <QHsm_init_+0x118>
            ++ip;
 800262c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800262e:	3301      	adds	r3, #1
 8002630:	62fb      	str	r3, [r7, #44]	@ 0x2c
            path[ip] = me->temp.fun;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	689a      	ldr	r2, [r3, #8]
 8002636:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	3338      	adds	r3, #56	@ 0x38
 800263c:	443b      	add	r3, r7
 800263e:	f843 2c28 	str.w	r2, [r3, #-40]
            (void)QHSM_RESERVED_EVT_(me->temp.fun, Q_EMPTY_SIG);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	4971      	ldr	r1, [pc, #452]	@ (800280c <QHsm_init_+0x2d8>)
 8002648:	68f8      	ldr	r0, [r7, #12]
 800264a:	4798      	blx	r3
        while ((me->temp.fun != t) && (ip < (QHSM_MAX_NEST_DEPTH_ - 1))) {
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002652:	429a      	cmp	r2, r3
 8002654:	d002      	beq.n	800265c <QHsm_init_+0x128>
 8002656:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002658:	2b04      	cmp	r3, #4
 800265a:	dde7      	ble.n	800262c <QHsm_init_+0xf8>
        }
        QF_CRIT_ENTRY();
 800265c:	f7ff fe9e 	bl	800239c <QF_crit_entry_>
        // The initial transition source state must be reached
        // Too many state nesting levels or "malformed" HSM.
        Q_ASSERT_INCRIT(220, me->temp.fun == t);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002666:	429a      	cmp	r2, r3
 8002668:	d003      	beq.n	8002672 <QHsm_init_+0x13e>
 800266a:	21dc      	movs	r1, #220	@ 0xdc
 800266c:	4865      	ldr	r0, [pc, #404]	@ (8002804 <QHsm_init_+0x2d0>)
 800266e:	f7fe f9dd 	bl	8000a2c <Q_onError>
        QF_CRIT_EXIT();
 8002672:	f7ff fea5 	bl	80023c0 <QF_crit_exit_>

        me->temp.fun = path[0];
 8002676:	693a      	ldr	r2, [r7, #16]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	609a      	str	r2, [r3, #8]

        // retrace the entry path in reverse (desired) order...
        do {
            // enter path[ip]
            if (QHSM_RESERVED_EVT_(path[ip], Q_ENTRY_SIG)
 800267c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	3338      	adds	r3, #56	@ 0x38
 8002682:	443b      	add	r3, r7
 8002684:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8002688:	4961      	ldr	r1, [pc, #388]	@ (8002810 <QHsm_init_+0x2dc>)
 800268a:	68f8      	ldr	r0, [r7, #12]
 800268c:	4798      	blx	r3
 800268e:	4603      	mov	r3, r0
 8002690:	2b03      	cmp	r3, #3
 8002692:	d129      	bne.n	80026e8 <QHsm_init_+0x1b4>
                == Q_RET_HANDLED)
            {
                QS_STATE_ENTRY_(path[ip], qsId);
 8002694:	f7ff fe82 	bl	800239c <QF_crit_entry_>
 8002698:	4b5b      	ldr	r3, [pc, #364]	@ (8002808 <QHsm_init_+0x2d4>)
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	f003 0302 	and.w	r3, r3, #2
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d01f      	beq.n	80026e4 <QHsm_init_+0x1b0>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	08db      	lsrs	r3, r3, #3
 80026a8:	4a57      	ldr	r2, [pc, #348]	@ (8002808 <QHsm_init_+0x2d4>)
 80026aa:	4413      	add	r3, r2
 80026ac:	7c1b      	ldrb	r3, [r3, #16]
 80026ae:	461a      	mov	r2, r3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f003 0307 	and.w	r3, r3, #7
 80026b6:	fa22 f303 	lsr.w	r3, r2, r3
 80026ba:	f003 0301 	and.w	r3, r3, #1
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d010      	beq.n	80026e4 <QHsm_init_+0x1b0>
 80026c2:	2001      	movs	r0, #1
 80026c4:	f003 f880 	bl	80057c8 <QS_beginRec_>
 80026c8:	68f8      	ldr	r0, [r7, #12]
 80026ca:	f003 fbb1 	bl	8005e30 <QS_obj_raw_>
 80026ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	3338      	adds	r3, #56	@ 0x38
 80026d4:	443b      	add	r3, r7
 80026d6:	f853 3c28 	ldr.w	r3, [r3, #-40]
 80026da:	4618      	mov	r0, r3
 80026dc:	f003 fb30 	bl	8005d40 <QS_u32_raw_>
 80026e0:	f003 f8f2 	bl	80058c8 <QS_endRec_>
 80026e4:	f7ff fe6c 	bl	80023c0 <QF_crit_exit_>
            }
            --ip;
 80026e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026ea:	3b01      	subs	r3, #1
 80026ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
        } while (ip >= 0);
 80026ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	dac3      	bge.n	800267c <QHsm_init_+0x148>

        t = path[0]; // current state becomes the new source
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	637b      	str	r3, [r7, #52]	@ 0x34

        r = QHSM_RESERVED_EVT_(t, Q_INIT_SIG); // execute initial tran.
 80026f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026fa:	4946      	ldr	r1, [pc, #280]	@ (8002814 <QHsm_init_+0x2e0>)
 80026fc:	68f8      	ldr	r0, [r7, #12]
 80026fe:	4798      	blx	r3
 8002700:	4603      	mov	r3, r0
 8002702:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

    #ifdef Q_SPY
        if (r == Q_RET_TRAN) {
 8002706:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800270a:	2b08      	cmp	r3, #8
 800270c:	d129      	bne.n	8002762 <QHsm_init_+0x22e>
            QS_CRIT_ENTRY();
 800270e:	f7ff fe45 	bl	800239c <QF_crit_entry_>
            QS_MEM_SYS();
            QS_BEGIN_PRE_(QS_QEP_STATE_INIT, qsId)
 8002712:	4b3d      	ldr	r3, [pc, #244]	@ (8002808 <QHsm_init_+0x2d4>)
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	f003 0308 	and.w	r3, r3, #8
 800271a:	2b00      	cmp	r3, #0
 800271c:	d01f      	beq.n	800275e <QHsm_init_+0x22a>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	08db      	lsrs	r3, r3, #3
 8002722:	4a39      	ldr	r2, [pc, #228]	@ (8002808 <QHsm_init_+0x2d4>)
 8002724:	4413      	add	r3, r2
 8002726:	7c1b      	ldrb	r3, [r3, #16]
 8002728:	461a      	mov	r2, r3
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	f003 0307 	and.w	r3, r3, #7
 8002730:	fa22 f303 	lsr.w	r3, r2, r3
 8002734:	f003 0301 	and.w	r3, r3, #1
 8002738:	2b00      	cmp	r3, #0
 800273a:	d010      	beq.n	800275e <QHsm_init_+0x22a>
 800273c:	2003      	movs	r0, #3
 800273e:	f003 f843 	bl	80057c8 <QS_beginRec_>
                QS_OBJ_PRE_(me);           // this state machine object
 8002742:	68f8      	ldr	r0, [r7, #12]
 8002744:	f003 fb74 	bl	8005e30 <QS_obj_raw_>
                QS_FUN_PRE_(t);            // the source state
 8002748:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800274a:	4618      	mov	r0, r3
 800274c:	f003 faf8 	bl	8005d40 <QS_u32_raw_>
                QS_FUN_PRE_(me->temp.fun); // the target of the initial tran.
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	4618      	mov	r0, r3
 8002756:	f003 faf3 	bl	8005d40 <QS_u32_raw_>
            QS_END_PRE_()
 800275a:	f003 f8b5 	bl	80058c8 <QS_endRec_>
            QS_MEM_APP();
            QS_CRIT_EXIT();
 800275e:	f7ff fe2f 	bl	80023c0 <QF_crit_exit_>
        }
    #endif // Q_SPY

        --limit;
 8002762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002764:	3b01      	subs	r3, #1
 8002766:	633b      	str	r3, [r7, #48]	@ 0x30
    } while ((r == Q_RET_TRAN) && (limit > 0));
 8002768:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800276c:	2b08      	cmp	r3, #8
 800276e:	d103      	bne.n	8002778 <QHsm_init_+0x244>
 8002770:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002772:	2b00      	cmp	r3, #0
 8002774:	f73f af4f 	bgt.w	8002616 <QHsm_init_+0xe2>

    QF_CRIT_ENTRY();
 8002778:	f7ff fe10 	bl	800239c <QF_crit_entry_>
    // Loop limit must not be reached.
    // Too many state nesting levels or likely "malformed" HSM
    Q_ENSURE_INCRIT(290, limit > 0);
 800277c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800277e:	2b00      	cmp	r3, #0
 8002780:	dc04      	bgt.n	800278c <QHsm_init_+0x258>
 8002782:	f44f 7191 	mov.w	r1, #290	@ 0x122
 8002786:	481f      	ldr	r0, [pc, #124]	@ (8002804 <QHsm_init_+0x2d0>)
 8002788:	f7fe f950 	bl	8000a2c <Q_onError>

    QS_MEM_SYS();
    QS_BEGIN_PRE_(QS_QEP_INIT_TRAN, qsId)
 800278c:	4b1e      	ldr	r3, [pc, #120]	@ (8002808 <QHsm_init_+0x2d4>)
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	f003 0310 	and.w	r3, r3, #16
 8002794:	2b00      	cmp	r3, #0
 8002796:	d020      	beq.n	80027da <QHsm_init_+0x2a6>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	08db      	lsrs	r3, r3, #3
 800279c:	4a1a      	ldr	r2, [pc, #104]	@ (8002808 <QHsm_init_+0x2d4>)
 800279e:	4413      	add	r3, r2
 80027a0:	7c1b      	ldrb	r3, [r3, #16]
 80027a2:	461a      	mov	r2, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	f003 0307 	and.w	r3, r3, #7
 80027aa:	fa22 f303 	lsr.w	r3, r2, r3
 80027ae:	f003 0301 	and.w	r3, r3, #1
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d011      	beq.n	80027da <QHsm_init_+0x2a6>
 80027b6:	2004      	movs	r0, #4
 80027b8:	f003 f806 	bl	80057c8 <QS_beginRec_>
        QS_TIME_PRE_();    // time stamp
 80027bc:	f7fd feec 	bl	8000598 <QS_onGetTime>
 80027c0:	4603      	mov	r3, r0
 80027c2:	4618      	mov	r0, r3
 80027c4:	f003 fabc 	bl	8005d40 <QS_u32_raw_>
        QS_OBJ_PRE_(me);   // this state machine object
 80027c8:	68f8      	ldr	r0, [r7, #12]
 80027ca:	f003 fb31 	bl	8005e30 <QS_obj_raw_>
        QS_FUN_PRE_(t);    // the new active state
 80027ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027d0:	4618      	mov	r0, r3
 80027d2:	f003 fab5 	bl	8005d40 <QS_u32_raw_>
    QS_END_PRE_()
 80027d6:	f003 f877 	bl	80058c8 <QS_endRec_>
    QS_MEM_APP();

    QF_CRIT_EXIT();
 80027da:	f7ff fdf1 	bl	80023c0 <QF_crit_exit_>

    me->state.fun = t;   // change the current active state
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80027e2:	605a      	str	r2, [r3, #4]
    #ifndef Q_UNSAFE
    me->temp.uint = ~me->state.uint;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	43da      	mvns	r2, r3
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	609a      	str	r2, [r3, #8]
    #endif
}
 80027ee:	bf00      	nop
 80027f0:	3738      	adds	r7, #56	@ 0x38
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	20000aa4 	.word	0x20000aa4
 80027fc:	08007868 	.word	0x08007868
 8002800:	08003239 	.word	0x08003239
 8002804:	080078e0 	.word	0x080078e0
 8002808:	20000a84 	.word	0x20000a84
 800280c:	080078e8 	.word	0x080078e8
 8002810:	080078ec 	.word	0x080078ec
 8002814:	080078f4 	.word	0x080078f4

08002818 <QHsm_dispatch_>:
//! @private @memberof QHsm
void QHsm_dispatch_(
    QAsm * const me,
    QEvt const * const e,
    uint_fast8_t const qsId)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b090      	sub	sp, #64	@ 0x40
 800281c:	af00      	add	r7, sp, #0
 800281e:	60f8      	str	r0, [r7, #12]
 8002820:	60b9      	str	r1, [r7, #8]
 8002822:	607a      	str	r2, [r7, #4]
    #ifndef Q_SPY
    Q_UNUSED_PAR(qsId);
    #endif

    QStateHandler s = me->state.fun;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	62fb      	str	r3, [r7, #44]	@ 0x2c
    QStateHandler t = s;
 800282a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800282c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    QF_CRIT_STAT

    QF_CRIT_ENTRY();
 800282e:	f7ff fdb5 	bl	800239c <QF_crit_entry_>
    Q_REQUIRE_INCRIT(300, (s != Q_STATE_CAST(0))
 8002832:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002834:	2b00      	cmp	r3, #0
 8002836:	d006      	beq.n	8002846 <QHsm_dispatch_+0x2e>
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	685a      	ldr	r2, [r3, #4]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	43db      	mvns	r3, r3
 8002842:	429a      	cmp	r2, r3
 8002844:	d004      	beq.n	8002850 <QHsm_dispatch_+0x38>
 8002846:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 800284a:	4891      	ldr	r0, [pc, #580]	@ (8002a90 <QHsm_dispatch_+0x278>)
 800284c:	f7fe f8ee 	bl	8000a2c <Q_onError>
        && (me->state.uint == (uintptr_t)(~me->temp.uint)));
    Q_REQUIRE_INCRIT(302, QEvt_verify_(e));
 8002850:	68b8      	ldr	r0, [r7, #8]
 8002852:	f7ff fe3d 	bl	80024d0 <QEvt_verify_>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d104      	bne.n	8002866 <QHsm_dispatch_+0x4e>
 800285c:	f44f 7197 	mov.w	r1, #302	@ 0x12e
 8002860:	488b      	ldr	r0, [pc, #556]	@ (8002a90 <QHsm_dispatch_+0x278>)
 8002862:	f7fe f8e3 	bl	8000a2c <Q_onError>

    QS_MEM_SYS();
    QS_BEGIN_PRE_(QS_QEP_DISPATCH, qsId)
 8002866:	4b8b      	ldr	r3, [pc, #556]	@ (8002a94 <QHsm_dispatch_+0x27c>)
 8002868:	785b      	ldrb	r3, [r3, #1]
 800286a:	f003 0301 	and.w	r3, r3, #1
 800286e:	2b00      	cmp	r3, #0
 8002870:	d025      	beq.n	80028be <QHsm_dispatch_+0xa6>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	08db      	lsrs	r3, r3, #3
 8002876:	4a87      	ldr	r2, [pc, #540]	@ (8002a94 <QHsm_dispatch_+0x27c>)
 8002878:	4413      	add	r3, r2
 800287a:	7c1b      	ldrb	r3, [r3, #16]
 800287c:	461a      	mov	r2, r3
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	f003 0307 	and.w	r3, r3, #7
 8002884:	fa22 f303 	lsr.w	r3, r2, r3
 8002888:	f003 0301 	and.w	r3, r3, #1
 800288c:	2b00      	cmp	r3, #0
 800288e:	d016      	beq.n	80028be <QHsm_dispatch_+0xa6>
 8002890:	2008      	movs	r0, #8
 8002892:	f002 ff99 	bl	80057c8 <QS_beginRec_>
        QS_TIME_PRE_();      // time stamp
 8002896:	f7fd fe7f 	bl	8000598 <QS_onGetTime>
 800289a:	4603      	mov	r3, r0
 800289c:	4618      	mov	r0, r3
 800289e:	f003 fa4f 	bl	8005d40 <QS_u32_raw_>
        QS_SIG_PRE_(e->sig); // the signal of the event
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	881b      	ldrh	r3, [r3, #0]
 80028a6:	4618      	mov	r0, r3
 80028a8:	f003 f996 	bl	8005bd8 <QS_u16_raw_>
        QS_OBJ_PRE_(me);     // this state machine object
 80028ac:	68f8      	ldr	r0, [r7, #12]
 80028ae:	f003 fabf 	bl	8005e30 <QS_obj_raw_>
        QS_FUN_PRE_(s);      // the current state
 80028b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028b4:	4618      	mov	r0, r3
 80028b6:	f003 fa43 	bl	8005d40 <QS_u32_raw_>
    QS_END_PRE_()
 80028ba:	f003 f805 	bl	80058c8 <QS_endRec_>
    QS_MEM_APP();

    QF_CRIT_EXIT();
 80028be:	f7ff fd7f 	bl	80023c0 <QF_crit_exit_>

    // process the event hierarchically...
    QState r;
    me->temp.fun = s;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80028c6:	609a      	str	r2, [r3, #8]
    int_fast8_t limit = QHSM_MAX_NEST_DEPTH_; // loop hard limit
 80028c8:	2306      	movs	r3, #6
 80028ca:	637b      	str	r3, [r7, #52]	@ 0x34
    do {
        s = me->temp.fun;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        r = (*s)(me, e); // invoke state handler s
 80028d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028d4:	68b9      	ldr	r1, [r7, #8]
 80028d6:	68f8      	ldr	r0, [r7, #12]
 80028d8:	4798      	blx	r3
 80028da:	4603      	mov	r3, r0
 80028dc:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b

        if (r == Q_RET_UNHANDLED) { // unhandled due to a guard?
 80028e0:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	d130      	bne.n	800294a <QHsm_dispatch_+0x132>

            QS_CRIT_ENTRY();
 80028e8:	f7ff fd58 	bl	800239c <QF_crit_entry_>
            QS_MEM_SYS();
            QS_BEGIN_PRE_(QS_QEP_UNHANDLED, qsId)
 80028ec:	4b69      	ldr	r3, [pc, #420]	@ (8002a94 <QHsm_dispatch_+0x27c>)
 80028ee:	785b      	ldrb	r3, [r3, #1]
 80028f0:	f003 0302 	and.w	r3, r3, #2
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d01f      	beq.n	8002938 <QHsm_dispatch_+0x120>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	08db      	lsrs	r3, r3, #3
 80028fc:	4a65      	ldr	r2, [pc, #404]	@ (8002a94 <QHsm_dispatch_+0x27c>)
 80028fe:	4413      	add	r3, r2
 8002900:	7c1b      	ldrb	r3, [r3, #16]
 8002902:	461a      	mov	r2, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	f003 0307 	and.w	r3, r3, #7
 800290a:	fa22 f303 	lsr.w	r3, r2, r3
 800290e:	f003 0301 	and.w	r3, r3, #1
 8002912:	2b00      	cmp	r3, #0
 8002914:	d010      	beq.n	8002938 <QHsm_dispatch_+0x120>
 8002916:	2009      	movs	r0, #9
 8002918:	f002 ff56 	bl	80057c8 <QS_beginRec_>
                QS_SIG_PRE_(e->sig); // the signal of the event
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	881b      	ldrh	r3, [r3, #0]
 8002920:	4618      	mov	r0, r3
 8002922:	f003 f959 	bl	8005bd8 <QS_u16_raw_>
                QS_OBJ_PRE_(me);     // this state machine object
 8002926:	68f8      	ldr	r0, [r7, #12]
 8002928:	f003 fa82 	bl	8005e30 <QS_obj_raw_>
                QS_FUN_PRE_(s);      // the current state
 800292c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800292e:	4618      	mov	r0, r3
 8002930:	f003 fa06 	bl	8005d40 <QS_u32_raw_>
            QS_END_PRE_()
 8002934:	f002 ffc8 	bl	80058c8 <QS_endRec_>
            QS_MEM_APP();
            QS_CRIT_EXIT();
 8002938:	f7ff fd42 	bl	80023c0 <QF_crit_exit_>

            r = QHSM_RESERVED_EVT_(s, Q_EMPTY_SIG); // superstate of s
 800293c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800293e:	4956      	ldr	r1, [pc, #344]	@ (8002a98 <QHsm_dispatch_+0x280>)
 8002940:	68f8      	ldr	r0, [r7, #12]
 8002942:	4798      	blx	r3
 8002944:	4603      	mov	r3, r0
 8002946:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
        }

        --limit;
 800294a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800294c:	3b01      	subs	r3, #1
 800294e:	637b      	str	r3, [r7, #52]	@ 0x34
    } while ((r == Q_RET_SUPER) && (limit > 0));
 8002950:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8002954:	2b00      	cmp	r3, #0
 8002956:	d102      	bne.n	800295e <QHsm_dispatch_+0x146>
 8002958:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800295a:	2b00      	cmp	r3, #0
 800295c:	dcb6      	bgt.n	80028cc <QHsm_dispatch_+0xb4>

    QF_CRIT_ENTRY();
 800295e:	f7ff fd1d 	bl	800239c <QF_crit_entry_>
    Q_ASSERT_INCRIT(310, limit > 0);
 8002962:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002964:	2b00      	cmp	r3, #0
 8002966:	dc04      	bgt.n	8002972 <QHsm_dispatch_+0x15a>
 8002968:	f44f 719b 	mov.w	r1, #310	@ 0x136
 800296c:	4848      	ldr	r0, [pc, #288]	@ (8002a90 <QHsm_dispatch_+0x278>)
 800296e:	f7fe f85d 	bl	8000a2c <Q_onError>
    QF_CRIT_EXIT();
 8002972:	f7ff fd25 	bl	80023c0 <QF_crit_exit_>

    if (r >= Q_RET_TRAN) { // regular tran. taken?
 8002976:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800297a:	2b07      	cmp	r3, #7
 800297c:	f240 81ab 	bls.w	8002cd6 <QHsm_dispatch_+0x4be>
        QStateHandler path[QHSM_MAX_NEST_DEPTH_];

        path[0] = me->temp.fun; // tran. target
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	617b      	str	r3, [r7, #20]
        path[1] = t; // current state
 8002986:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002988:	61bb      	str	r3, [r7, #24]
        path[2] = s; // tran. source
 800298a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800298c:	61fb      	str	r3, [r7, #28]

        // exit current state to tran. source s...
        limit = QHSM_MAX_NEST_DEPTH_; // loop hard limit
 800298e:	2306      	movs	r3, #6
 8002990:	637b      	str	r3, [r7, #52]	@ 0x34
        for (; (t != s) && (limit > 0); t = me->temp.fun) {
 8002992:	e035      	b.n	8002a00 <QHsm_dispatch_+0x1e8>
            // exit from t
            if (QHSM_RESERVED_EVT_(t, Q_EXIT_SIG) == Q_RET_HANDLED) {
 8002994:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002996:	4941      	ldr	r1, [pc, #260]	@ (8002a9c <QHsm_dispatch_+0x284>)
 8002998:	68f8      	ldr	r0, [r7, #12]
 800299a:	4798      	blx	r3
 800299c:	4603      	mov	r3, r0
 800299e:	2b03      	cmp	r3, #3
 80029a0:	d128      	bne.n	80029f4 <QHsm_dispatch_+0x1dc>
                QS_STATE_EXIT_(t, qsId);
 80029a2:	f7ff fcfb 	bl	800239c <QF_crit_entry_>
 80029a6:	4b3b      	ldr	r3, [pc, #236]	@ (8002a94 <QHsm_dispatch_+0x27c>)
 80029a8:	781b      	ldrb	r3, [r3, #0]
 80029aa:	f003 0304 	and.w	r3, r3, #4
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d01a      	beq.n	80029e8 <QHsm_dispatch_+0x1d0>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	08db      	lsrs	r3, r3, #3
 80029b6:	4a37      	ldr	r2, [pc, #220]	@ (8002a94 <QHsm_dispatch_+0x27c>)
 80029b8:	4413      	add	r3, r2
 80029ba:	7c1b      	ldrb	r3, [r3, #16]
 80029bc:	461a      	mov	r2, r3
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	f003 0307 	and.w	r3, r3, #7
 80029c4:	fa22 f303 	lsr.w	r3, r2, r3
 80029c8:	f003 0301 	and.w	r3, r3, #1
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d00b      	beq.n	80029e8 <QHsm_dispatch_+0x1d0>
 80029d0:	2002      	movs	r0, #2
 80029d2:	f002 fef9 	bl	80057c8 <QS_beginRec_>
 80029d6:	68f8      	ldr	r0, [r7, #12]
 80029d8:	f003 fa2a 	bl	8005e30 <QS_obj_raw_>
 80029dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80029de:	4618      	mov	r0, r3
 80029e0:	f003 f9ae 	bl	8005d40 <QS_u32_raw_>
 80029e4:	f002 ff70 	bl	80058c8 <QS_endRec_>
 80029e8:	f7ff fcea 	bl	80023c0 <QF_crit_exit_>
                // find superstate of t
                (void)QHSM_RESERVED_EVT_(t, Q_EMPTY_SIG);
 80029ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80029ee:	492a      	ldr	r1, [pc, #168]	@ (8002a98 <QHsm_dispatch_+0x280>)
 80029f0:	68f8      	ldr	r0, [r7, #12]
 80029f2:	4798      	blx	r3
            }
            --limit;
 80029f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029f6:	3b01      	subs	r3, #1
 80029f8:	637b      	str	r3, [r7, #52]	@ 0x34
        for (; (t != s) && (limit > 0); t = me->temp.fun) {
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a00:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002a02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d002      	beq.n	8002a0e <QHsm_dispatch_+0x1f6>
 8002a08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	dcc2      	bgt.n	8002994 <QHsm_dispatch_+0x17c>
        }
        QF_CRIT_ENTRY();
 8002a0e:	f7ff fcc5 	bl	800239c <QF_crit_entry_>
        Q_ASSERT_INCRIT(320, limit > 0);
 8002a12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	dc04      	bgt.n	8002a22 <QHsm_dispatch_+0x20a>
 8002a18:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 8002a1c:	481c      	ldr	r0, [pc, #112]	@ (8002a90 <QHsm_dispatch_+0x278>)
 8002a1e:	f7fe f805 	bl	8000a2c <Q_onError>
        QF_CRIT_EXIT();
 8002a22:	f7ff fccd 	bl	80023c0 <QF_crit_exit_>

        int_fast8_t ip = QHsm_tran_(me, path, qsId); // take the tran.
 8002a26:	f107 0314 	add.w	r3, r7, #20
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	68f8      	ldr	r0, [r7, #12]
 8002a30:	f000 fa2c 	bl	8002e8c <QHsm_tran_>
 8002a34:	6338      	str	r0, [r7, #48]	@ 0x30

    #ifdef Q_SPY
        if (r == Q_RET_TRAN_HIST) {
 8002a36:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8002a3a:	2b0b      	cmp	r3, #11
 8002a3c:	d169      	bne.n	8002b12 <QHsm_dispatch_+0x2fa>
            QS_CRIT_ENTRY();
 8002a3e:	f7ff fcad 	bl	800239c <QF_crit_entry_>
            QS_MEM_SYS();
            QS_BEGIN_PRE_(QS_QEP_TRAN_HIST, qsId)
 8002a42:	4b14      	ldr	r3, [pc, #80]	@ (8002a94 <QHsm_dispatch_+0x27c>)
 8002a44:	799b      	ldrb	r3, [r3, #6]
 8002a46:	b25b      	sxtb	r3, r3
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	da1e      	bge.n	8002a8a <QHsm_dispatch_+0x272>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	08db      	lsrs	r3, r3, #3
 8002a50:	4a10      	ldr	r2, [pc, #64]	@ (8002a94 <QHsm_dispatch_+0x27c>)
 8002a52:	4413      	add	r3, r2
 8002a54:	7c1b      	ldrb	r3, [r3, #16]
 8002a56:	461a      	mov	r2, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	f003 0307 	and.w	r3, r3, #7
 8002a5e:	fa22 f303 	lsr.w	r3, r2, r3
 8002a62:	f003 0301 	and.w	r3, r3, #1
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d00f      	beq.n	8002a8a <QHsm_dispatch_+0x272>
 8002a6a:	2037      	movs	r0, #55	@ 0x37
 8002a6c:	f002 feac 	bl	80057c8 <QS_beginRec_>
                QS_OBJ_PRE_(me);      // this state machine object
 8002a70:	68f8      	ldr	r0, [r7, #12]
 8002a72:	f003 f9dd 	bl	8005e30 <QS_obj_raw_>
                QS_FUN_PRE_(t);       // the source of the tran.
 8002a76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f003 f961 	bl	8005d40 <QS_u32_raw_>
                QS_FUN_PRE_(path[0]); // the target of the tran. to history
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	4618      	mov	r0, r3
 8002a82:	f003 f95d 	bl	8005d40 <QS_u32_raw_>
            QS_END_PRE_()
 8002a86:	f002 ff1f 	bl	80058c8 <QS_endRec_>
            QS_MEM_APP();
            QS_CRIT_EXIT();
 8002a8a:	f7ff fc99 	bl	80023c0 <QF_crit_exit_>
        }
    #endif // Q_SPY

        // execute state entry actions in the desired order...
        for (; ip >= 0; --ip) {
 8002a8e:	e040      	b.n	8002b12 <QHsm_dispatch_+0x2fa>
 8002a90:	080078e0 	.word	0x080078e0
 8002a94:	20000a84 	.word	0x20000a84
 8002a98:	080078e8 	.word	0x080078e8
 8002a9c:	080078f0 	.word	0x080078f0
            // enter path[ip]
            if (QHSM_RESERVED_EVT_(path[ip], Q_ENTRY_SIG)
 8002aa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	3340      	adds	r3, #64	@ 0x40
 8002aa6:	443b      	add	r3, r7
 8002aa8:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002aac:	49a4      	ldr	r1, [pc, #656]	@ (8002d40 <QHsm_dispatch_+0x528>)
 8002aae:	68f8      	ldr	r0, [r7, #12]
 8002ab0:	4798      	blx	r3
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b03      	cmp	r3, #3
 8002ab6:	d129      	bne.n	8002b0c <QHsm_dispatch_+0x2f4>
                == Q_RET_HANDLED)
            {
                QS_STATE_ENTRY_(path[ip], qsId);
 8002ab8:	f7ff fc70 	bl	800239c <QF_crit_entry_>
 8002abc:	4ba1      	ldr	r3, [pc, #644]	@ (8002d44 <QHsm_dispatch_+0x52c>)
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	f003 0302 	and.w	r3, r3, #2
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d01f      	beq.n	8002b08 <QHsm_dispatch_+0x2f0>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	08db      	lsrs	r3, r3, #3
 8002acc:	4a9d      	ldr	r2, [pc, #628]	@ (8002d44 <QHsm_dispatch_+0x52c>)
 8002ace:	4413      	add	r3, r2
 8002ad0:	7c1b      	ldrb	r3, [r3, #16]
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f003 0307 	and.w	r3, r3, #7
 8002ada:	fa22 f303 	lsr.w	r3, r2, r3
 8002ade:	f003 0301 	and.w	r3, r3, #1
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d010      	beq.n	8002b08 <QHsm_dispatch_+0x2f0>
 8002ae6:	2001      	movs	r0, #1
 8002ae8:	f002 fe6e 	bl	80057c8 <QS_beginRec_>
 8002aec:	68f8      	ldr	r0, [r7, #12]
 8002aee:	f003 f99f 	bl	8005e30 <QS_obj_raw_>
 8002af2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	3340      	adds	r3, #64	@ 0x40
 8002af8:	443b      	add	r3, r7
 8002afa:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002afe:	4618      	mov	r0, r3
 8002b00:	f003 f91e 	bl	8005d40 <QS_u32_raw_>
 8002b04:	f002 fee0 	bl	80058c8 <QS_endRec_>
 8002b08:	f7ff fc5a 	bl	80023c0 <QF_crit_exit_>
        for (; ip >= 0; --ip) {
 8002b0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b0e:	3b01      	subs	r3, #1
 8002b10:	633b      	str	r3, [r7, #48]	@ 0x30
 8002b12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	dac3      	bge.n	8002aa0 <QHsm_dispatch_+0x288>
            }
        }
        t = path[0];      // stick the target into register
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        me->temp.fun = t; // update the next state
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002b20:	609a      	str	r2, [r3, #8]

        // drill into the target hierarchy...
        while (QHSM_RESERVED_EVT_(t, Q_INIT_SIG) == Q_RET_TRAN) {
 8002b22:	e09b      	b.n	8002c5c <QHsm_dispatch_+0x444>

            QS_CRIT_ENTRY();
 8002b24:	f7ff fc3a 	bl	800239c <QF_crit_entry_>
            QS_MEM_SYS();
            QS_BEGIN_PRE_(QS_QEP_STATE_INIT, qsId)
 8002b28:	4b86      	ldr	r3, [pc, #536]	@ (8002d44 <QHsm_dispatch_+0x52c>)
 8002b2a:	781b      	ldrb	r3, [r3, #0]
 8002b2c:	f003 0308 	and.w	r3, r3, #8
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d01f      	beq.n	8002b74 <QHsm_dispatch_+0x35c>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	08db      	lsrs	r3, r3, #3
 8002b38:	4a82      	ldr	r2, [pc, #520]	@ (8002d44 <QHsm_dispatch_+0x52c>)
 8002b3a:	4413      	add	r3, r2
 8002b3c:	7c1b      	ldrb	r3, [r3, #16]
 8002b3e:	461a      	mov	r2, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	f003 0307 	and.w	r3, r3, #7
 8002b46:	fa22 f303 	lsr.w	r3, r2, r3
 8002b4a:	f003 0301 	and.w	r3, r3, #1
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d010      	beq.n	8002b74 <QHsm_dispatch_+0x35c>
 8002b52:	2003      	movs	r0, #3
 8002b54:	f002 fe38 	bl	80057c8 <QS_beginRec_>
                QS_OBJ_PRE_(me);           // this state machine object
 8002b58:	68f8      	ldr	r0, [r7, #12]
 8002b5a:	f003 f969 	bl	8005e30 <QS_obj_raw_>
                QS_FUN_PRE_(t);            // the source (pseudo)state
 8002b5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b60:	4618      	mov	r0, r3
 8002b62:	f003 f8ed 	bl	8005d40 <QS_u32_raw_>
                QS_FUN_PRE_(me->temp.fun); // the target of the tran.
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f003 f8e8 	bl	8005d40 <QS_u32_raw_>
            QS_END_PRE_()
 8002b70:	f002 feaa 	bl	80058c8 <QS_endRec_>
            QS_MEM_APP();
            QS_CRIT_EXIT();
 8002b74:	f7ff fc24 	bl	80023c0 <QF_crit_exit_>

            ip = 0;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	633b      	str	r3, [r7, #48]	@ 0x30
            path[0] = me->temp.fun;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	617b      	str	r3, [r7, #20]

            // find superstate
            (void)QHSM_RESERVED_EVT_(me->temp.fun, Q_EMPTY_SIG);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	4970      	ldr	r1, [pc, #448]	@ (8002d48 <QHsm_dispatch_+0x530>)
 8002b88:	68f8      	ldr	r0, [r7, #12]
 8002b8a:	4798      	blx	r3

            while ((me->temp.fun != t) && (ip < (QHSM_MAX_NEST_DEPTH_ - 1))) {
 8002b8c:	e00f      	b.n	8002bae <QHsm_dispatch_+0x396>
                ++ip;
 8002b8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b90:	3301      	adds	r3, #1
 8002b92:	633b      	str	r3, [r7, #48]	@ 0x30
                path[ip] = me->temp.fun;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	689a      	ldr	r2, [r3, #8]
 8002b98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	3340      	adds	r3, #64	@ 0x40
 8002b9e:	443b      	add	r3, r7
 8002ba0:	f843 2c2c 	str.w	r2, [r3, #-44]
                // find superstate
                (void)QHSM_RESERVED_EVT_(me->temp.fun, Q_EMPTY_SIG);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	4967      	ldr	r1, [pc, #412]	@ (8002d48 <QHsm_dispatch_+0x530>)
 8002baa:	68f8      	ldr	r0, [r7, #12]
 8002bac:	4798      	blx	r3
            while ((me->temp.fun != t) && (ip < (QHSM_MAX_NEST_DEPTH_ - 1))) {
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d002      	beq.n	8002bbe <QHsm_dispatch_+0x3a6>
 8002bb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bba:	2b04      	cmp	r3, #4
 8002bbc:	dde7      	ble.n	8002b8e <QHsm_dispatch_+0x376>
            }
            QF_CRIT_ENTRY();
 8002bbe:	f7ff fbed 	bl	800239c <QF_crit_entry_>
            // The initial transition source state must be reached.
            // Too many state nesting levels or "malformed" HSM.
            Q_ASSERT_INCRIT(330, me->temp.fun == t);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d004      	beq.n	8002bd6 <QHsm_dispatch_+0x3be>
 8002bcc:	f44f 71a5 	mov.w	r1, #330	@ 0x14a
 8002bd0:	485e      	ldr	r0, [pc, #376]	@ (8002d4c <QHsm_dispatch_+0x534>)
 8002bd2:	f7fd ff2b 	bl	8000a2c <Q_onError>
            QF_CRIT_EXIT();
 8002bd6:	f7ff fbf3 	bl	80023c0 <QF_crit_exit_>

            me->temp.fun = path[0];
 8002bda:	697a      	ldr	r2, [r7, #20]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	609a      	str	r2, [r3, #8]

            // retrace the entry path in reverse (correct) order...
            do {
                // enter path[ip]
                if (QHSM_RESERVED_EVT_(path[ip], Q_ENTRY_SIG)
 8002be0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	3340      	adds	r3, #64	@ 0x40
 8002be6:	443b      	add	r3, r7
 8002be8:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002bec:	4954      	ldr	r1, [pc, #336]	@ (8002d40 <QHsm_dispatch_+0x528>)
 8002bee:	68f8      	ldr	r0, [r7, #12]
 8002bf0:	4798      	blx	r3
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b03      	cmp	r3, #3
 8002bf6:	d129      	bne.n	8002c4c <QHsm_dispatch_+0x434>
                    == Q_RET_HANDLED)
                {
                    QS_STATE_ENTRY_(path[ip], qsId);
 8002bf8:	f7ff fbd0 	bl	800239c <QF_crit_entry_>
 8002bfc:	4b51      	ldr	r3, [pc, #324]	@ (8002d44 <QHsm_dispatch_+0x52c>)
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	f003 0302 	and.w	r3, r3, #2
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d01f      	beq.n	8002c48 <QHsm_dispatch_+0x430>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	08db      	lsrs	r3, r3, #3
 8002c0c:	4a4d      	ldr	r2, [pc, #308]	@ (8002d44 <QHsm_dispatch_+0x52c>)
 8002c0e:	4413      	add	r3, r2
 8002c10:	7c1b      	ldrb	r3, [r3, #16]
 8002c12:	461a      	mov	r2, r3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	f003 0307 	and.w	r3, r3, #7
 8002c1a:	fa22 f303 	lsr.w	r3, r2, r3
 8002c1e:	f003 0301 	and.w	r3, r3, #1
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d010      	beq.n	8002c48 <QHsm_dispatch_+0x430>
 8002c26:	2001      	movs	r0, #1
 8002c28:	f002 fdce 	bl	80057c8 <QS_beginRec_>
 8002c2c:	68f8      	ldr	r0, [r7, #12]
 8002c2e:	f003 f8ff 	bl	8005e30 <QS_obj_raw_>
 8002c32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	3340      	adds	r3, #64	@ 0x40
 8002c38:	443b      	add	r3, r7
 8002c3a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f003 f87e 	bl	8005d40 <QS_u32_raw_>
 8002c44:	f002 fe40 	bl	80058c8 <QS_endRec_>
 8002c48:	f7ff fbba 	bl	80023c0 <QF_crit_exit_>
                }
                --ip;
 8002c4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c4e:	3b01      	subs	r3, #1
 8002c50:	633b      	str	r3, [r7, #48]	@ 0x30
            } while (ip >= 0);
 8002c52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	dac3      	bge.n	8002be0 <QHsm_dispatch_+0x3c8>

            t = path[0]; // current state becomes the new source
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        while (QHSM_RESERVED_EVT_(t, Q_INIT_SIG) == Q_RET_TRAN) {
 8002c5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c5e:	493c      	ldr	r1, [pc, #240]	@ (8002d50 <QHsm_dispatch_+0x538>)
 8002c60:	68f8      	ldr	r0, [r7, #12]
 8002c62:	4798      	blx	r3
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b08      	cmp	r3, #8
 8002c68:	f43f af5c 	beq.w	8002b24 <QHsm_dispatch_+0x30c>
        }

        QS_CRIT_ENTRY();
 8002c6c:	f7ff fb96 	bl	800239c <QF_crit_entry_>
        QS_MEM_SYS();
        QS_BEGIN_PRE_(QS_QEP_TRAN, qsId)
 8002c70:	4b34      	ldr	r3, [pc, #208]	@ (8002d44 <QHsm_dispatch_+0x52c>)
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d029      	beq.n	8002cd0 <QHsm_dispatch_+0x4b8>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	08db      	lsrs	r3, r3, #3
 8002c80:	4a30      	ldr	r2, [pc, #192]	@ (8002d44 <QHsm_dispatch_+0x52c>)
 8002c82:	4413      	add	r3, r2
 8002c84:	7c1b      	ldrb	r3, [r3, #16]
 8002c86:	461a      	mov	r2, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	f003 0307 	and.w	r3, r3, #7
 8002c8e:	fa22 f303 	lsr.w	r3, r2, r3
 8002c92:	f003 0301 	and.w	r3, r3, #1
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d01a      	beq.n	8002cd0 <QHsm_dispatch_+0x4b8>
 8002c9a:	2006      	movs	r0, #6
 8002c9c:	f002 fd94 	bl	80057c8 <QS_beginRec_>
            QS_TIME_PRE_();      // time stamp
 8002ca0:	f7fd fc7a 	bl	8000598 <QS_onGetTime>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f003 f84a 	bl	8005d40 <QS_u32_raw_>
            QS_SIG_PRE_(e->sig); // the signal of the event
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	881b      	ldrh	r3, [r3, #0]
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f002 ff91 	bl	8005bd8 <QS_u16_raw_>
            QS_OBJ_PRE_(me);     // this state machine object
 8002cb6:	68f8      	ldr	r0, [r7, #12]
 8002cb8:	f003 f8ba 	bl	8005e30 <QS_obj_raw_>
            QS_FUN_PRE_(s);      // the source of the tran.
 8002cbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f003 f83e 	bl	8005d40 <QS_u32_raw_>
            QS_FUN_PRE_(t);      // the new active state
 8002cc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f003 f83a 	bl	8005d40 <QS_u32_raw_>
        QS_END_PRE_()
 8002ccc:	f002 fdfc 	bl	80058c8 <QS_endRec_>
        QS_MEM_APP();
        QS_CRIT_EXIT();
 8002cd0:	f7ff fb76 	bl	80023c0 <QF_crit_exit_>
 8002cd4:	e06e      	b.n	8002db4 <QHsm_dispatch_+0x59c>
    }

    #ifdef Q_SPY
    else if (r == Q_RET_HANDLED) {
 8002cd6:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8002cda:	2b03      	cmp	r3, #3
 8002cdc:	d13a      	bne.n	8002d54 <QHsm_dispatch_+0x53c>
        QS_CRIT_ENTRY();
 8002cde:	f7ff fb5d 	bl	800239c <QF_crit_entry_>
        QS_MEM_SYS();
        QS_BEGIN_PRE_(QS_QEP_INTERN_TRAN, qsId)
 8002ce2:	4b18      	ldr	r3, [pc, #96]	@ (8002d44 <QHsm_dispatch_+0x52c>)
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	f003 0320 	and.w	r3, r3, #32
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d025      	beq.n	8002d3a <QHsm_dispatch_+0x522>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	08db      	lsrs	r3, r3, #3
 8002cf2:	4a14      	ldr	r2, [pc, #80]	@ (8002d44 <QHsm_dispatch_+0x52c>)
 8002cf4:	4413      	add	r3, r2
 8002cf6:	7c1b      	ldrb	r3, [r3, #16]
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	f003 0307 	and.w	r3, r3, #7
 8002d00:	fa22 f303 	lsr.w	r3, r2, r3
 8002d04:	f003 0301 	and.w	r3, r3, #1
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d016      	beq.n	8002d3a <QHsm_dispatch_+0x522>
 8002d0c:	2005      	movs	r0, #5
 8002d0e:	f002 fd5b 	bl	80057c8 <QS_beginRec_>
            QS_TIME_PRE_();      // time stamp
 8002d12:	f7fd fc41 	bl	8000598 <QS_onGetTime>
 8002d16:	4603      	mov	r3, r0
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f003 f811 	bl	8005d40 <QS_u32_raw_>
            QS_SIG_PRE_(e->sig); // the signal of the event
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	881b      	ldrh	r3, [r3, #0]
 8002d22:	4618      	mov	r0, r3
 8002d24:	f002 ff58 	bl	8005bd8 <QS_u16_raw_>
            QS_OBJ_PRE_(me);     // this state machine object
 8002d28:	68f8      	ldr	r0, [r7, #12]
 8002d2a:	f003 f881 	bl	8005e30 <QS_obj_raw_>
            QS_FUN_PRE_(s);      // the source state
 8002d2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d30:	4618      	mov	r0, r3
 8002d32:	f003 f805 	bl	8005d40 <QS_u32_raw_>
        QS_END_PRE_()
 8002d36:	f002 fdc7 	bl	80058c8 <QS_endRec_>
        QS_MEM_APP();
        QS_CRIT_EXIT();
 8002d3a:	f7ff fb41 	bl	80023c0 <QF_crit_exit_>
 8002d3e:	e039      	b.n	8002db4 <QHsm_dispatch_+0x59c>
 8002d40:	080078ec 	.word	0x080078ec
 8002d44:	20000a84 	.word	0x20000a84
 8002d48:	080078e8 	.word	0x080078e8
 8002d4c:	080078e0 	.word	0x080078e0
 8002d50:	080078f4 	.word	0x080078f4
    }
    else {
        QS_CRIT_ENTRY();
 8002d54:	f7ff fb22 	bl	800239c <QF_crit_entry_>
        QS_MEM_SYS();
        QS_BEGIN_PRE_(QS_QEP_IGNORED, qsId)
 8002d58:	4b1c      	ldr	r3, [pc, #112]	@ (8002dcc <QHsm_dispatch_+0x5b4>)
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	b25b      	sxtb	r3, r3
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	da26      	bge.n	8002db0 <QHsm_dispatch_+0x598>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	08db      	lsrs	r3, r3, #3
 8002d66:	4a19      	ldr	r2, [pc, #100]	@ (8002dcc <QHsm_dispatch_+0x5b4>)
 8002d68:	4413      	add	r3, r2
 8002d6a:	7c1b      	ldrb	r3, [r3, #16]
 8002d6c:	461a      	mov	r2, r3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	f003 0307 	and.w	r3, r3, #7
 8002d74:	fa22 f303 	lsr.w	r3, r2, r3
 8002d78:	f003 0301 	and.w	r3, r3, #1
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d017      	beq.n	8002db0 <QHsm_dispatch_+0x598>
 8002d80:	2007      	movs	r0, #7
 8002d82:	f002 fd21 	bl	80057c8 <QS_beginRec_>
            QS_TIME_PRE_();      // time stamp
 8002d86:	f7fd fc07 	bl	8000598 <QS_onGetTime>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f002 ffd7 	bl	8005d40 <QS_u32_raw_>
            QS_SIG_PRE_(e->sig); // the signal of the event
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	881b      	ldrh	r3, [r3, #0]
 8002d96:	4618      	mov	r0, r3
 8002d98:	f002 ff1e 	bl	8005bd8 <QS_u16_raw_>
            QS_OBJ_PRE_(me);     // this state machine object
 8002d9c:	68f8      	ldr	r0, [r7, #12]
 8002d9e:	f003 f847 	bl	8005e30 <QS_obj_raw_>
            QS_FUN_PRE_(me->state.fun); // the current state
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	4618      	mov	r0, r3
 8002da8:	f002 ffca 	bl	8005d40 <QS_u32_raw_>
        QS_END_PRE_()
 8002dac:	f002 fd8c 	bl	80058c8 <QS_endRec_>
        QS_MEM_APP();
        QS_CRIT_EXIT();
 8002db0:	f7ff fb06 	bl	80023c0 <QF_crit_exit_>
    }
    #endif // Q_SPY

    me->state.fun = t; // change the current active state
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002db8:	605a      	str	r2, [r3, #4]
    #ifndef Q_UNSAFE
    me->temp.uint = ~me->state.uint;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	43da      	mvns	r2, r3
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	609a      	str	r2, [r3, #8]
    #endif
}
 8002dc4:	bf00      	nop
 8002dc6:	3740      	adds	r7, #64	@ 0x40
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	20000a84 	.word	0x20000a84

08002dd0 <QHsm_getStateHandler_>:

//${QEP::QHsm::getStateHandler_} .............................................
#ifdef Q_SPY
//! @private @memberof QHsm
QStateHandler QHsm_getStateHandler_(QAsm * const me) {
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
    return me->state.fun;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	685b      	ldr	r3, [r3, #4]
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	370c      	adds	r7, #12
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr

08002de8 <QHsm_isIn_>:
//${QEP::QHsm::isIn_} ........................................................
//! @private @memberof QHsm
bool QHsm_isIn_(
    QAsm * const me,
    QStateHandler const state)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b086      	sub	sp, #24
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
 8002df0:	6039      	str	r1, [r7, #0]
    QF_CRIT_STAT
    QF_CRIT_ENTRY();
 8002df2:	f7ff fad3 	bl	800239c <QF_crit_entry_>
    Q_REQUIRE_INCRIT(602, me->state.uint
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	685a      	ldr	r2, [r3, #4]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	43db      	mvns	r3, r3
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d004      	beq.n	8002e0e <QHsm_isIn_+0x26>
 8002e04:	f240 215a 	movw	r1, #602	@ 0x25a
 8002e08:	481e      	ldr	r0, [pc, #120]	@ (8002e84 <QHsm_isIn_+0x9c>)
 8002e0a:	f7fd fe0f 	bl	8000a2c <Q_onError>
                      == (uintptr_t)(~me->temp.uint));
    QF_CRIT_EXIT();
 8002e0e:	f7ff fad7 	bl	80023c0 <QF_crit_exit_>

    bool inState = false; // assume that this HSM is not in 'state'
 8002e12:	2300      	movs	r3, #0
 8002e14:	75fb      	strb	r3, [r7, #23]

    // scan the state hierarchy bottom-up
    QStateHandler s = me->state.fun;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	613b      	str	r3, [r7, #16]
    int_fast8_t limit = QHSM_MAX_NEST_DEPTH_ + 1; // loop hard limit
 8002e1c:	2307      	movs	r3, #7
 8002e1e:	60fb      	str	r3, [r7, #12]
    QState r = Q_RET_SUPER;
 8002e20:	2300      	movs	r3, #0
 8002e22:	72fb      	strb	r3, [r7, #11]
    for (; (r != Q_RET_IGNORED) && (limit > 0); --limit) {
 8002e24:	e012      	b.n	8002e4c <QHsm_isIn_+0x64>
        if (s == state) { // do the states match?
 8002e26:	693a      	ldr	r2, [r7, #16]
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d102      	bne.n	8002e34 <QHsm_isIn_+0x4c>
            inState = true;  // 'true' means that match found
 8002e2e:	2301      	movs	r3, #1
 8002e30:	75fb      	strb	r3, [r7, #23]
            break; // break out of the for-loop
 8002e32:	e011      	b.n	8002e58 <QHsm_isIn_+0x70>
        }
        else {
            r = QHSM_RESERVED_EVT_(s, Q_EMPTY_SIG);
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	4914      	ldr	r1, [pc, #80]	@ (8002e88 <QHsm_isIn_+0xa0>)
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	4798      	blx	r3
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	72fb      	strb	r3, [r7, #11]
            s = me->temp.fun;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	613b      	str	r3, [r7, #16]
    for (; (r != Q_RET_IGNORED) && (limit > 0); --limit) {
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	3b01      	subs	r3, #1
 8002e4a:	60fb      	str	r3, [r7, #12]
 8002e4c:	7afb      	ldrb	r3, [r7, #11]
 8002e4e:	2b04      	cmp	r3, #4
 8002e50:	d002      	beq.n	8002e58 <QHsm_isIn_+0x70>
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	dce6      	bgt.n	8002e26 <QHsm_isIn_+0x3e>
        }
    }

    QF_CRIT_ENTRY();
 8002e58:	f7ff faa0 	bl	800239c <QF_crit_entry_>
    Q_ENSURE_INCRIT(690, limit > 0);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	dc04      	bgt.n	8002e6c <QHsm_isIn_+0x84>
 8002e62:	f240 21b2 	movw	r1, #690	@ 0x2b2
 8002e66:	4807      	ldr	r0, [pc, #28]	@ (8002e84 <QHsm_isIn_+0x9c>)
 8002e68:	f7fd fde0 	bl	8000a2c <Q_onError>
    QF_CRIT_EXIT();
 8002e6c:	f7ff faa8 	bl	80023c0 <QF_crit_exit_>

    #ifndef Q_UNSAFE
    me->temp.uint = ~me->state.uint;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	43da      	mvns	r2, r3
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	609a      	str	r2, [r3, #8]
    #endif

    return inState; // return the status
 8002e7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3718      	adds	r7, #24
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	080078e0 	.word	0x080078e0
 8002e88:	080078e8 	.word	0x080078e8

08002e8c <QHsm_tran_>:
//! @private @memberof QHsm
int_fast8_t QHsm_tran_(
    QAsm * const me,
    QStateHandler * const path,
    uint_fast8_t const qsId)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b08a      	sub	sp, #40	@ 0x28
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	60f8      	str	r0, [r7, #12]
 8002e94:	60b9      	str	r1, [r7, #8]
 8002e96:	607a      	str	r2, [r7, #4]
    #ifndef Q_SPY
    Q_UNUSED_PAR(qsId);
    #endif

    int_fast8_t ip = -1; // tran. entry path index
 8002e98:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002e9c:	627b      	str	r3, [r7, #36]	@ 0x24
    QStateHandler t = path[0];
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	623b      	str	r3, [r7, #32]
    QStateHandler const s = path[2];
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	613b      	str	r3, [r7, #16]
    QF_CRIT_STAT

    // (a) check source==target (tran. to self)...
    if (s == t) {
 8002eaa:	693a      	ldr	r2, [r7, #16]
 8002eac:	6a3b      	ldr	r3, [r7, #32]
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d12e      	bne.n	8002f10 <QHsm_tran_+0x84>
        // exit source s
        if (QHSM_RESERVED_EVT_(s, Q_EXIT_SIG) == Q_RET_HANDLED) {
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	4998      	ldr	r1, [pc, #608]	@ (8003118 <QHsm_tran_+0x28c>)
 8002eb6:	68f8      	ldr	r0, [r7, #12]
 8002eb8:	4798      	blx	r3
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b03      	cmp	r3, #3
 8002ebe:	d124      	bne.n	8002f0a <QHsm_tran_+0x7e>
            QS_STATE_EXIT_(s, qsId);
 8002ec0:	f7ff fa6c 	bl	800239c <QF_crit_entry_>
 8002ec4:	4b95      	ldr	r3, [pc, #596]	@ (800311c <QHsm_tran_+0x290>)
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	f003 0304 	and.w	r3, r3, #4
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d01a      	beq.n	8002f06 <QHsm_tran_+0x7a>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	08db      	lsrs	r3, r3, #3
 8002ed4:	4a91      	ldr	r2, [pc, #580]	@ (800311c <QHsm_tran_+0x290>)
 8002ed6:	4413      	add	r3, r2
 8002ed8:	7c1b      	ldrb	r3, [r3, #16]
 8002eda:	461a      	mov	r2, r3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	f003 0307 	and.w	r3, r3, #7
 8002ee2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ee6:	f003 0301 	and.w	r3, r3, #1
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d00b      	beq.n	8002f06 <QHsm_tran_+0x7a>
 8002eee:	2002      	movs	r0, #2
 8002ef0:	f002 fc6a 	bl	80057c8 <QS_beginRec_>
 8002ef4:	68f8      	ldr	r0, [r7, #12]
 8002ef6:	f002 ff9b 	bl	8005e30 <QS_obj_raw_>
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	4618      	mov	r0, r3
 8002efe:	f002 ff1f 	bl	8005d40 <QS_u32_raw_>
 8002f02:	f002 fce1 	bl	80058c8 <QS_endRec_>
 8002f06:	f7ff fa5b 	bl	80023c0 <QF_crit_exit_>
        }
        ip = 0; // enter the target
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f0e:	e179      	b.n	8003204 <QHsm_tran_+0x378>
    }
    else {
        // find superstate of target
        (void)QHSM_RESERVED_EVT_(t, Q_EMPTY_SIG);
 8002f10:	6a3b      	ldr	r3, [r7, #32]
 8002f12:	4983      	ldr	r1, [pc, #524]	@ (8003120 <QHsm_tran_+0x294>)
 8002f14:	68f8      	ldr	r0, [r7, #12]
 8002f16:	4798      	blx	r3

        t = me->temp.fun;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	623b      	str	r3, [r7, #32]

        // (b) check source==target->super...
        if (s == t) {
 8002f1e:	693a      	ldr	r2, [r7, #16]
 8002f20:	6a3b      	ldr	r3, [r7, #32]
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d102      	bne.n	8002f2c <QHsm_tran_+0xa0>
            ip = 0; // enter the target
 8002f26:	2300      	movs	r3, #0
 8002f28:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f2a:	e16b      	b.n	8003204 <QHsm_tran_+0x378>
        }
        else {
            // find superstate of src
            (void)QHSM_RESERVED_EVT_(s, Q_EMPTY_SIG);
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	497c      	ldr	r1, [pc, #496]	@ (8003120 <QHsm_tran_+0x294>)
 8002f30:	68f8      	ldr	r0, [r7, #12]
 8002f32:	4798      	blx	r3

            // (c) check source->super==target->super...
            if (me->temp.fun == t) {
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	6a3a      	ldr	r2, [r7, #32]
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d12e      	bne.n	8002f9c <QHsm_tran_+0x110>
                // exit source s
                if (QHSM_RESERVED_EVT_(s, Q_EXIT_SIG) == Q_RET_HANDLED) {
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	4975      	ldr	r1, [pc, #468]	@ (8003118 <QHsm_tran_+0x28c>)
 8002f42:	68f8      	ldr	r0, [r7, #12]
 8002f44:	4798      	blx	r3
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b03      	cmp	r3, #3
 8002f4a:	d124      	bne.n	8002f96 <QHsm_tran_+0x10a>
                    QS_STATE_EXIT_(s, qsId);
 8002f4c:	f7ff fa26 	bl	800239c <QF_crit_entry_>
 8002f50:	4b72      	ldr	r3, [pc, #456]	@ (800311c <QHsm_tran_+0x290>)
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	f003 0304 	and.w	r3, r3, #4
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d01a      	beq.n	8002f92 <QHsm_tran_+0x106>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	08db      	lsrs	r3, r3, #3
 8002f60:	4a6e      	ldr	r2, [pc, #440]	@ (800311c <QHsm_tran_+0x290>)
 8002f62:	4413      	add	r3, r2
 8002f64:	7c1b      	ldrb	r3, [r3, #16]
 8002f66:	461a      	mov	r2, r3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	f003 0307 	and.w	r3, r3, #7
 8002f6e:	fa22 f303 	lsr.w	r3, r2, r3
 8002f72:	f003 0301 	and.w	r3, r3, #1
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d00b      	beq.n	8002f92 <QHsm_tran_+0x106>
 8002f7a:	2002      	movs	r0, #2
 8002f7c:	f002 fc24 	bl	80057c8 <QS_beginRec_>
 8002f80:	68f8      	ldr	r0, [r7, #12]
 8002f82:	f002 ff55 	bl	8005e30 <QS_obj_raw_>
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f002 fed9 	bl	8005d40 <QS_u32_raw_>
 8002f8e:	f002 fc9b 	bl	80058c8 <QS_endRec_>
 8002f92:	f7ff fa15 	bl	80023c0 <QF_crit_exit_>
                }
                ip = 0; // enter the target
 8002f96:	2300      	movs	r3, #0
 8002f98:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f9a:	e133      	b.n	8003204 <QHsm_tran_+0x378>
            }
            else {
                // (d) check source->super==target...
                if (me->temp.fun == path[0]) {
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	689a      	ldr	r2, [r3, #8]
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d12d      	bne.n	8003004 <QHsm_tran_+0x178>
                    // exit source s
                    if (QHSM_RESERVED_EVT_(s, Q_EXIT_SIG) == Q_RET_HANDLED) {
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	495b      	ldr	r1, [pc, #364]	@ (8003118 <QHsm_tran_+0x28c>)
 8002fac:	68f8      	ldr	r0, [r7, #12]
 8002fae:	4798      	blx	r3
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b03      	cmp	r3, #3
 8002fb4:	f040 8126 	bne.w	8003204 <QHsm_tran_+0x378>
                        QS_STATE_EXIT_(s, qsId);
 8002fb8:	f7ff f9f0 	bl	800239c <QF_crit_entry_>
 8002fbc:	4b57      	ldr	r3, [pc, #348]	@ (800311c <QHsm_tran_+0x290>)
 8002fbe:	781b      	ldrb	r3, [r3, #0]
 8002fc0:	f003 0304 	and.w	r3, r3, #4
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d01a      	beq.n	8002ffe <QHsm_tran_+0x172>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	08db      	lsrs	r3, r3, #3
 8002fcc:	4a53      	ldr	r2, [pc, #332]	@ (800311c <QHsm_tran_+0x290>)
 8002fce:	4413      	add	r3, r2
 8002fd0:	7c1b      	ldrb	r3, [r3, #16]
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f003 0307 	and.w	r3, r3, #7
 8002fda:	fa22 f303 	lsr.w	r3, r2, r3
 8002fde:	f003 0301 	and.w	r3, r3, #1
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d00b      	beq.n	8002ffe <QHsm_tran_+0x172>
 8002fe6:	2002      	movs	r0, #2
 8002fe8:	f002 fbee 	bl	80057c8 <QS_beginRec_>
 8002fec:	68f8      	ldr	r0, [r7, #12]
 8002fee:	f002 ff1f 	bl	8005e30 <QS_obj_raw_>
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f002 fea3 	bl	8005d40 <QS_u32_raw_>
 8002ffa:	f002 fc65 	bl	80058c8 <QS_endRec_>
 8002ffe:	f7ff f9df 	bl	80023c0 <QF_crit_exit_>
 8003002:	e0ff      	b.n	8003204 <QHsm_tran_+0x378>
                    }
                }
                else {
                    // (e) check rest of source==target->super->super..
                    // and store the entry path along the way
                    int_fast8_t iq = 0; // indicate that LCA was found
 8003004:	2300      	movs	r3, #0
 8003006:	61fb      	str	r3, [r7, #28]
                    ip = 1; // enter target and its superstate
 8003008:	2301      	movs	r3, #1
 800300a:	627b      	str	r3, [r7, #36]	@ 0x24
                    path[1] = t;      // save the superstate of target
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	3304      	adds	r3, #4
 8003010:	6a3a      	ldr	r2, [r7, #32]
 8003012:	601a      	str	r2, [r3, #0]
                    t = me->temp.fun; // save source->super
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	623b      	str	r3, [r7, #32]

                    // find target->super->super...
                    QState r = QHSM_RESERVED_EVT_(path[1], Q_EMPTY_SIG);
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	3304      	adds	r3, #4
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	493f      	ldr	r1, [pc, #252]	@ (8003120 <QHsm_tran_+0x294>)
 8003022:	68f8      	ldr	r0, [r7, #12]
 8003024:	4798      	blx	r3
 8003026:	4603      	mov	r3, r0
 8003028:	76fb      	strb	r3, [r7, #27]
                    while ((r == Q_RET_SUPER)
 800302a:	e01d      	b.n	8003068 <QHsm_tran_+0x1dc>
                           && (ip < (QHSM_MAX_NEST_DEPTH_ - 1)))
                    {
                        ++ip;
 800302c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800302e:	3301      	adds	r3, #1
 8003030:	627b      	str	r3, [r7, #36]	@ 0x24
                        path[ip] = me->temp.fun; // store the entry path
 8003032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	68ba      	ldr	r2, [r7, #8]
 8003038:	4413      	add	r3, r2
 800303a:	68fa      	ldr	r2, [r7, #12]
 800303c:	6892      	ldr	r2, [r2, #8]
 800303e:	601a      	str	r2, [r3, #0]
                        if (me->temp.fun == s) { // is it the source?
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	693a      	ldr	r2, [r7, #16]
 8003046:	429a      	cmp	r2, r3
 8003048:	d107      	bne.n	800305a <QHsm_tran_+0x1ce>
                            iq = 1; // indicate that the LCA found
 800304a:	2301      	movs	r3, #1
 800304c:	61fb      	str	r3, [r7, #28]
                            --ip; // do not enter the source
 800304e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003050:	3b01      	subs	r3, #1
 8003052:	627b      	str	r3, [r7, #36]	@ 0x24
                            r = Q_RET_HANDLED; // terminate the loop
 8003054:	2303      	movs	r3, #3
 8003056:	76fb      	strb	r3, [r7, #27]
 8003058:	e006      	b.n	8003068 <QHsm_tran_+0x1dc>
                        }
                        else { // it is not the source, keep going up
                            r = QHSM_RESERVED_EVT_(me->temp.fun, Q_EMPTY_SIG);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	4930      	ldr	r1, [pc, #192]	@ (8003120 <QHsm_tran_+0x294>)
 8003060:	68f8      	ldr	r0, [r7, #12]
 8003062:	4798      	blx	r3
 8003064:	4603      	mov	r3, r0
 8003066:	76fb      	strb	r3, [r7, #27]
                           && (ip < (QHSM_MAX_NEST_DEPTH_ - 1)))
 8003068:	7efb      	ldrb	r3, [r7, #27]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d102      	bne.n	8003074 <QHsm_tran_+0x1e8>
 800306e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003070:	2b04      	cmp	r3, #4
 8003072:	dddb      	ble.n	800302c <QHsm_tran_+0x1a0>
                        }
                    }
                    QF_CRIT_ENTRY();
 8003074:	f7ff f992 	bl	800239c <QF_crit_entry_>
                    // Tran. source must be found within the nesting depth
                    // Too many state nesting levels or "malformed" HSM.
                    Q_ASSERT_INCRIT(510, r != Q_RET_SUPER);
 8003078:	7efb      	ldrb	r3, [r7, #27]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d104      	bne.n	8003088 <QHsm_tran_+0x1fc>
 800307e:	f44f 71ff 	mov.w	r1, #510	@ 0x1fe
 8003082:	4828      	ldr	r0, [pc, #160]	@ (8003124 <QHsm_tran_+0x298>)
 8003084:	f7fd fcd2 	bl	8000a2c <Q_onError>
                    QF_CRIT_EXIT();
 8003088:	f7ff f99a 	bl	80023c0 <QF_crit_exit_>

                    // the LCA not found yet?
                    if (iq == 0) {
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	2b00      	cmp	r3, #0
 8003090:	f040 80b8 	bne.w	8003204 <QHsm_tran_+0x378>
                        // exit source s
                        if (QHSM_RESERVED_EVT_(s, Q_EXIT_SIG)
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	4920      	ldr	r1, [pc, #128]	@ (8003118 <QHsm_tran_+0x28c>)
 8003098:	68f8      	ldr	r0, [r7, #12]
 800309a:	4798      	blx	r3
 800309c:	4603      	mov	r3, r0
 800309e:	2b03      	cmp	r3, #3
 80030a0:	d124      	bne.n	80030ec <QHsm_tran_+0x260>
                            == Q_RET_HANDLED)
                        {
                            QS_STATE_EXIT_(s, qsId);
 80030a2:	f7ff f97b 	bl	800239c <QF_crit_entry_>
 80030a6:	4b1d      	ldr	r3, [pc, #116]	@ (800311c <QHsm_tran_+0x290>)
 80030a8:	781b      	ldrb	r3, [r3, #0]
 80030aa:	f003 0304 	and.w	r3, r3, #4
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d01a      	beq.n	80030e8 <QHsm_tran_+0x25c>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	08db      	lsrs	r3, r3, #3
 80030b6:	4a19      	ldr	r2, [pc, #100]	@ (800311c <QHsm_tran_+0x290>)
 80030b8:	4413      	add	r3, r2
 80030ba:	7c1b      	ldrb	r3, [r3, #16]
 80030bc:	461a      	mov	r2, r3
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	f003 0307 	and.w	r3, r3, #7
 80030c4:	fa22 f303 	lsr.w	r3, r2, r3
 80030c8:	f003 0301 	and.w	r3, r3, #1
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d00b      	beq.n	80030e8 <QHsm_tran_+0x25c>
 80030d0:	2002      	movs	r0, #2
 80030d2:	f002 fb79 	bl	80057c8 <QS_beginRec_>
 80030d6:	68f8      	ldr	r0, [r7, #12]
 80030d8:	f002 feaa 	bl	8005e30 <QS_obj_raw_>
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	4618      	mov	r0, r3
 80030e0:	f002 fe2e 	bl	8005d40 <QS_u32_raw_>
 80030e4:	f002 fbf0 	bl	80058c8 <QS_endRec_>
 80030e8:	f7ff f96a 	bl	80023c0 <QF_crit_exit_>
                        }

                        // (f) check the rest of source->super
                        //                  == target->super->super...
                        iq = ip;
 80030ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ee:	61fb      	str	r3, [r7, #28]
                        r = Q_RET_IGNORED; // indicate that the LCA NOT found
 80030f0:	2304      	movs	r3, #4
 80030f2:	76fb      	strb	r3, [r7, #27]
                        do {
                            if (t == path[iq]) { // is this the LCA?
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	68ba      	ldr	r2, [r7, #8]
 80030fa:	4413      	add	r3, r2
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	6a3a      	ldr	r2, [r7, #32]
 8003100:	429a      	cmp	r2, r3
 8003102:	d111      	bne.n	8003128 <QHsm_tran_+0x29c>
                                r = Q_RET_HANDLED; // indicate the LCA found
 8003104:	2303      	movs	r3, #3
 8003106:	76fb      	strb	r3, [r7, #27]
                                ip = iq - 1; // do not enter the LCA
 8003108:	69fb      	ldr	r3, [r7, #28]
 800310a:	3b01      	subs	r3, #1
 800310c:	627b      	str	r3, [r7, #36]	@ 0x24
                                iq = -1; // cause termination of the loop
 800310e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003112:	61fb      	str	r3, [r7, #28]
 8003114:	e00b      	b.n	800312e <QHsm_tran_+0x2a2>
 8003116:	bf00      	nop
 8003118:	080078f0 	.word	0x080078f0
 800311c:	20000a84 	.word	0x20000a84
 8003120:	080078e8 	.word	0x080078e8
 8003124:	080078e0 	.word	0x080078e0
                            }
                            else {
                                --iq; // try lower superstate of target
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	3b01      	subs	r3, #1
 800312c:	61fb      	str	r3, [r7, #28]
                            }
                        } while (iq >= 0);
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	2b00      	cmp	r3, #0
 8003132:	dadf      	bge.n	80030f4 <QHsm_tran_+0x268>

                        // the LCA not found yet?
                        if (r != Q_RET_HANDLED) {
 8003134:	7efb      	ldrb	r3, [r7, #27]
 8003136:	2b03      	cmp	r3, #3
 8003138:	d064      	beq.n	8003204 <QHsm_tran_+0x378>
                            // (g) check each source->super->...
                            // for each target->super...
                            r = Q_RET_IGNORED; // keep looping
 800313a:	2304      	movs	r3, #4
 800313c:	76fb      	strb	r3, [r7, #27]
                            int_fast8_t limit = QHSM_MAX_NEST_DEPTH_;
 800313e:	2306      	movs	r3, #6
 8003140:	617b      	str	r3, [r7, #20]
                            do {
                                // exit from t
                                if (QHSM_RESERVED_EVT_(t, Q_EXIT_SIG)
 8003142:	6a3b      	ldr	r3, [r7, #32]
 8003144:	4938      	ldr	r1, [pc, #224]	@ (8003228 <QHsm_tran_+0x39c>)
 8003146:	68f8      	ldr	r0, [r7, #12]
 8003148:	4798      	blx	r3
 800314a:	4603      	mov	r3, r0
 800314c:	2b03      	cmp	r3, #3
 800314e:	d128      	bne.n	80031a2 <QHsm_tran_+0x316>
                                    == Q_RET_HANDLED)
                                {
                                    QS_STATE_EXIT_(t, qsId);
 8003150:	f7ff f924 	bl	800239c <QF_crit_entry_>
 8003154:	4b35      	ldr	r3, [pc, #212]	@ (800322c <QHsm_tran_+0x3a0>)
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	f003 0304 	and.w	r3, r3, #4
 800315c:	2b00      	cmp	r3, #0
 800315e:	d01a      	beq.n	8003196 <QHsm_tran_+0x30a>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	08db      	lsrs	r3, r3, #3
 8003164:	4a31      	ldr	r2, [pc, #196]	@ (800322c <QHsm_tran_+0x3a0>)
 8003166:	4413      	add	r3, r2
 8003168:	7c1b      	ldrb	r3, [r3, #16]
 800316a:	461a      	mov	r2, r3
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	f003 0307 	and.w	r3, r3, #7
 8003172:	fa22 f303 	lsr.w	r3, r2, r3
 8003176:	f003 0301 	and.w	r3, r3, #1
 800317a:	2b00      	cmp	r3, #0
 800317c:	d00b      	beq.n	8003196 <QHsm_tran_+0x30a>
 800317e:	2002      	movs	r0, #2
 8003180:	f002 fb22 	bl	80057c8 <QS_beginRec_>
 8003184:	68f8      	ldr	r0, [r7, #12]
 8003186:	f002 fe53 	bl	8005e30 <QS_obj_raw_>
 800318a:	6a3b      	ldr	r3, [r7, #32]
 800318c:	4618      	mov	r0, r3
 800318e:	f002 fdd7 	bl	8005d40 <QS_u32_raw_>
 8003192:	f002 fb99 	bl	80058c8 <QS_endRec_>
 8003196:	f7ff f913 	bl	80023c0 <QF_crit_exit_>
                                    // find superstate of t
                                    (void)QHSM_RESERVED_EVT_(t, Q_EMPTY_SIG);
 800319a:	6a3b      	ldr	r3, [r7, #32]
 800319c:	4924      	ldr	r1, [pc, #144]	@ (8003230 <QHsm_tran_+0x3a4>)
 800319e:	68f8      	ldr	r0, [r7, #12]
 80031a0:	4798      	blx	r3
                                }
                                t = me->temp.fun; // set to super of t
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	623b      	str	r3, [r7, #32]
                                iq = ip;
 80031a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031aa:	61fb      	str	r3, [r7, #28]
                                do {
                                    // is this the LCA?
                                    if (t == path[iq]) {
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	68ba      	ldr	r2, [r7, #8]
 80031b2:	4413      	add	r3, r2
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	6a3a      	ldr	r2, [r7, #32]
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d108      	bne.n	80031ce <QHsm_tran_+0x342>
                                        ip = iq - 1; // do not enter the LCA
 80031bc:	69fb      	ldr	r3, [r7, #28]
 80031be:	3b01      	subs	r3, #1
 80031c0:	627b      	str	r3, [r7, #36]	@ 0x24
                                        iq = -1;     // break out of inner loop
 80031c2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80031c6:	61fb      	str	r3, [r7, #28]
                                        r = Q_RET_HANDLED; // break outer loop
 80031c8:	2303      	movs	r3, #3
 80031ca:	76fb      	strb	r3, [r7, #27]
 80031cc:	e002      	b.n	80031d4 <QHsm_tran_+0x348>
                                    }
                                    else {
                                        --iq;
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	3b01      	subs	r3, #1
 80031d2:	61fb      	str	r3, [r7, #28]
                                    }
                                } while (iq >= 0);
 80031d4:	69fb      	ldr	r3, [r7, #28]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	dae8      	bge.n	80031ac <QHsm_tran_+0x320>

                                --limit;
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	3b01      	subs	r3, #1
 80031de:	617b      	str	r3, [r7, #20]
                            } while ((r != Q_RET_HANDLED) && (limit > 0));
 80031e0:	7efb      	ldrb	r3, [r7, #27]
 80031e2:	2b03      	cmp	r3, #3
 80031e4:	d002      	beq.n	80031ec <QHsm_tran_+0x360>
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	dcaa      	bgt.n	8003142 <QHsm_tran_+0x2b6>
                            QF_CRIT_ENTRY();
 80031ec:	f7ff f8d6 	bl	800239c <QF_crit_entry_>
                            Q_ASSERT_INCRIT(530, limit > 0);
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	dc04      	bgt.n	8003200 <QHsm_tran_+0x374>
 80031f6:	f240 2112 	movw	r1, #530	@ 0x212
 80031fa:	480e      	ldr	r0, [pc, #56]	@ (8003234 <QHsm_tran_+0x3a8>)
 80031fc:	f7fd fc16 	bl	8000a2c <Q_onError>
                            QF_CRIT_EXIT();
 8003200:	f7ff f8de 	bl	80023c0 <QF_crit_exit_>
                    }
                }
            }
        }
    }
    QF_CRIT_ENTRY();
 8003204:	f7ff f8ca 	bl	800239c <QF_crit_entry_>
    Q_ENSURE_INCRIT(590, ip < QHSM_MAX_NEST_DEPTH_);
 8003208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800320a:	2b05      	cmp	r3, #5
 800320c:	dd04      	ble.n	8003218 <QHsm_tran_+0x38c>
 800320e:	f240 214e 	movw	r1, #590	@ 0x24e
 8003212:	4808      	ldr	r0, [pc, #32]	@ (8003234 <QHsm_tran_+0x3a8>)
 8003214:	f7fd fc0a 	bl	8000a2c <Q_onError>
    QF_CRIT_EXIT();
 8003218:	f7ff f8d2 	bl	80023c0 <QF_crit_exit_>
    return ip;
 800321c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800321e:	4618      	mov	r0, r3
 8003220:	3728      	adds	r7, #40	@ 0x28
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	080078f0 	.word	0x080078f0
 800322c:	20000a84 	.word	0x20000a84
 8003230:	080078e8 	.word	0x080078e8
 8003234:	080078e0 	.word	0x080078e0

08003238 <QHsm_top>:

//${QEP::QHsm::top} ..........................................................
//! @protected @memberof QAsm
QState QHsm_top(QHsm const * const me,
    QEvt const * const e)
{
 8003238:	b480      	push	{r7}
 800323a:	b083      	sub	sp, #12
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	6039      	str	r1, [r7, #0]
    Q_UNUSED_PAR(me);
    Q_UNUSED_PAR(e);
    return Q_RET_IGNORED; // the top state ignores all events
 8003242:	2304      	movs	r3, #4
}
 8003244:	4618      	mov	r0, r3
 8003246:	370c      	adds	r7, #12
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr

08003250 <QF_bzero_>:
//${QF::QF-pkg::bzero_} ......................................................
//! @static @private @memberof QF
void QF_bzero_(
    void * const start,
    uint_fast16_t const len)
{
 8003250:	b480      	push	{r7}
 8003252:	b085      	sub	sp, #20
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	6039      	str	r1, [r7, #0]
    uint8_t *ptr = (uint8_t *)start;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	60fb      	str	r3, [r7, #12]
    for (uint_fast16_t n = len; n > 0U; --n) {
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	60bb      	str	r3, [r7, #8]
 8003262:	e008      	b.n	8003276 <QF_bzero_+0x26>
        *ptr = 0U;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2200      	movs	r2, #0
 8003268:	701a      	strb	r2, [r3, #0]
        ++ptr;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	3301      	adds	r3, #1
 800326e:	60fb      	str	r3, [r7, #12]
    for (uint_fast16_t n = len; n > 0U; --n) {
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	3b01      	subs	r3, #1
 8003274:	60bb      	str	r3, [r7, #8]
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d1f3      	bne.n	8003264 <QF_bzero_+0x14>
    }
}
 800327c:	bf00      	nop
 800327e:	bf00      	nop
 8003280:	3714      	adds	r7, #20
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr

0800328a <QEvt_verify_>:
static inline bool QEvt_verify_(QEvt const * const me) {
 800328a:	b480      	push	{r7}
 800328c:	b083      	sub	sp, #12
 800328e:	af00      	add	r7, sp, #0
 8003290:	6078      	str	r0, [r7, #4]
           && ((me->evtTag_ & 0xF0U) == QEVT_MARKER);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d007      	beq.n	80032a8 <QEvt_verify_+0x1e>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	78db      	ldrb	r3, [r3, #3]
 800329c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80032a0:	2be0      	cmp	r3, #224	@ 0xe0
 80032a2:	d101      	bne.n	80032a8 <QEvt_verify_+0x1e>
 80032a4:	2301      	movs	r3, #1
 80032a6:	e000      	b.n	80032aa <QEvt_verify_+0x20>
 80032a8:	2300      	movs	r3, #0
 80032aa:	f003 0301 	and.w	r3, r3, #1
 80032ae:	b2db      	uxtb	r3, r3
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	370c      	adds	r7, #12
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr

080032bc <QEvt_getPoolNum_>:

//! @private @memberof QEvt
static inline uint_fast8_t QEvt_getPoolNum_(QEvt const * const me) {
 80032bc:	b480      	push	{r7}
 80032be:	b083      	sub	sp, #12
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
    return (uint_fast8_t)me->evtTag_ & 0x0FU;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	78db      	ldrb	r3, [r3, #3]
 80032c8:	f003 030f 	and.w	r3, r3, #15
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	370c      	adds	r7, #12
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr

080032d8 <QPSet_insert>:
}

//! @public @memberof QPSet
static inline void QPSet_insert(QPSet * const me,
    uint_fast8_t const n)
{
 80032d8:	b480      	push	{r7}
 80032da:	b083      	sub	sp, #12
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	6039      	str	r1, [r7, #0]
    #if (QF_MAX_ACTIVE <= 32U)
    me->bits[0] = (me->bits[0] | ((QPSetBits)1U << (n - 1U)));
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	3b01      	subs	r3, #1
 80032ea:	2101      	movs	r1, #1
 80032ec:	fa01 f303 	lsl.w	r3, r1, r3
 80032f0:	431a      	orrs	r2, r3
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	601a      	str	r2, [r3, #0]
    }
    else {
        me->bits[1] = (me->bits[1] | ((QPSetBits)1U << (n - 33U)));
    }
    #endif
}
 80032f6:	bf00      	nop
 80032f8:	370c      	adds	r7, #12
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr

08003302 <QPSet_update_>:

#ifndef Q_UNSAFE
//! @private @memberof QPSet
static inline void QPSet_update_(QPSet const * const me,
    QPSet * const dis)
{
 8003302:	b480      	push	{r7}
 8003304:	b083      	sub	sp, #12
 8003306:	af00      	add	r7, sp, #0
 8003308:	6078      	str	r0, [r7, #4]
 800330a:	6039      	str	r1, [r7, #0]
    dis->bits[0] = ~me->bits[0];
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	43da      	mvns	r2, r3
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	601a      	str	r2, [r3, #0]
    #if (QF_MAX_ACTIVE > 32U)
    dis->bits[1] = ~me->bits[1];
    #endif
}
 8003316:	bf00      	nop
 8003318:	370c      	adds	r7, #12
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr

08003322 <QEvt_refCtr_inc_>:
#define QTE_IS_LINKED      (1U << 7U)
#define QTE_WAS_DISARMED   (1U << 6U)
#define QTE_TICK_RATE      0x0FU

//! @private @memberof QEvt
static inline void QEvt_refCtr_inc_(QEvt const *me) {
 8003322:	b480      	push	{r7}
 8003324:	b083      	sub	sp, #12
 8003326:	af00      	add	r7, sp, #0
 8003328:	6078      	str	r0, [r7, #4]
    ++((QEvt *)me)->refCtr_;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	789b      	ldrb	r3, [r3, #2]
 800332e:	b2db      	uxtb	r3, r3
 8003330:	3301      	adds	r3, #1
 8003332:	b2da      	uxtb	r2, r3
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	709a      	strb	r2, [r3, #2]
}
 8003338:	bf00      	nop
 800333a:	370c      	adds	r7, #12
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr

08003344 <QActive_post_>:
//! @private @memberof QActive
bool QActive_post_(QActive * const me,
    QEvt const * const e,
    uint_fast16_t const margin,
    void const * const sender)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b086      	sub	sp, #24
 8003348:	af00      	add	r7, sp, #0
 800334a:	60f8      	str	r0, [r7, #12]
 800334c:	60b9      	str	r1, [r7, #8]
 800334e:	607a      	str	r2, [r7, #4]
 8003350:	603b      	str	r3, [r7, #0]
    }
    #endif
    #endif

    QF_CRIT_STAT
    QF_CRIT_ENTRY();
 8003352:	f7ff f823 	bl	800239c <QF_crit_entry_>
    QF_MEM_SYS();

    #ifndef Q_UNSAFE
    uint8_t const pcopy = (uint8_t)(~me->prio_dis);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800335c:	43db      	mvns	r3, r3
 800335e:	75bb      	strb	r3, [r7, #22]
    Q_REQUIRE_INCRIT(102, (QEvt_verify_(e)) && (me->prio == pcopy));
 8003360:	68b8      	ldr	r0, [r7, #8]
 8003362:	f7ff ff92 	bl	800328a <QEvt_verify_>
 8003366:	4603      	mov	r3, r0
 8003368:	2b00      	cmp	r3, #0
 800336a:	d004      	beq.n	8003376 <QActive_post_+0x32>
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	7b1b      	ldrb	r3, [r3, #12]
 8003370:	7dba      	ldrb	r2, [r7, #22]
 8003372:	429a      	cmp	r2, r3
 8003374:	d003      	beq.n	800337e <QActive_post_+0x3a>
 8003376:	2166      	movs	r1, #102	@ 0x66
 8003378:	4885      	ldr	r0, [pc, #532]	@ (8003590 <QActive_post_+0x24c>)
 800337a:	f7fd fb57 	bl	8000a2c <Q_onError>
    #endif

    QEQueueCtr nFree = me->eQueue.nFree; // get volatile into temporary
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	7fdb      	ldrb	r3, [r3, #31]
 8003382:	757b      	strb	r3, [r7, #21]
    QS_TEST_PROBE_ID(1,
        nFree = 0U;
    )

    bool status;
    if (margin == QF_NO_MARGIN) {
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800338a:	4293      	cmp	r3, r2
 800338c:	d10b      	bne.n	80033a6 <QActive_post_+0x62>
        if (nFree > 0U) {
 800338e:	7d7b      	ldrb	r3, [r7, #21]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d002      	beq.n	800339a <QActive_post_+0x56>
            status = true; // can post
 8003394:	2301      	movs	r3, #1
 8003396:	75fb      	strb	r3, [r7, #23]
 8003398:	e00f      	b.n	80033ba <QActive_post_+0x76>
        }
        else {
            status = false; // cannot post
 800339a:	2300      	movs	r3, #0
 800339c:	75fb      	strb	r3, [r7, #23]
            Q_ERROR_INCRIT(190); // must be able to post the event
 800339e:	21be      	movs	r1, #190	@ 0xbe
 80033a0:	487b      	ldr	r0, [pc, #492]	@ (8003590 <QActive_post_+0x24c>)
 80033a2:	f7fd fb43 	bl	8000a2c <Q_onError>
        }
    }
    else if (nFree > (QEQueueCtr)margin) {
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	7d7a      	ldrb	r2, [r7, #21]
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d902      	bls.n	80033b6 <QActive_post_+0x72>
        status = true; // can post
 80033b0:	2301      	movs	r3, #1
 80033b2:	75fb      	strb	r3, [r7, #23]
 80033b4:	e001      	b.n	80033ba <QActive_post_+0x76>
    }
    else {
        status = false; // cannot post, but don't assert
 80033b6:	2300      	movs	r3, #0
 80033b8:	75fb      	strb	r3, [r7, #23]
    }

    // is it a mutable event?
    if (QEvt_getPoolNum_(e) != 0U) {
 80033ba:	68b8      	ldr	r0, [r7, #8]
 80033bc:	f7ff ff7e 	bl	80032bc <QEvt_getPoolNum_>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d002      	beq.n	80033cc <QActive_post_+0x88>
        QEvt_refCtr_inc_(e); // increment the reference counter
 80033c6:	68b8      	ldr	r0, [r7, #8]
 80033c8:	f7ff ffab 	bl	8003322 <QEvt_refCtr_inc_>
    }

    if (status) { // can post the event?
 80033cc:	7dfb      	ldrb	r3, [r7, #23]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	f000 8090 	beq.w	80034f4 <QActive_post_+0x1b0>

        --nFree; // one free entry just used up
 80033d4:	7d7b      	ldrb	r3, [r7, #21]
 80033d6:	3b01      	subs	r3, #1
 80033d8:	757b      	strb	r3, [r7, #21]
        me->eQueue.nFree = nFree; // update the original
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	7d7a      	ldrb	r2, [r7, #21]
 80033de:	77da      	strb	r2, [r3, #31]
        if (me->eQueue.nMin > nFree) {
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033e6:	7d7a      	ldrb	r2, [r7, #21]
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d203      	bcs.n	80033f4 <QActive_post_+0xb0>
            me->eQueue.nMin = nFree; // increase minimum so far
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	7d7a      	ldrb	r2, [r7, #21]
 80033f0:	f883 2020 	strb.w	r2, [r3, #32]
        }

        QS_BEGIN_PRE_(QS_QF_ACTIVE_POST, me->prio)
 80033f4:	4b67      	ldr	r3, [pc, #412]	@ (8003594 <QActive_post_+0x250>)
 80033f6:	785b      	ldrb	r3, [r3, #1]
 80033f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d03e      	beq.n	800347e <QActive_post_+0x13a>
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	7b1b      	ldrb	r3, [r3, #12]
 8003404:	08db      	lsrs	r3, r3, #3
 8003406:	b2db      	uxtb	r3, r3
 8003408:	461a      	mov	r2, r3
 800340a:	4b62      	ldr	r3, [pc, #392]	@ (8003594 <QActive_post_+0x250>)
 800340c:	4413      	add	r3, r2
 800340e:	7c1b      	ldrb	r3, [r3, #16]
 8003410:	461a      	mov	r2, r3
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	7b1b      	ldrb	r3, [r3, #12]
 8003416:	f003 0307 	and.w	r3, r3, #7
 800341a:	fa22 f303 	lsr.w	r3, r2, r3
 800341e:	f003 0301 	and.w	r3, r3, #1
 8003422:	2b00      	cmp	r3, #0
 8003424:	d02b      	beq.n	800347e <QActive_post_+0x13a>
 8003426:	200e      	movs	r0, #14
 8003428:	f002 f9ce 	bl	80057c8 <QS_beginRec_>
            QS_TIME_PRE_();       // timestamp
 800342c:	f7fd f8b4 	bl	8000598 <QS_onGetTime>
 8003430:	4603      	mov	r3, r0
 8003432:	4618      	mov	r0, r3
 8003434:	f002 fc84 	bl	8005d40 <QS_u32_raw_>
            QS_OBJ_PRE_(sender);  // the sender object
 8003438:	6838      	ldr	r0, [r7, #0]
 800343a:	f002 fcf9 	bl	8005e30 <QS_obj_raw_>
            QS_SIG_PRE_(e->sig);  // the signal of the event
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	881b      	ldrh	r3, [r3, #0]
 8003442:	4618      	mov	r0, r3
 8003444:	f002 fbc8 	bl	8005bd8 <QS_u16_raw_>
            QS_OBJ_PRE_(me);      // this active object (recipient)
 8003448:	68f8      	ldr	r0, [r7, #12]
 800344a:	f002 fcf1 	bl	8005e30 <QS_obj_raw_>
            QS_2U8_PRE_(QEvt_getPoolNum_(e), e->refCtr_); // poolNum & refCtr
 800344e:	68b8      	ldr	r0, [r7, #8]
 8003450:	f7ff ff34 	bl	80032bc <QEvt_getPoolNum_>
 8003454:	4603      	mov	r3, r0
 8003456:	b2da      	uxtb	r2, r3
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	789b      	ldrb	r3, [r3, #2]
 800345c:	b2db      	uxtb	r3, r3
 800345e:	4619      	mov	r1, r3
 8003460:	4610      	mov	r0, r2
 8003462:	f002 fb11 	bl	8005a88 <QS_2u8_raw_>
            QS_EQC_PRE_(nFree);   // # free entries
 8003466:	7d7b      	ldrb	r3, [r7, #21]
 8003468:	4618      	mov	r0, r3
 800346a:	f002 faa7 	bl	80059bc <QS_u8_raw_>
            QS_EQC_PRE_(me->eQueue.nMin); // min # free entries
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003474:	4618      	mov	r0, r3
 8003476:	f002 faa1 	bl	80059bc <QS_u8_raw_>
        QS_END_PRE_()
 800347a:	f002 fa25 	bl	80058c8 <QS_endRec_>
        if (QS_LOC_CHECK_(me->prio)) {
            QS_onTestPost(sender, me, e, status);
        }
    #endif

        if (me->eQueue.frontEvt == (QEvt *)0) { // empty queue?
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	695b      	ldr	r3, [r3, #20]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d11a      	bne.n	80034bc <QActive_post_+0x178>
            me->eQueue.frontEvt = e; // deliver event directly
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	68ba      	ldr	r2, [r7, #8]
 800348a:	615a      	str	r2, [r3, #20]
            }
            else {
                QACTIVE_EQUEUE_SIGNAL_(me); // signal the event queue
            }
    #else
            QACTIVE_EQUEUE_SIGNAL_(me); // signal the event queue
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	7b1b      	ldrb	r3, [r3, #12]
 8003490:	4619      	mov	r1, r3
 8003492:	4841      	ldr	r0, [pc, #260]	@ (8003598 <QActive_post_+0x254>)
 8003494:	f7ff ff20 	bl	80032d8 <QPSet_insert>
 8003498:	4940      	ldr	r1, [pc, #256]	@ (800359c <QActive_post_+0x258>)
 800349a:	483f      	ldr	r0, [pc, #252]	@ (8003598 <QActive_post_+0x254>)
 800349c:	f7ff ff31 	bl	8003302 <QPSet_update_>
#define QK_ISR_CONTEXT_()     (QK_get_IPSR() != 0U)

__attribute__((always_inline))
static inline uint32_t QK_get_IPSR(void) {
    uint32_t regIPSR;
    __asm volatile ("mrs %0,ipsr" : "=r" (regIPSR));
 80034a0:	f3ef 8305 	mrs	r3, IPSR
 80034a4:	613b      	str	r3, [r7, #16]
    return regIPSR;
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d120      	bne.n	80034ee <QActive_post_+0x1aa>
 80034ac:	f001 fada 	bl	8004a64 <QK_sched_>
 80034b0:	4603      	mov	r3, r0
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d01b      	beq.n	80034ee <QActive_post_+0x1aa>
 80034b6:	f001 fb39 	bl	8004b2c <QK_activate_>
 80034ba:	e018      	b.n	80034ee <QActive_post_+0x1aa>
    #endif
        }
        // queue is not empty, insert event into the ring-buffer
        else {
            // insert event into the ring buffer (FIFO)
            me->eQueue.ring[me->eQueue.head] = e;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	699a      	ldr	r2, [r3, #24]
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	7f5b      	ldrb	r3, [r3, #29]
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	4413      	add	r3, r2
 80034ca:	68ba      	ldr	r2, [r7, #8]
 80034cc:	601a      	str	r2, [r3, #0]

            if (me->eQueue.head == 0U) { // need to wrap head?
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	7f5b      	ldrb	r3, [r3, #29]
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d103      	bne.n	80034e0 <QActive_post_+0x19c>
                me->eQueue.head = me->eQueue.end; // wrap around
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	7f1a      	ldrb	r2, [r3, #28]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	775a      	strb	r2, [r3, #29]
            }
            --me->eQueue.head; // advance the head (counter clockwise)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	7f5b      	ldrb	r3, [r3, #29]
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	3b01      	subs	r3, #1
 80034e8:	b2da      	uxtb	r2, r3
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	775a      	strb	r2, [r3, #29]
        }

        QF_MEM_APP();
        QF_CRIT_EXIT();
 80034ee:	f7fe ff67 	bl	80023c0 <QF_crit_exit_>
 80034f2:	e048      	b.n	8003586 <QActive_post_+0x242>
    }
    else { // cannot post the event

        QS_BEGIN_PRE_(QS_QF_ACTIVE_POST_ATTEMPT, me->prio)
 80034f4:	4b27      	ldr	r3, [pc, #156]	@ (8003594 <QActive_post_+0x250>)
 80034f6:	795b      	ldrb	r3, [r3, #5]
 80034f8:	f003 0320 	and.w	r3, r3, #32
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d03d      	beq.n	800357c <QActive_post_+0x238>
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	7b1b      	ldrb	r3, [r3, #12]
 8003504:	08db      	lsrs	r3, r3, #3
 8003506:	b2db      	uxtb	r3, r3
 8003508:	461a      	mov	r2, r3
 800350a:	4b22      	ldr	r3, [pc, #136]	@ (8003594 <QActive_post_+0x250>)
 800350c:	4413      	add	r3, r2
 800350e:	7c1b      	ldrb	r3, [r3, #16]
 8003510:	461a      	mov	r2, r3
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	7b1b      	ldrb	r3, [r3, #12]
 8003516:	f003 0307 	and.w	r3, r3, #7
 800351a:	fa22 f303 	lsr.w	r3, r2, r3
 800351e:	f003 0301 	and.w	r3, r3, #1
 8003522:	2b00      	cmp	r3, #0
 8003524:	d02a      	beq.n	800357c <QActive_post_+0x238>
 8003526:	202d      	movs	r0, #45	@ 0x2d
 8003528:	f002 f94e 	bl	80057c8 <QS_beginRec_>
            QS_TIME_PRE_();       // timestamp
 800352c:	f7fd f834 	bl	8000598 <QS_onGetTime>
 8003530:	4603      	mov	r3, r0
 8003532:	4618      	mov	r0, r3
 8003534:	f002 fc04 	bl	8005d40 <QS_u32_raw_>
            QS_OBJ_PRE_(sender);  // the sender object
 8003538:	6838      	ldr	r0, [r7, #0]
 800353a:	f002 fc79 	bl	8005e30 <QS_obj_raw_>
            QS_SIG_PRE_(e->sig);  // the signal of the event
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	881b      	ldrh	r3, [r3, #0]
 8003542:	4618      	mov	r0, r3
 8003544:	f002 fb48 	bl	8005bd8 <QS_u16_raw_>
            QS_OBJ_PRE_(me);      // this active object (recipient)
 8003548:	68f8      	ldr	r0, [r7, #12]
 800354a:	f002 fc71 	bl	8005e30 <QS_obj_raw_>
            QS_2U8_PRE_(QEvt_getPoolNum_(e), e->refCtr_); // poolNum & refCtr
 800354e:	68b8      	ldr	r0, [r7, #8]
 8003550:	f7ff feb4 	bl	80032bc <QEvt_getPoolNum_>
 8003554:	4603      	mov	r3, r0
 8003556:	b2da      	uxtb	r2, r3
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	789b      	ldrb	r3, [r3, #2]
 800355c:	b2db      	uxtb	r3, r3
 800355e:	4619      	mov	r1, r3
 8003560:	4610      	mov	r0, r2
 8003562:	f002 fa91 	bl	8005a88 <QS_2u8_raw_>
            QS_EQC_PRE_(nFree);   // # free entries
 8003566:	7d7b      	ldrb	r3, [r7, #21]
 8003568:	4618      	mov	r0, r3
 800356a:	f002 fa27 	bl	80059bc <QS_u8_raw_>
            QS_EQC_PRE_(margin);  // margin requested
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	b2db      	uxtb	r3, r3
 8003572:	4618      	mov	r0, r3
 8003574:	f002 fa22 	bl	80059bc <QS_u8_raw_>
        QS_END_PRE_()
 8003578:	f002 f9a6 	bl	80058c8 <QS_endRec_>
            QS_onTestPost(sender, me, e, status);
        }
    #endif

        QF_MEM_APP();
        QF_CRIT_EXIT();
 800357c:	f7fe ff20 	bl	80023c0 <QF_crit_exit_>

    #if (QF_MAX_EPOOL > 0U)
        QF_gc(e); // recycle the event to avoid a leak
 8003580:	68b8      	ldr	r0, [r7, #8]
 8003582:	f000 fa4f 	bl	8003a24 <QF_gc>
    #endif
    }

    return status;
 8003586:	7dfb      	ldrb	r3, [r7, #23]
}
 8003588:	4618      	mov	r0, r3
 800358a:	3718      	adds	r7, #24
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}
 8003590:	08007908 	.word	0x08007908
 8003594:	20000a84 	.word	0x20000a84
 8003598:	20000a58 	.word	0x20000a58
 800359c:	20000a70 	.word	0x20000a70

080035a0 <QActive_get_>:
//$enddef${QF::QActive::postLIFO_} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//$define${QF::QActive::get_} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

//${QF::QActive::get_} .......................................................
//! @private @memberof QActive
QEvt const * QActive_get_(QActive * const me) {
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b084      	sub	sp, #16
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
    QF_CRIT_STAT
    QF_CRIT_ENTRY();
 80035a8:	f7fe fef8 	bl	800239c <QF_crit_entry_>
    QF_MEM_SYS();

    QACTIVE_EQUEUE_WAIT_(me); // wait for event to arrive directly
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	695b      	ldr	r3, [r3, #20]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d104      	bne.n	80035be <QActive_get_+0x1e>
 80035b4:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 80035b8:	485b      	ldr	r0, [pc, #364]	@ (8003728 <QActive_get_+0x188>)
 80035ba:	f7fd fa37 	bl	8000a2c <Q_onError>

    // always remove event from the front
    QEvt const * const e = me->eQueue.frontEvt;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	695b      	ldr	r3, [r3, #20]
 80035c2:	60fb      	str	r3, [r7, #12]
    QEQueueCtr const nFree = me->eQueue.nFree + 1U; // get volatile into tmp
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	7fdb      	ldrb	r3, [r3, #31]
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	3301      	adds	r3, #1
 80035cc:	72fb      	strb	r3, [r7, #11]
    me->eQueue.nFree = nFree; // update the # free
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	7afa      	ldrb	r2, [r7, #11]
 80035d2:	77da      	strb	r2, [r3, #31]

    if (nFree <= me->eQueue.end) { // any events in the ring buffer?
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	7f1b      	ldrb	r3, [r3, #28]
 80035d8:	7afa      	ldrb	r2, [r7, #11]
 80035da:	429a      	cmp	r2, r3
 80035dc:	d856      	bhi.n	800368c <QActive_get_+0xec>
        // remove event from the tail
        me->eQueue.frontEvt = me->eQueue.ring[me->eQueue.tail];
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	699a      	ldr	r2, [r3, #24]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	7f9b      	ldrb	r3, [r3, #30]
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	4413      	add	r3, r2
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	615a      	str	r2, [r3, #20]
        if (me->eQueue.tail == 0U) { // need to wrap the tail?
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	7f9b      	ldrb	r3, [r3, #30]
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d103      	bne.n	8003604 <QActive_get_+0x64>
            me->eQueue.tail = me->eQueue.end; // wrap around
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	7f1a      	ldrb	r2, [r3, #28]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	779a      	strb	r2, [r3, #30]
        }
        --me->eQueue.tail;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	7f9b      	ldrb	r3, [r3, #30]
 8003608:	b2db      	uxtb	r3, r3
 800360a:	3b01      	subs	r3, #1
 800360c:	b2da      	uxtb	r2, r3
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	779a      	strb	r2, [r3, #30]

        QS_BEGIN_PRE_(QS_QF_ACTIVE_GET, me->prio)
 8003612:	4b46      	ldr	r3, [pc, #280]	@ (800372c <QActive_get_+0x18c>)
 8003614:	789b      	ldrb	r3, [r3, #2]
 8003616:	f003 0301 	and.w	r3, r3, #1
 800361a:	2b00      	cmp	r3, #0
 800361c:	d07c      	beq.n	8003718 <QActive_get_+0x178>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	7b1b      	ldrb	r3, [r3, #12]
 8003622:	08db      	lsrs	r3, r3, #3
 8003624:	b2db      	uxtb	r3, r3
 8003626:	461a      	mov	r2, r3
 8003628:	4b40      	ldr	r3, [pc, #256]	@ (800372c <QActive_get_+0x18c>)
 800362a:	4413      	add	r3, r2
 800362c:	7c1b      	ldrb	r3, [r3, #16]
 800362e:	461a      	mov	r2, r3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	7b1b      	ldrb	r3, [r3, #12]
 8003634:	f003 0307 	and.w	r3, r3, #7
 8003638:	fa22 f303 	lsr.w	r3, r2, r3
 800363c:	f003 0301 	and.w	r3, r3, #1
 8003640:	2b00      	cmp	r3, #0
 8003642:	d069      	beq.n	8003718 <QActive_get_+0x178>
 8003644:	2010      	movs	r0, #16
 8003646:	f002 f8bf 	bl	80057c8 <QS_beginRec_>
            QS_TIME_PRE_();       // timestamp
 800364a:	f7fc ffa5 	bl	8000598 <QS_onGetTime>
 800364e:	4603      	mov	r3, r0
 8003650:	4618      	mov	r0, r3
 8003652:	f002 fb75 	bl	8005d40 <QS_u32_raw_>
            QS_SIG_PRE_(e->sig);  // the signal of this event
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	881b      	ldrh	r3, [r3, #0]
 800365a:	4618      	mov	r0, r3
 800365c:	f002 fabc 	bl	8005bd8 <QS_u16_raw_>
            QS_OBJ_PRE_(me);      // this active object
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	f002 fbe5 	bl	8005e30 <QS_obj_raw_>
            QS_2U8_PRE_(QEvt_getPoolNum_(e), e->refCtr_); // poolNum & refCtr
 8003666:	68f8      	ldr	r0, [r7, #12]
 8003668:	f7ff fe28 	bl	80032bc <QEvt_getPoolNum_>
 800366c:	4603      	mov	r3, r0
 800366e:	b2da      	uxtb	r2, r3
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	789b      	ldrb	r3, [r3, #2]
 8003674:	b2db      	uxtb	r3, r3
 8003676:	4619      	mov	r1, r3
 8003678:	4610      	mov	r0, r2
 800367a:	f002 fa05 	bl	8005a88 <QS_2u8_raw_>
            QS_EQC_PRE_(nFree);   // # free entries
 800367e:	7afb      	ldrb	r3, [r7, #11]
 8003680:	4618      	mov	r0, r3
 8003682:	f002 f99b 	bl	80059bc <QS_u8_raw_>
        QS_END_PRE_()
 8003686:	f002 f91f 	bl	80058c8 <QS_endRec_>
 800368a:	e045      	b.n	8003718 <QActive_get_+0x178>
    }
    else {
        me->eQueue.frontEvt = (QEvt *)0; // queue becomes empty
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2200      	movs	r2, #0
 8003690:	615a      	str	r2, [r3, #20]

        // all entries in the queue must be free (+1 for fronEvt)
        Q_ASSERT_INCRIT(310, nFree == (me->eQueue.end + 1U));
 8003692:	7afa      	ldrb	r2, [r7, #11]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	7f1b      	ldrb	r3, [r3, #28]
 8003698:	3301      	adds	r3, #1
 800369a:	429a      	cmp	r2, r3
 800369c:	d004      	beq.n	80036a8 <QActive_get_+0x108>
 800369e:	f44f 719b 	mov.w	r1, #310	@ 0x136
 80036a2:	4821      	ldr	r0, [pc, #132]	@ (8003728 <QActive_get_+0x188>)
 80036a4:	f7fd f9c2 	bl	8000a2c <Q_onError>

        QS_BEGIN_PRE_(QS_QF_ACTIVE_GET_LAST, me->prio)
 80036a8:	4b20      	ldr	r3, [pc, #128]	@ (800372c <QActive_get_+0x18c>)
 80036aa:	789b      	ldrb	r3, [r3, #2]
 80036ac:	f003 0302 	and.w	r3, r3, #2
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d031      	beq.n	8003718 <QActive_get_+0x178>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	7b1b      	ldrb	r3, [r3, #12]
 80036b8:	08db      	lsrs	r3, r3, #3
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	461a      	mov	r2, r3
 80036be:	4b1b      	ldr	r3, [pc, #108]	@ (800372c <QActive_get_+0x18c>)
 80036c0:	4413      	add	r3, r2
 80036c2:	7c1b      	ldrb	r3, [r3, #16]
 80036c4:	461a      	mov	r2, r3
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	7b1b      	ldrb	r3, [r3, #12]
 80036ca:	f003 0307 	and.w	r3, r3, #7
 80036ce:	fa22 f303 	lsr.w	r3, r2, r3
 80036d2:	f003 0301 	and.w	r3, r3, #1
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d01e      	beq.n	8003718 <QActive_get_+0x178>
 80036da:	2011      	movs	r0, #17
 80036dc:	f002 f874 	bl	80057c8 <QS_beginRec_>
            QS_TIME_PRE_();       // timestamp
 80036e0:	f7fc ff5a 	bl	8000598 <QS_onGetTime>
 80036e4:	4603      	mov	r3, r0
 80036e6:	4618      	mov	r0, r3
 80036e8:	f002 fb2a 	bl	8005d40 <QS_u32_raw_>
            QS_SIG_PRE_(e->sig);  // the signal of this event
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	881b      	ldrh	r3, [r3, #0]
 80036f0:	4618      	mov	r0, r3
 80036f2:	f002 fa71 	bl	8005bd8 <QS_u16_raw_>
            QS_OBJ_PRE_(me);      // this active object
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f002 fb9a 	bl	8005e30 <QS_obj_raw_>
            QS_2U8_PRE_(QEvt_getPoolNum_(e), e->refCtr_); // poolNum & refCtr
 80036fc:	68f8      	ldr	r0, [r7, #12]
 80036fe:	f7ff fddd 	bl	80032bc <QEvt_getPoolNum_>
 8003702:	4603      	mov	r3, r0
 8003704:	b2da      	uxtb	r2, r3
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	789b      	ldrb	r3, [r3, #2]
 800370a:	b2db      	uxtb	r3, r3
 800370c:	4619      	mov	r1, r3
 800370e:	4610      	mov	r0, r2
 8003710:	f002 f9ba 	bl	8005a88 <QS_2u8_raw_>
        QS_END_PRE_()
 8003714:	f002 f8d8 	bl	80058c8 <QS_endRec_>
    }

    QF_MEM_APP();
    QF_CRIT_EXIT();
 8003718:	f7fe fe52 	bl	80023c0 <QF_crit_exit_>

    return e;
 800371c:	68fb      	ldr	r3, [r7, #12]
}
 800371e:	4618      	mov	r0, r3
 8003720:	3710      	adds	r7, #16
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}
 8003726:	bf00      	nop
 8003728:	08007908 	.word	0x08007908
 800372c:	20000a84 	.word	0x20000a84

08003730 <QEvt_verify_>:
static inline bool QEvt_verify_(QEvt const * const me) {
 8003730:	b480      	push	{r7}
 8003732:	b083      	sub	sp, #12
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
           && ((me->evtTag_ & 0xF0U) == QEVT_MARKER);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d007      	beq.n	800374e <QEvt_verify_+0x1e>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	78db      	ldrb	r3, [r3, #3]
 8003742:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003746:	2be0      	cmp	r3, #224	@ 0xe0
 8003748:	d101      	bne.n	800374e <QEvt_verify_+0x1e>
 800374a:	2301      	movs	r3, #1
 800374c:	e000      	b.n	8003750 <QEvt_verify_+0x20>
 800374e:	2300      	movs	r3, #0
 8003750:	f003 0301 	and.w	r3, r3, #1
 8003754:	b2db      	uxtb	r3, r3
}
 8003756:	4618      	mov	r0, r3
 8003758:	370c      	adds	r7, #12
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr

08003762 <QEvt_getPoolNum_>:
static inline uint_fast8_t QEvt_getPoolNum_(QEvt const * const me) {
 8003762:	b480      	push	{r7}
 8003764:	b083      	sub	sp, #12
 8003766:	af00      	add	r7, sp, #0
 8003768:	6078      	str	r0, [r7, #4]
    return (uint_fast8_t)me->evtTag_ & 0x0FU;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	78db      	ldrb	r3, [r3, #3]
 800376e:	f003 030f 	and.w	r3, r3, #15
}
 8003772:	4618      	mov	r0, r3
 8003774:	370c      	adds	r7, #12
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr

0800377e <QEvt_refCtr_dec_>:

//! @private @memberof QEvt
static inline void QEvt_refCtr_dec_(QEvt const *me) {
 800377e:	b480      	push	{r7}
 8003780:	b083      	sub	sp, #12
 8003782:	af00      	add	r7, sp, #0
 8003784:	6078      	str	r0, [r7, #4]
    --((QEvt *)me)->refCtr_;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	789b      	ldrb	r3, [r3, #2]
 800378a:	b2db      	uxtb	r3, r3
 800378c:	3b01      	subs	r3, #1
 800378e:	b2da      	uxtb	r2, r3
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	709a      	strb	r2, [r3, #2]
}
 8003794:	bf00      	nop
 8003796:	370c      	adds	r7, #12
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr

080037a0 <QF_poolInit>:
//! @static @public @memberof QF
void QF_poolInit(
    void * const poolSto,
    uint_fast32_t const poolSize,
    uint_fast16_t const evtSize)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b088      	sub	sp, #32
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	60f8      	str	r0, [r7, #12]
 80037a8:	60b9      	str	r1, [r7, #8]
 80037aa:	607a      	str	r2, [r7, #4]
    uint_fast8_t const poolNum = QF_priv_.maxPool_;
 80037ac:	4b27      	ldr	r3, [pc, #156]	@ (800384c <QF_poolInit+0xac>)
 80037ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037b0:	61fb      	str	r3, [r7, #28]

    // see precondition{qf_dyn,200} and precondition{qf_dyn,201}
    QF_CRIT_STAT
    QF_CRIT_ENTRY();
 80037b2:	f7fe fdf3 	bl	800239c <QF_crit_entry_>
    QF_MEM_SYS();

    Q_REQUIRE_INCRIT(200, poolNum < QF_MAX_EPOOL);
 80037b6:	69fb      	ldr	r3, [r7, #28]
 80037b8:	2b02      	cmp	r3, #2
 80037ba:	d903      	bls.n	80037c4 <QF_poolInit+0x24>
 80037bc:	21c8      	movs	r1, #200	@ 0xc8
 80037be:	4824      	ldr	r0, [pc, #144]	@ (8003850 <QF_poolInit+0xb0>)
 80037c0:	f7fd f934 	bl	8000a2c <Q_onError>
    if (poolNum > 0U) {
 80037c4:	69fb      	ldr	r3, [r7, #28]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d011      	beq.n	80037ee <QF_poolInit+0x4e>
        Q_REQUIRE_INCRIT(201,
 80037ca:	69fb      	ldr	r3, [r7, #28]
 80037cc:	1e5a      	subs	r2, r3, #1
 80037ce:	491f      	ldr	r1, [pc, #124]	@ (800384c <QF_poolInit+0xac>)
 80037d0:	4613      	mov	r3, r2
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	4413      	add	r3, r2
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	440b      	add	r3, r1
 80037da:	330c      	adds	r3, #12
 80037dc:	881b      	ldrh	r3, [r3, #0]
 80037de:	461a      	mov	r2, r3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d803      	bhi.n	80037ee <QF_poolInit+0x4e>
 80037e6:	21c9      	movs	r1, #201	@ 0xc9
 80037e8:	4819      	ldr	r0, [pc, #100]	@ (8003850 <QF_poolInit+0xb0>)
 80037ea:	f7fd f91f 	bl	8000a2c <Q_onError>
            QF_EPOOL_EVENT_SIZE_(QF_priv_.ePool_[poolNum - 1U]) < evtSize);
    }
    QF_priv_.maxPool_ = poolNum + 1U; // one more pool
 80037ee:	69fb      	ldr	r3, [r7, #28]
 80037f0:	3301      	adds	r3, #1
 80037f2:	4a16      	ldr	r2, [pc, #88]	@ (800384c <QF_poolInit+0xac>)
 80037f4:	63d3      	str	r3, [r2, #60]	@ 0x3c

    QF_MEM_APP();
    QF_CRIT_EXIT();
 80037f6:	f7fe fde3 	bl	80023c0 <QF_crit_exit_>

    // perform the port-dependent initialization of the event-pool
    QF_EPOOL_INIT_(QF_priv_.ePool_[poolNum], poolSto, poolSize, evtSize);
 80037fa:	69fa      	ldr	r2, [r7, #28]
 80037fc:	4613      	mov	r3, r2
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	4413      	add	r3, r2
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	4a11      	ldr	r2, [pc, #68]	@ (800384c <QF_poolInit+0xac>)
 8003806:	1898      	adds	r0, r3, r2
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	68ba      	ldr	r2, [r7, #8]
 800380c:	68f9      	ldr	r1, [r7, #12]
 800380e:	f000 f9b5 	bl	8003b7c <QMPool_init>

    #ifdef Q_SPY
    // generate the object-dictionary entry for the initialized pool
    {
        uint8_t obj_name[9] = "EvtPool?";
 8003812:	4a10      	ldr	r2, [pc, #64]	@ (8003854 <QF_poolInit+0xb4>)
 8003814:	f107 0310 	add.w	r3, r7, #16
 8003818:	ca07      	ldmia	r2, {r0, r1, r2}
 800381a:	c303      	stmia	r3!, {r0, r1}
 800381c:	701a      	strb	r2, [r3, #0]
        obj_name[7] = (uint8_t)((uint8_t)'0' + poolNum + 1U);
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	b2db      	uxtb	r3, r3
 8003822:	3331      	adds	r3, #49	@ 0x31
 8003824:	b2db      	uxtb	r3, r3
 8003826:	75fb      	strb	r3, [r7, #23]
        QS_obj_dict_pre_(&QF_priv_.ePool_[poolNum], (char const *)obj_name);
 8003828:	69fa      	ldr	r2, [r7, #28]
 800382a:	4613      	mov	r3, r2
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	4413      	add	r3, r2
 8003830:	009b      	lsls	r3, r3, #2
 8003832:	4a06      	ldr	r2, [pc, #24]	@ (800384c <QF_poolInit+0xac>)
 8003834:	4413      	add	r3, r2
 8003836:	f107 0210 	add.w	r2, r7, #16
 800383a:	4611      	mov	r1, r2
 800383c:	4618      	mov	r0, r3
 800383e:	f002 fbe9 	bl	8006014 <QS_obj_dict_pre_>
    }
    #endif // Q_SPY
}
 8003842:	bf00      	nop
 8003844:	3720      	adds	r7, #32
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	200009fc 	.word	0x200009fc
 8003850:	08007910 	.word	0x08007910
 8003854:	08007874 	.word	0x08007874

08003858 <QF_poolGetMaxBlockSize>:

//${QF::QF-dyn::poolGetMaxBlockSize} .........................................
//! @static @public @memberof QF
uint_fast16_t QF_poolGetMaxBlockSize(void) {
 8003858:	b580      	push	{r7, lr}
 800385a:	b082      	sub	sp, #8
 800385c:	af00      	add	r7, sp, #0
    QF_CRIT_STAT
    QF_CRIT_ENTRY();
 800385e:	f7fe fd9d 	bl	800239c <QF_crit_entry_>
    QF_MEM_SYS();
    uint_fast16_t const max_size =
        QF_EPOOL_EVENT_SIZE_(QF_priv_.ePool_[QF_priv_.maxPool_ - 1U]);
 8003862:	4b09      	ldr	r3, [pc, #36]	@ (8003888 <QF_poolGetMaxBlockSize+0x30>)
 8003864:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003866:	1e5a      	subs	r2, r3, #1
 8003868:	4907      	ldr	r1, [pc, #28]	@ (8003888 <QF_poolGetMaxBlockSize+0x30>)
 800386a:	4613      	mov	r3, r2
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	4413      	add	r3, r2
 8003870:	009b      	lsls	r3, r3, #2
 8003872:	440b      	add	r3, r1
 8003874:	330c      	adds	r3, #12
 8003876:	881b      	ldrh	r3, [r3, #0]
    uint_fast16_t const max_size =
 8003878:	607b      	str	r3, [r7, #4]
    QF_MEM_APP();
    QF_CRIT_EXIT();
 800387a:	f7fe fda1 	bl	80023c0 <QF_crit_exit_>

    return max_size;
 800387e:	687b      	ldr	r3, [r7, #4]
}
 8003880:	4618      	mov	r0, r3
 8003882:	3708      	adds	r7, #8
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}
 8003888:	200009fc 	.word	0x200009fc

0800388c <QF_newX_>:
//! @static @private @memberof QF
QEvt * QF_newX_(
    uint_fast16_t const evtSize,
    uint_fast16_t const margin,
    enum_t const sig)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b086      	sub	sp, #24
 8003890:	af00      	add	r7, sp, #0
 8003892:	60f8      	str	r0, [r7, #12]
 8003894:	60b9      	str	r1, [r7, #8]
 8003896:	607a      	str	r2, [r7, #4]
    QF_CRIT_STAT
    QF_CRIT_ENTRY();
 8003898:	f7fe fd80 	bl	800239c <QF_crit_entry_>
    QF_MEM_SYS();

    // find the pool id that fits the requested event size...
    uint_fast8_t poolNum = 0U; // zero-based poolNum initially
 800389c:	2300      	movs	r3, #0
 800389e:	617b      	str	r3, [r7, #20]
    for (; poolNum < QF_priv_.maxPool_; ++poolNum) {
 80038a0:	e00f      	b.n	80038c2 <QF_newX_+0x36>
        if (evtSize <= QF_EPOOL_EVENT_SIZE_(QF_priv_.ePool_[poolNum])) {
 80038a2:	495d      	ldr	r1, [pc, #372]	@ (8003a18 <QF_newX_+0x18c>)
 80038a4:	697a      	ldr	r2, [r7, #20]
 80038a6:	4613      	mov	r3, r2
 80038a8:	009b      	lsls	r3, r3, #2
 80038aa:	4413      	add	r3, r2
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	440b      	add	r3, r1
 80038b0:	330c      	adds	r3, #12
 80038b2:	881b      	ldrh	r3, [r3, #0]
 80038b4:	461a      	mov	r2, r3
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d908      	bls.n	80038ce <QF_newX_+0x42>
    for (; poolNum < QF_priv_.maxPool_; ++poolNum) {
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	3301      	adds	r3, #1
 80038c0:	617b      	str	r3, [r7, #20]
 80038c2:	4b55      	ldr	r3, [pc, #340]	@ (8003a18 <QF_newX_+0x18c>)
 80038c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038c6:	697a      	ldr	r2, [r7, #20]
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d3ea      	bcc.n	80038a2 <QF_newX_+0x16>
 80038cc:	e000      	b.n	80038d0 <QF_newX_+0x44>
            break;
 80038ce:	bf00      	nop
        }
    }

    // precondition:
    // - cannot run out of registered pools
    Q_REQUIRE_INCRIT(300, poolNum < QF_priv_.maxPool_);
 80038d0:	4b51      	ldr	r3, [pc, #324]	@ (8003a18 <QF_newX_+0x18c>)
 80038d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038d4:	697a      	ldr	r2, [r7, #20]
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d304      	bcc.n	80038e4 <QF_newX_+0x58>
 80038da:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 80038de:	484f      	ldr	r0, [pc, #316]	@ (8003a1c <QF_newX_+0x190>)
 80038e0:	f7fd f8a4 	bl	8000a2c <Q_onError>

    ++poolNum; // convert to 1-based poolNum
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	3301      	adds	r3, #1
 80038e8:	617b      	str	r3, [r7, #20]

    QF_MEM_APP();
    QF_CRIT_EXIT();
 80038ea:	f7fe fd69 	bl	80023c0 <QF_crit_exit_>

    // get event e (port-dependent)...
    QEvt *e;
    #ifdef Q_SPY
    QF_EPOOL_GET_(QF_priv_.ePool_[poolNum - 1U], e,
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	1e5a      	subs	r2, r3, #1
 80038f2:	4613      	mov	r3, r2
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	4413      	add	r3, r2
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	4a47      	ldr	r2, [pc, #284]	@ (8003a18 <QF_newX_+0x18c>)
 80038fc:	1898      	adds	r0, r3, r2
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003904:	4293      	cmp	r3, r2
 8003906:	d001      	beq.n	800390c <QF_newX_+0x80>
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	e000      	b.n	800390e <QF_newX_+0x82>
 800390c:	2300      	movs	r3, #0
 800390e:	697a      	ldr	r2, [r7, #20]
 8003910:	3240      	adds	r2, #64	@ 0x40
 8003912:	4619      	mov	r1, r3
 8003914:	f000 f9b6 	bl	8003c84 <QMPool_get>
 8003918:	6138      	str	r0, [r7, #16]
    #else
    QF_EPOOL_GET_(QF_priv_.ePool_[poolNum - 1U], e,
                  ((margin != QF_NO_MARGIN) ? margin : 0U), 0U);
    #endif

    if (e != (QEvt *)0) { // was e allocated correctly?
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d03d      	beq.n	800399c <QF_newX_+0x110>
        e->sig     = (QSignal)sig; // set the signal
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	b29a      	uxth	r2, r3
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	801a      	strh	r2, [r3, #0]
        e->refCtr_ = 0U; // initialize the reference counter to 0
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	2200      	movs	r2, #0
 800392c:	709a      	strb	r2, [r3, #2]
        e->evtTag_ = (uint8_t)(QEVT_MARKER | poolNum);
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	b2db      	uxtb	r3, r3
 8003932:	f063 031f 	orn	r3, r3, #31
 8003936:	b2da      	uxtb	r2, r3
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	70da      	strb	r2, [r3, #3]

        QS_CRIT_ENTRY();
 800393c:	f7fe fd2e 	bl	800239c <QF_crit_entry_>
        QS_MEM_SYS();
        QS_BEGIN_PRE_(QS_QF_NEW,
 8003940:	4b37      	ldr	r3, [pc, #220]	@ (8003a20 <QF_newX_+0x194>)
 8003942:	78db      	ldrb	r3, [r3, #3]
 8003944:	f003 0310 	and.w	r3, r3, #16
 8003948:	2b00      	cmp	r3, #0
 800394a:	d024      	beq.n	8003996 <QF_newX_+0x10a>
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	3340      	adds	r3, #64	@ 0x40
 8003950:	08db      	lsrs	r3, r3, #3
 8003952:	4a33      	ldr	r2, [pc, #204]	@ (8003a20 <QF_newX_+0x194>)
 8003954:	4413      	add	r3, r2
 8003956:	7c1b      	ldrb	r3, [r3, #16]
 8003958:	461a      	mov	r2, r3
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	f003 0307 	and.w	r3, r3, #7
 8003960:	fa22 f303 	lsr.w	r3, r2, r3
 8003964:	f003 0301 	and.w	r3, r3, #1
 8003968:	2b00      	cmp	r3, #0
 800396a:	d014      	beq.n	8003996 <QF_newX_+0x10a>
 800396c:	201c      	movs	r0, #28
 800396e:	f001 ff2b 	bl	80057c8 <QS_beginRec_>
                (uint_fast8_t)QS_EP_ID + poolNum)
            QS_TIME_PRE_();        // timestamp
 8003972:	f7fc fe11 	bl	8000598 <QS_onGetTime>
 8003976:	4603      	mov	r3, r0
 8003978:	4618      	mov	r0, r3
 800397a:	f002 f9e1 	bl	8005d40 <QS_u32_raw_>
            QS_EVS_PRE_(evtSize);  // the size of the event
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	b29b      	uxth	r3, r3
 8003982:	4618      	mov	r0, r3
 8003984:	f002 f928 	bl	8005bd8 <QS_u16_raw_>
            QS_SIG_PRE_(sig);      // the signal of the event
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	b29b      	uxth	r3, r3
 800398c:	4618      	mov	r0, r3
 800398e:	f002 f923 	bl	8005bd8 <QS_u16_raw_>
        QS_END_PRE_()
 8003992:	f001 ff99 	bl	80058c8 <QS_endRec_>
        QS_MEM_APP();
        QS_CRIT_EXIT();
 8003996:	f7fe fd13 	bl	80023c0 <QF_crit_exit_>
 800399a:	e037      	b.n	8003a0c <QF_newX_+0x180>
    }
    else { // event was not allocated

        QF_CRIT_ENTRY();
 800399c:	f7fe fcfe 	bl	800239c <QF_crit_entry_>
        // This assertion means that the event allocation failed,
        // and this failure cannot be tolerated. The most frequent
        // reason is an event leak in the application.
        Q_ASSERT_INCRIT(320, margin != QF_NO_MARGIN);
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d104      	bne.n	80039b4 <QF_newX_+0x128>
 80039aa:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 80039ae:	481b      	ldr	r0, [pc, #108]	@ (8003a1c <QF_newX_+0x190>)
 80039b0:	f7fd f83c 	bl	8000a2c <Q_onError>

        QS_MEM_SYS();
        QS_BEGIN_PRE_(QS_QF_NEW_ATTEMPT,
 80039b4:	4b1a      	ldr	r3, [pc, #104]	@ (8003a20 <QF_newX_+0x194>)
 80039b6:	789b      	ldrb	r3, [r3, #2]
 80039b8:	b25b      	sxtb	r3, r3
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	da24      	bge.n	8003a08 <QF_newX_+0x17c>
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	3340      	adds	r3, #64	@ 0x40
 80039c2:	08db      	lsrs	r3, r3, #3
 80039c4:	4a16      	ldr	r2, [pc, #88]	@ (8003a20 <QF_newX_+0x194>)
 80039c6:	4413      	add	r3, r2
 80039c8:	7c1b      	ldrb	r3, [r3, #16]
 80039ca:	461a      	mov	r2, r3
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	f003 0307 	and.w	r3, r3, #7
 80039d2:	fa22 f303 	lsr.w	r3, r2, r3
 80039d6:	f003 0301 	and.w	r3, r3, #1
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d014      	beq.n	8003a08 <QF_newX_+0x17c>
 80039de:	2017      	movs	r0, #23
 80039e0:	f001 fef2 	bl	80057c8 <QS_beginRec_>
                (uint_fast8_t)QS_EP_ID + poolNum)
            QS_TIME_PRE_();        // timestamp
 80039e4:	f7fc fdd8 	bl	8000598 <QS_onGetTime>
 80039e8:	4603      	mov	r3, r0
 80039ea:	4618      	mov	r0, r3
 80039ec:	f002 f9a8 	bl	8005d40 <QS_u32_raw_>
            QS_EVS_PRE_(evtSize);  // the size of the event
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	b29b      	uxth	r3, r3
 80039f4:	4618      	mov	r0, r3
 80039f6:	f002 f8ef 	bl	8005bd8 <QS_u16_raw_>
            QS_SIG_PRE_(sig);      // the signal of the event
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	4618      	mov	r0, r3
 8003a00:	f002 f8ea 	bl	8005bd8 <QS_u16_raw_>
        QS_END_PRE_()
 8003a04:	f001 ff60 	bl	80058c8 <QS_endRec_>
        QS_MEM_APP();

        QF_CRIT_EXIT();
 8003a08:	f7fe fcda 	bl	80023c0 <QF_crit_exit_>
    }

    // the returned event e is guaranteed to be valid (not NULL)
    // if we can't tolerate failed allocation
    return e;
 8003a0c:	693b      	ldr	r3, [r7, #16]
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3718      	adds	r7, #24
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	200009fc 	.word	0x200009fc
 8003a1c:	08007910 	.word	0x08007910
 8003a20:	20000a84 	.word	0x20000a84

08003a24 <QF_gc>:

//${QF::QF-dyn::gc} ..........................................................
//! @static @public @memberof QF
void QF_gc(QEvt const * const e) {
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b084      	sub	sp, #16
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
    QF_CRIT_STAT
    QF_CRIT_ENTRY();
 8003a2c:	f7fe fcb6 	bl	800239c <QF_crit_entry_>
    Q_REQUIRE_INCRIT(402, QEvt_verify_(e));
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f7ff fe7d 	bl	8003730 <QEvt_verify_>
 8003a36:	4603      	mov	r3, r0
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d104      	bne.n	8003a46 <QF_gc+0x22>
 8003a3c:	f44f 71c9 	mov.w	r1, #402	@ 0x192
 8003a40:	484b      	ldr	r0, [pc, #300]	@ (8003b70 <QF_gc+0x14c>)
 8003a42:	f7fc fff3 	bl	8000a2c <Q_onError>

    uint_fast8_t const poolNum = QEvt_getPoolNum_(e);
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f7ff fe8b 	bl	8003762 <QEvt_getPoolNum_>
 8003a4c:	60f8      	str	r0, [r7, #12]

    if (poolNum != 0U) { // is it a pool event (mutable)?
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	f000 8087 	beq.w	8003b64 <QF_gc+0x140>
        QF_MEM_SYS();

        if (e->refCtr_ > 1U) { // isn't this the last reference?
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	789b      	ldrb	r3, [r3, #2]
 8003a5a:	b2db      	uxtb	r3, r3
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d934      	bls.n	8003aca <QF_gc+0xa6>

            QS_BEGIN_PRE_(QS_QF_GC_ATTEMPT,
 8003a60:	4b44      	ldr	r3, [pc, #272]	@ (8003b74 <QF_gc+0x150>)
 8003a62:	78db      	ldrb	r3, [r3, #3]
 8003a64:	f003 0320 	and.w	r3, r3, #32
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d028      	beq.n	8003abe <QF_gc+0x9a>
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	3340      	adds	r3, #64	@ 0x40
 8003a70:	08db      	lsrs	r3, r3, #3
 8003a72:	4a40      	ldr	r2, [pc, #256]	@ (8003b74 <QF_gc+0x150>)
 8003a74:	4413      	add	r3, r2
 8003a76:	7c1b      	ldrb	r3, [r3, #16]
 8003a78:	461a      	mov	r2, r3
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	f003 0307 	and.w	r3, r3, #7
 8003a80:	fa22 f303 	lsr.w	r3, r2, r3
 8003a84:	f003 0301 	and.w	r3, r3, #1
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d018      	beq.n	8003abe <QF_gc+0x9a>
 8003a8c:	201d      	movs	r0, #29
 8003a8e:	f001 fe9b 	bl	80057c8 <QS_beginRec_>
                    (uint_fast8_t)QS_EP_ID + poolNum)
                QS_TIME_PRE_();       // timestamp
 8003a92:	f7fc fd81 	bl	8000598 <QS_onGetTime>
 8003a96:	4603      	mov	r3, r0
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f002 f951 	bl	8005d40 <QS_u32_raw_>
                QS_SIG_PRE_(e->sig);  // the signal of the event
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	881b      	ldrh	r3, [r3, #0]
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f002 f898 	bl	8005bd8 <QS_u16_raw_>
                QS_2U8_PRE_(poolNum, e->refCtr_); // poolNum & refCtr
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	b2da      	uxtb	r2, r3
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	789b      	ldrb	r3, [r3, #2]
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	4619      	mov	r1, r3
 8003ab4:	4610      	mov	r0, r2
 8003ab6:	f001 ffe7 	bl	8005a88 <QS_2u8_raw_>
            QS_END_PRE_()
 8003aba:	f001 ff05 	bl	80058c8 <QS_endRec_>

            QEvt_refCtr_dec_(e); // decrement the ref counter
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f7ff fe5d 	bl	800377e <QEvt_refCtr_dec_>

            QF_MEM_APP();
            QF_CRIT_EXIT();
 8003ac4:	f7fe fc7c 	bl	80023c0 <QF_crit_exit_>
        }
    }
    else {
        QF_CRIT_EXIT();
    }
}
 8003ac8:	e04e      	b.n	8003b68 <QF_gc+0x144>
            QS_BEGIN_PRE_(QS_QF_GC,
 8003aca:	4b2a      	ldr	r3, [pc, #168]	@ (8003b74 <QF_gc+0x150>)
 8003acc:	78db      	ldrb	r3, [r3, #3]
 8003ace:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d028      	beq.n	8003b28 <QF_gc+0x104>
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	3340      	adds	r3, #64	@ 0x40
 8003ada:	08db      	lsrs	r3, r3, #3
 8003adc:	4a25      	ldr	r2, [pc, #148]	@ (8003b74 <QF_gc+0x150>)
 8003ade:	4413      	add	r3, r2
 8003ae0:	7c1b      	ldrb	r3, [r3, #16]
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f003 0307 	and.w	r3, r3, #7
 8003aea:	fa22 f303 	lsr.w	r3, r2, r3
 8003aee:	f003 0301 	and.w	r3, r3, #1
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d018      	beq.n	8003b28 <QF_gc+0x104>
 8003af6:	201e      	movs	r0, #30
 8003af8:	f001 fe66 	bl	80057c8 <QS_beginRec_>
                QS_TIME_PRE_();       // timestamp
 8003afc:	f7fc fd4c 	bl	8000598 <QS_onGetTime>
 8003b00:	4603      	mov	r3, r0
 8003b02:	4618      	mov	r0, r3
 8003b04:	f002 f91c 	bl	8005d40 <QS_u32_raw_>
                QS_SIG_PRE_(e->sig);  // the signal of the event
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	881b      	ldrh	r3, [r3, #0]
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f002 f863 	bl	8005bd8 <QS_u16_raw_>
                QS_2U8_PRE_(poolNum, e->refCtr_); // poolNum & refCtr
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	b2da      	uxtb	r2, r3
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	789b      	ldrb	r3, [r3, #2]
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	4619      	mov	r1, r3
 8003b1e:	4610      	mov	r0, r2
 8003b20:	f001 ffb2 	bl	8005a88 <QS_2u8_raw_>
            QS_END_PRE_()
 8003b24:	f001 fed0 	bl	80058c8 <QS_endRec_>
            Q_ASSERT_INCRIT(410, (poolNum <= QF_priv_.maxPool_)
 8003b28:	4b13      	ldr	r3, [pc, #76]	@ (8003b78 <QF_gc+0x154>)
 8003b2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b2c:	68fa      	ldr	r2, [r7, #12]
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	d802      	bhi.n	8003b38 <QF_gc+0x114>
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2b03      	cmp	r3, #3
 8003b36:	d904      	bls.n	8003b42 <QF_gc+0x11e>
 8003b38:	f44f 71cd 	mov.w	r1, #410	@ 0x19a
 8003b3c:	480c      	ldr	r0, [pc, #48]	@ (8003b70 <QF_gc+0x14c>)
 8003b3e:	f7fc ff75 	bl	8000a2c <Q_onError>
            QF_CRIT_EXIT();
 8003b42:	f7fe fc3d 	bl	80023c0 <QF_crit_exit_>
            QF_EPOOL_PUT_(QF_priv_.ePool_[poolNum - 1U],
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	1e5a      	subs	r2, r3, #1
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	4413      	add	r3, r2
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	4a09      	ldr	r2, [pc, #36]	@ (8003b78 <QF_gc+0x154>)
 8003b54:	1898      	adds	r0, r3, r2
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	3340      	adds	r3, #64	@ 0x40
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	6879      	ldr	r1, [r7, #4]
 8003b5e:	f000 f959 	bl	8003e14 <QMPool_put>
}
 8003b62:	e001      	b.n	8003b68 <QF_gc+0x144>
        QF_CRIT_EXIT();
 8003b64:	f7fe fc2c 	bl	80023c0 <QF_crit_exit_>
}
 8003b68:	bf00      	nop
 8003b6a:	3710      	adds	r7, #16
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}
 8003b70:	08007910 	.word	0x08007910
 8003b74:	20000a84 	.word	0x20000a84
 8003b78:	200009fc 	.word	0x200009fc

08003b7c <QMPool_init>:
//! @public @memberof QMPool
void QMPool_init(QMPool * const me,
    void * const poolSto,
    uint_fast32_t const poolSize,
    uint_fast16_t const blockSize)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b088      	sub	sp, #32
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	60f8      	str	r0, [r7, #12]
 8003b84:	60b9      	str	r1, [r7, #8]
 8003b86:	607a      	str	r2, [r7, #4]
 8003b88:	603b      	str	r3, [r7, #0]
    QF_CRIT_STAT
    QF_CRIT_ENTRY();
 8003b8a:	f7fe fc07 	bl	800239c <QF_crit_entry_>
    QF_MEM_SYS();

    Q_REQUIRE_INCRIT(100, (poolSto != (void *)0)
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d006      	beq.n	8003ba2 <QMPool_init+0x26>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2b07      	cmp	r3, #7
 8003b98:	d903      	bls.n	8003ba2 <QMPool_init+0x26>
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	f113 0f09 	cmn.w	r3, #9
 8003ba0:	d903      	bls.n	8003baa <QMPool_init+0x2e>
 8003ba2:	2164      	movs	r1, #100	@ 0x64
 8003ba4:	4836      	ldr	r0, [pc, #216]	@ (8003c80 <QMPool_init+0x104>)
 8003ba6:	f7fc ff41 	bl	8000a2c <Q_onError>
            && (poolSize >= (uint_fast32_t)sizeof(QFreeBlock))
            && ((uint_fast16_t)(blockSize + sizeof(QFreeBlock)) > blockSize));

    me->free_head = (QFreeBlock *)poolSto;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	68ba      	ldr	r2, [r7, #8]
 8003bae:	609a      	str	r2, [r3, #8]

    // find # free blocks in a memory block, NO DIVISION
    me->blockSize = (QMPoolSize)sizeof(QFreeBlock);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2208      	movs	r2, #8
 8003bb4:	819a      	strh	r2, [r3, #12]
    uint_fast16_t nblocks = 1U;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	61fb      	str	r3, [r7, #28]
    while (me->blockSize < (QMPoolSize)blockSize) {
 8003bba:	e008      	b.n	8003bce <QMPool_init+0x52>
        me->blockSize += (QMPoolSize)sizeof(QFreeBlock);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	899b      	ldrh	r3, [r3, #12]
 8003bc0:	3308      	adds	r3, #8
 8003bc2:	b29a      	uxth	r2, r3
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	819a      	strh	r2, [r3, #12]
        ++nblocks;
 8003bc8:	69fb      	ldr	r3, [r7, #28]
 8003bca:	3301      	adds	r3, #1
 8003bcc:	61fb      	str	r3, [r7, #28]
    while (me->blockSize < (QMPoolSize)blockSize) {
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	899a      	ldrh	r2, [r3, #12]
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d3f0      	bcc.n	8003bbc <QMPool_init+0x40>
    }

    // the pool buffer must fit at least one rounded-up block
    Q_ASSERT_INCRIT(110, poolSize >= me->blockSize);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	899b      	ldrh	r3, [r3, #12]
 8003bde:	461a      	mov	r2, r3
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d203      	bcs.n	8003bee <QMPool_init+0x72>
 8003be6:	216e      	movs	r1, #110	@ 0x6e
 8003be8:	4825      	ldr	r0, [pc, #148]	@ (8003c80 <QMPool_init+0x104>)
 8003bea:	f7fc ff1f 	bl	8000a2c <Q_onError>

    // start at the head of the free list
    QFreeBlock *fb = me->free_head;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	61bb      	str	r3, [r7, #24]
    me->nTot = 1U; // the last block already in the list
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	81da      	strh	r2, [r3, #14]

    // chain all blocks together in a free-list...
    for (uint_fast32_t size = poolSize - me->blockSize;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	899b      	ldrh	r3, [r3, #12]
 8003bfe:	461a      	mov	r2, r3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	1a9b      	subs	r3, r3, r2
 8003c04:	617b      	str	r3, [r7, #20]
 8003c06:	e019      	b.n	8003c3c <QMPool_init+0xc0>
         size >= (uint_fast32_t)me->blockSize;
         size -= (uint_fast32_t)me->blockSize)
    {
        fb->next = &fb[nblocks]; // point next link to next block
 8003c08:	69fb      	ldr	r3, [r7, #28]
 8003c0a:	00db      	lsls	r3, r3, #3
 8003c0c:	69ba      	ldr	r2, [r7, #24]
 8003c0e:	441a      	add	r2, r3
 8003c10:	69bb      	ldr	r3, [r7, #24]
 8003c12:	601a      	str	r2, [r3, #0]
    #ifndef Q_UNSAFE
        fb->next_dis = (uintptr_t)(~Q_UINTPTR_CAST_(fb->next));
 8003c14:	69bb      	ldr	r3, [r7, #24]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	43da      	mvns	r2, r3
 8003c1a:	69bb      	ldr	r3, [r7, #24]
 8003c1c:	605a      	str	r2, [r3, #4]
    #endif
        fb = fb->next;           // advance to the next block
 8003c1e:	69bb      	ldr	r3, [r7, #24]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	61bb      	str	r3, [r7, #24]
        ++me->nTot;              // one more free block in the pool
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	89db      	ldrh	r3, [r3, #14]
 8003c28:	3301      	adds	r3, #1
 8003c2a:	b29a      	uxth	r2, r3
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	81da      	strh	r2, [r3, #14]
         size -= (uint_fast32_t)me->blockSize)
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	899b      	ldrh	r3, [r3, #12]
 8003c34:	461a      	mov	r2, r3
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	1a9b      	subs	r3, r3, r2
 8003c3a:	617b      	str	r3, [r7, #20]
         size >= (uint_fast32_t)me->blockSize;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	899b      	ldrh	r3, [r3, #12]
 8003c40:	461a      	mov	r2, r3
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d2df      	bcs.n	8003c08 <QMPool_init+0x8c>
    }

    fb->next  = (QFreeBlock *)0; // the last link points to NULL
 8003c48:	69bb      	ldr	r3, [r7, #24]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	601a      	str	r2, [r3, #0]
    #ifndef Q_UNSAFE
    fb->next_dis = (uintptr_t)(~Q_UINTPTR_CAST_(fb->next));
 8003c4e:	69bb      	ldr	r3, [r7, #24]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	43da      	mvns	r2, r3
 8003c54:	69bb      	ldr	r3, [r7, #24]
 8003c56:	605a      	str	r2, [r3, #4]
    #endif

    me->nFree = me->nTot;        // all blocks are free
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	89da      	ldrh	r2, [r3, #14]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	821a      	strh	r2, [r3, #16]
    me->nMin  = me->nTot;        // the minimum # free blocks
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	89da      	ldrh	r2, [r3, #14]
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	825a      	strh	r2, [r3, #18]
    me->start = (QFreeBlock *)poolSto; // the original start this pool buffer
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	68ba      	ldr	r2, [r7, #8]
 8003c6c:	601a      	str	r2, [r3, #0]
    me->end   = fb;              // the last block in this pool
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	69ba      	ldr	r2, [r7, #24]
 8003c72:	605a      	str	r2, [r3, #4]

    QF_MEM_APP();
    QF_CRIT_EXIT();
 8003c74:	f7fe fba4 	bl	80023c0 <QF_crit_exit_>
}
 8003c78:	bf00      	nop
 8003c7a:	3720      	adds	r7, #32
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}
 8003c80:	08007918 	.word	0x08007918

08003c84 <QMPool_get>:
//${QF::QMPool::get} .........................................................
//! @public @memberof QMPool
void * QMPool_get(QMPool * const me,
    uint_fast16_t const margin,
    uint_fast8_t const qsId)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b086      	sub	sp, #24
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	60f8      	str	r0, [r7, #12]
 8003c8c:	60b9      	str	r1, [r7, #8]
 8003c8e:	607a      	str	r2, [r7, #4]
    #ifndef Q_SPY
    Q_UNUSED_PAR(qsId);
    #endif

    QF_CRIT_STAT
    QF_CRIT_ENTRY();
 8003c90:	f7fe fb84 	bl	800239c <QF_crit_entry_>
    QF_MEM_SYS();

    // have more free blocks than the requested margin?
    QFreeBlock *fb;
    if (me->nFree > (QMPoolCtr)margin) {
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	8a1b      	ldrh	r3, [r3, #16]
 8003c98:	b29a      	uxth	r2, r3
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	b29b      	uxth	r3, r3
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d97d      	bls.n	8003d9e <QMPool_get+0x11a>
        fb = me->free_head; // get a free block
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	617b      	str	r3, [r7, #20]

        //  a free block must be valid
        Q_ASSERT_INCRIT(300, fb != (QFreeBlock *)0);
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d104      	bne.n	8003cb8 <QMPool_get+0x34>
 8003cae:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8003cb2:	4856      	ldr	r0, [pc, #344]	@ (8003e0c <QMPool_get+0x188>)
 8003cb4:	f7fc feba 	bl	8000a2c <Q_onError>

        QFreeBlock * const fb_next = fb->next; // fast temporary
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	613b      	str	r3, [r7, #16]

        // the free block must have integrity (duplicate inverse storage)
        Q_ASSERT_INCRIT(302, Q_UINTPTR_CAST_(fb_next)
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	43da      	mvns	r2, r3
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d004      	beq.n	8003cd4 <QMPool_get+0x50>
 8003cca:	f44f 7197 	mov.w	r1, #302	@ 0x12e
 8003cce:	484f      	ldr	r0, [pc, #316]	@ (8003e0c <QMPool_get+0x188>)
 8003cd0:	f7fc feac 	bl	8000a2c <Q_onError>
                              == (uintptr_t)~fb->next_dis);

        --me->nFree; // one less free block
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	8a1b      	ldrh	r3, [r3, #16]
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	3b01      	subs	r3, #1
 8003cdc:	b29a      	uxth	r2, r3
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	821a      	strh	r2, [r3, #16]
        if (me->nFree == 0U) { // is the pool becoming empty?
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	8a1b      	ldrh	r3, [r3, #16]
 8003ce6:	b29b      	uxth	r3, r3
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d10b      	bne.n	8003d04 <QMPool_get+0x80>
            // pool is becoming empty, so the next free block must be NULL
            Q_ASSERT_INCRIT(320, fb_next == (QFreeBlock *)0);
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d004      	beq.n	8003cfc <QMPool_get+0x78>
 8003cf2:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 8003cf6:	4845      	ldr	r0, [pc, #276]	@ (8003e0c <QMPool_get+0x188>)
 8003cf8:	f7fc fe98 	bl	8000a2c <Q_onError>

            me->nMin = 0U; // remember that the pool got empty
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	825a      	strh	r2, [r3, #18]
 8003d02:	e01a      	b.n	8003d3a <QMPool_get+0xb6>
            // so the next free block must be in range.

            // NOTE: The next free block pointer can fall out of range
            // when the client code writes past the memory block, thus
            // corrupting the next block.
            Q_ASSERT_INCRIT(330,
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	693a      	ldr	r2, [r7, #16]
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	d304      	bcc.n	8003d18 <QMPool_get+0x94>
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	693a      	ldr	r2, [r7, #16]
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d904      	bls.n	8003d22 <QMPool_get+0x9e>
 8003d18:	f44f 71a5 	mov.w	r1, #330	@ 0x14a
 8003d1c:	483b      	ldr	r0, [pc, #236]	@ (8003e0c <QMPool_get+0x188>)
 8003d1e:	f7fc fe85 	bl	8000a2c <Q_onError>
                (me->start <= fb_next) && (fb_next <= me->end));

            // is the # free blocks the new minimum so far?
            if (me->nMin > me->nFree) {
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	8a5a      	ldrh	r2, [r3, #18]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	8a1b      	ldrh	r3, [r3, #16]
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d904      	bls.n	8003d3a <QMPool_get+0xb6>
                me->nMin = me->nFree; // remember the new minimum
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	8a1b      	ldrh	r3, [r3, #16]
 8003d34:	b29a      	uxth	r2, r3
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	825a      	strh	r2, [r3, #18]
            }
        }

        me->free_head = fb_next; // set the head to the next free block
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	693a      	ldr	r2, [r7, #16]
 8003d3e:	609a      	str	r2, [r3, #8]

        QS_BEGIN_PRE_(QS_QF_MPOOL_GET, qsId)
 8003d40:	4b33      	ldr	r3, [pc, #204]	@ (8003e10 <QMPool_get+0x18c>)
 8003d42:	78db      	ldrb	r3, [r3, #3]
 8003d44:	f003 0301 	and.w	r3, r3, #1
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d057      	beq.n	8003dfc <QMPool_get+0x178>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	08db      	lsrs	r3, r3, #3
 8003d50:	4a2f      	ldr	r2, [pc, #188]	@ (8003e10 <QMPool_get+0x18c>)
 8003d52:	4413      	add	r3, r2
 8003d54:	7c1b      	ldrb	r3, [r3, #16]
 8003d56:	461a      	mov	r2, r3
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	f003 0307 	and.w	r3, r3, #7
 8003d5e:	fa22 f303 	lsr.w	r3, r2, r3
 8003d62:	f003 0301 	and.w	r3, r3, #1
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d048      	beq.n	8003dfc <QMPool_get+0x178>
 8003d6a:	2018      	movs	r0, #24
 8003d6c:	f001 fd2c 	bl	80057c8 <QS_beginRec_>
            QS_TIME_PRE_();         // timestamp
 8003d70:	f7fc fc12 	bl	8000598 <QS_onGetTime>
 8003d74:	4603      	mov	r3, r0
 8003d76:	4618      	mov	r0, r3
 8003d78:	f001 ffe2 	bl	8005d40 <QS_u32_raw_>
            QS_OBJ_PRE_(me);        // this memory pool
 8003d7c:	68f8      	ldr	r0, [r7, #12]
 8003d7e:	f002 f857 	bl	8005e30 <QS_obj_raw_>
            QS_MPC_PRE_(me->nFree); // # of free blocks in the pool
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	8a1b      	ldrh	r3, [r3, #16]
 8003d86:	b29b      	uxth	r3, r3
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f001 ff25 	bl	8005bd8 <QS_u16_raw_>
            QS_MPC_PRE_(me->nMin);  // min # free blocks ever in the pool
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	8a5b      	ldrh	r3, [r3, #18]
 8003d92:	4618      	mov	r0, r3
 8003d94:	f001 ff20 	bl	8005bd8 <QS_u16_raw_>
        QS_END_PRE_()
 8003d98:	f001 fd96 	bl	80058c8 <QS_endRec_>
 8003d9c:	e02e      	b.n	8003dfc <QMPool_get+0x178>
    }
    else { // don't have enough free blocks at this point
        fb = (QFreeBlock *)0;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	617b      	str	r3, [r7, #20]

        QS_BEGIN_PRE_(QS_QF_MPOOL_GET_ATTEMPT, qsId)
 8003da2:	4b1b      	ldr	r3, [pc, #108]	@ (8003e10 <QMPool_get+0x18c>)
 8003da4:	795b      	ldrb	r3, [r3, #5]
 8003da6:	b25b      	sxtb	r3, r3
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	da27      	bge.n	8003dfc <QMPool_get+0x178>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	08db      	lsrs	r3, r3, #3
 8003db0:	4a17      	ldr	r2, [pc, #92]	@ (8003e10 <QMPool_get+0x18c>)
 8003db2:	4413      	add	r3, r2
 8003db4:	7c1b      	ldrb	r3, [r3, #16]
 8003db6:	461a      	mov	r2, r3
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	f003 0307 	and.w	r3, r3, #7
 8003dbe:	fa22 f303 	lsr.w	r3, r2, r3
 8003dc2:	f003 0301 	and.w	r3, r3, #1
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d018      	beq.n	8003dfc <QMPool_get+0x178>
 8003dca:	202f      	movs	r0, #47	@ 0x2f
 8003dcc:	f001 fcfc 	bl	80057c8 <QS_beginRec_>
            QS_TIME_PRE_();         // timestamp
 8003dd0:	f7fc fbe2 	bl	8000598 <QS_onGetTime>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f001 ffb2 	bl	8005d40 <QS_u32_raw_>
            QS_OBJ_PRE_(me);        // this memory pool
 8003ddc:	68f8      	ldr	r0, [r7, #12]
 8003dde:	f002 f827 	bl	8005e30 <QS_obj_raw_>
            QS_MPC_PRE_(me->nFree); // # of free blocks in the pool
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	8a1b      	ldrh	r3, [r3, #16]
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	4618      	mov	r0, r3
 8003dea:	f001 fef5 	bl	8005bd8 <QS_u16_raw_>
            QS_MPC_PRE_(margin);    // the requested margin
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	b29b      	uxth	r3, r3
 8003df2:	4618      	mov	r0, r3
 8003df4:	f001 fef0 	bl	8005bd8 <QS_u16_raw_>
        QS_END_PRE_()
 8003df8:	f001 fd66 	bl	80058c8 <QS_endRec_>
    }

    QF_MEM_APP();
    QF_CRIT_EXIT();
 8003dfc:	f7fe fae0 	bl	80023c0 <QF_crit_exit_>

    return fb; // return the block or NULL pointer to the caller
 8003e00:	697b      	ldr	r3, [r7, #20]
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3718      	adds	r7, #24
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	08007918 	.word	0x08007918
 8003e10:	20000a84 	.word	0x20000a84

08003e14 <QMPool_put>:
//${QF::QMPool::put} .........................................................
//! @public @memberof QMPool
void QMPool_put(QMPool * const me,
    void * const block,
    uint_fast8_t const qsId)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b086      	sub	sp, #24
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	60f8      	str	r0, [r7, #12]
 8003e1c:	60b9      	str	r1, [r7, #8]
 8003e1e:	607a      	str	r2, [r7, #4]
    #ifndef Q_SPY
    Q_UNUSED_PAR(qsId);
    #endif

    QFreeBlock * const fb = (QFreeBlock *)block;
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	617b      	str	r3, [r7, #20]

    QF_CRIT_STAT
    QF_CRIT_ENTRY();
 8003e24:	f7fe faba 	bl	800239c <QF_crit_entry_>
    QF_MEM_SYS();

    Q_REQUIRE_INCRIT(200, (me->nFree < me->nTot)
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	8a1b      	ldrh	r3, [r3, #16]
 8003e2c:	b29a      	uxth	r2, r3
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	89db      	ldrh	r3, [r3, #14]
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d209      	bcs.n	8003e4a <QMPool_put+0x36>
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	697a      	ldr	r2, [r7, #20]
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d304      	bcc.n	8003e4a <QMPool_put+0x36>
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	697a      	ldr	r2, [r7, #20]
 8003e46:	429a      	cmp	r2, r3
 8003e48:	d903      	bls.n	8003e52 <QMPool_put+0x3e>
 8003e4a:	21c8      	movs	r1, #200	@ 0xc8
 8003e4c:	4822      	ldr	r0, [pc, #136]	@ (8003ed8 <QMPool_put+0xc4>)
 8003e4e:	f7fc fded 	bl	8000a2c <Q_onError>
                           && (me->start <= fb) && (fb <= me->end));

    fb->next = me->free_head; // link into list
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	689a      	ldr	r2, [r3, #8]
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	601a      	str	r2, [r3, #0]
    #ifndef Q_UNSAFE
    fb->next_dis = (uintptr_t)(~Q_UINTPTR_CAST_(fb->next));
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	43da      	mvns	r2, r3
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	605a      	str	r2, [r3, #4]
    #endif

    // set as new head of the free list
    me->free_head = fb;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	697a      	ldr	r2, [r7, #20]
 8003e68:	609a      	str	r2, [r3, #8]

    ++me->nFree; // one more free block in this pool
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	8a1b      	ldrh	r3, [r3, #16]
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	3301      	adds	r3, #1
 8003e72:	b29a      	uxth	r2, r3
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	821a      	strh	r2, [r3, #16]

    QS_BEGIN_PRE_(QS_QF_MPOOL_PUT, qsId)
 8003e78:	4b18      	ldr	r3, [pc, #96]	@ (8003edc <QMPool_put+0xc8>)
 8003e7a:	78db      	ldrb	r3, [r3, #3]
 8003e7c:	f003 0302 	and.w	r3, r3, #2
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d022      	beq.n	8003eca <QMPool_put+0xb6>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	08db      	lsrs	r3, r3, #3
 8003e88:	4a14      	ldr	r2, [pc, #80]	@ (8003edc <QMPool_put+0xc8>)
 8003e8a:	4413      	add	r3, r2
 8003e8c:	7c1b      	ldrb	r3, [r3, #16]
 8003e8e:	461a      	mov	r2, r3
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	f003 0307 	and.w	r3, r3, #7
 8003e96:	fa22 f303 	lsr.w	r3, r2, r3
 8003e9a:	f003 0301 	and.w	r3, r3, #1
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d013      	beq.n	8003eca <QMPool_put+0xb6>
 8003ea2:	2019      	movs	r0, #25
 8003ea4:	f001 fc90 	bl	80057c8 <QS_beginRec_>
        QS_TIME_PRE_();         // timestamp
 8003ea8:	f7fc fb76 	bl	8000598 <QS_onGetTime>
 8003eac:	4603      	mov	r3, r0
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f001 ff46 	bl	8005d40 <QS_u32_raw_>
        QS_OBJ_PRE_(me);        // this memory pool
 8003eb4:	68f8      	ldr	r0, [r7, #12]
 8003eb6:	f001 ffbb 	bl	8005e30 <QS_obj_raw_>
        QS_MPC_PRE_(me->nFree); // the # free blocks in the pool
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	8a1b      	ldrh	r3, [r3, #16]
 8003ebe:	b29b      	uxth	r3, r3
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f001 fe89 	bl	8005bd8 <QS_u16_raw_>
    QS_END_PRE_()
 8003ec6:	f001 fcff 	bl	80058c8 <QS_endRec_>

    QF_MEM_APP();
    QF_CRIT_EXIT();
 8003eca:	f7fe fa79 	bl	80023c0 <QF_crit_exit_>
}
 8003ece:	bf00      	nop
 8003ed0:	3718      	adds	r7, #24
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	08007918 	.word	0x08007918
 8003edc:	20000a84 	.word	0x20000a84

08003ee0 <QEvt_getPoolNum_>:
static inline uint_fast8_t QEvt_getPoolNum_(QEvt const * const me) {
 8003ee0:	b480      	push	{r7}
 8003ee2:	b083      	sub	sp, #12
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
    return (uint_fast8_t)me->evtTag_ & 0x0FU;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	78db      	ldrb	r3, [r3, #3]
 8003eec:	f003 030f 	and.w	r3, r3, #15
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	370c      	adds	r7, #12
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr

08003efc <QPSet_setEmpty>:
static inline void QPSet_setEmpty(QPSet * const me) {
 8003efc:	b480      	push	{r7}
 8003efe:	b083      	sub	sp, #12
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
    me->bits[0] = 0U;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2200      	movs	r2, #0
 8003f08:	601a      	str	r2, [r3, #0]
}
 8003f0a:	bf00      	nop
 8003f0c:	370c      	adds	r7, #12
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr

08003f16 <QPSet_notEmpty>:
static inline bool QPSet_notEmpty(QPSet const * const me) {
 8003f16:	b480      	push	{r7}
 8003f18:	b083      	sub	sp, #12
 8003f1a:	af00      	add	r7, sp, #0
 8003f1c:	6078      	str	r0, [r7, #4]
    return (me->bits[0] != 0U);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	bf14      	ite	ne
 8003f26:	2301      	movne	r3, #1
 8003f28:	2300      	moveq	r3, #0
 8003f2a:	b2db      	uxtb	r3, r3
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	370c      	adds	r7, #12
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr

08003f38 <QPSet_remove>:
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b083      	sub	sp, #12
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	6039      	str	r1, [r7, #0]
    me->bits[0] = (me->bits[0] & (QPSetBits)(~((QPSetBits)1U << (n - 1U))));
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	3b01      	subs	r3, #1
 8003f4a:	2101      	movs	r1, #1
 8003f4c:	fa01 f303 	lsl.w	r3, r1, r3
 8003f50:	43db      	mvns	r3, r3
 8003f52:	401a      	ands	r2, r3
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	601a      	str	r2, [r3, #0]
}
 8003f58:	bf00      	nop
 8003f5a:	370c      	adds	r7, #12
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr

08003f64 <QPSet_findMax>:
static inline uint_fast8_t QPSet_findMax(QPSet const * const me) {
 8003f64:	b480      	push	{r7}
 8003f66:	b083      	sub	sp, #12
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
    return QF_LOG2(me->bits[0]);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	fab3 f383 	clz	r3, r3
 8003f74:	f1c3 0320 	rsb	r3, r3, #32
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	370c      	adds	r7, #12
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr

08003f84 <QPSet_update_>:
{
 8003f84:	b480      	push	{r7}
 8003f86:	b083      	sub	sp, #12
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
 8003f8c:	6039      	str	r1, [r7, #0]
    dis->bits[0] = ~me->bits[0];
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	43da      	mvns	r2, r3
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	601a      	str	r2, [r3, #0]
}
 8003f98:	bf00      	nop
 8003f9a:	370c      	adds	r7, #12
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa2:	4770      	bx	lr

08003fa4 <QPSet_verify_>:

#ifndef Q_UNSAFE
//! @private @memberof QPSet
static inline bool QPSet_verify_(QPSet const * const me,
    QPSet const * const dis)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b083      	sub	sp, #12
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	6039      	str	r1, [r7, #0]
    #if (QF_MAX_ACTIVE <= 32U)
    return me->bits[0] == (QPSetBits)(~dis->bits[0]);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	43db      	mvns	r3, r3
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	bf0c      	ite	eq
 8003fbc:	2301      	moveq	r3, #1
 8003fbe:	2300      	movne	r3, #0
 8003fc0:	b2db      	uxtb	r3, r3
    #else
    return (me->bits[0] == (QPSetBits)(~dis->bits[0]))
           && (me->bits[1] == (QPSetBits)(~dis->bits[1]));
    #endif
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	370c      	adds	r7, #12
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr

08003fce <QEvt_refCtr_inc_>:
static inline void QEvt_refCtr_inc_(QEvt const *me) {
 8003fce:	b480      	push	{r7}
 8003fd0:	b083      	sub	sp, #12
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	6078      	str	r0, [r7, #4]
    ++((QEvt *)me)->refCtr_;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	789b      	ldrb	r3, [r3, #2]
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	3301      	adds	r3, #1
 8003fde:	b2da      	uxtb	r2, r3
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	709a      	strb	r2, [r3, #2]
}
 8003fe4:	bf00      	nop
 8003fe6:	370c      	adds	r7, #12
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fee:	4770      	bx	lr

08003ff0 <QActive_psInit>:
//${QF::QActive::psInit} .....................................................
//! @static @public @memberof QActive
void QActive_psInit(
    QSubscrList * const subscrSto,
    enum_t const maxSignal)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b084      	sub	sp, #16
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
 8003ff8:	6039      	str	r1, [r7, #0]
    QActive_subscrList_   = subscrSto;
 8003ffa:	4a14      	ldr	r2, [pc, #80]	@ (800404c <QActive_psInit+0x5c>)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6013      	str	r3, [r2, #0]
    QActive_maxPubSignal_ = maxSignal;
 8004000:	4a13      	ldr	r2, [pc, #76]	@ (8004050 <QActive_psInit+0x60>)
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	6013      	str	r3, [r2, #0]

    // initialize the subscriber list
    for (enum_t sig = 0; sig < maxSignal; ++sig) {
 8004006:	2300      	movs	r3, #0
 8004008:	60fb      	str	r3, [r7, #12]
 800400a:	e016      	b.n	800403a <QActive_psInit+0x4a>
        QPSet_setEmpty(&subscrSto[sig].set);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	00db      	lsls	r3, r3, #3
 8004010:	687a      	ldr	r2, [r7, #4]
 8004012:	4413      	add	r3, r2
 8004014:	4618      	mov	r0, r3
 8004016:	f7ff ff71 	bl	8003efc <QPSet_setEmpty>
    #ifndef Q_UNSAFE
        QPSet_update_(&subscrSto[sig].set, &subscrSto[sig].set_dis);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	00db      	lsls	r3, r3, #3
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	4413      	add	r3, r2
 8004022:	4618      	mov	r0, r3
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	00db      	lsls	r3, r3, #3
 8004028:	687a      	ldr	r2, [r7, #4]
 800402a:	4413      	add	r3, r2
 800402c:	3304      	adds	r3, #4
 800402e:	4619      	mov	r1, r3
 8004030:	f7ff ffa8 	bl	8003f84 <QPSet_update_>
    for (enum_t sig = 0; sig < maxSignal; ++sig) {
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	3301      	adds	r3, #1
 8004038:	60fb      	str	r3, [r7, #12]
 800403a:	68fa      	ldr	r2, [r7, #12]
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	429a      	cmp	r2, r3
 8004040:	dbe4      	blt.n	800400c <QActive_psInit+0x1c>
    #endif
    }
}
 8004042:	bf00      	nop
 8004044:	bf00      	nop
 8004046:	3710      	adds	r7, #16
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}
 800404c:	20000a3c 	.word	0x20000a3c
 8004050:	20000a40 	.word	0x20000a40

08004054 <QActive_publish_>:
//! @static @private @memberof QActive
void QActive_publish_(
    QEvt const * const e,
    void const * const sender,
    uint_fast8_t const qsId)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b08c      	sub	sp, #48	@ 0x30
 8004058:	af00      	add	r7, sp, #0
 800405a:	60f8      	str	r0, [r7, #12]
 800405c:	60b9      	str	r1, [r7, #8]
 800405e:	607a      	str	r2, [r7, #4]
    #ifndef Q_SPY
    Q_UNUSED_PAR(sender);
    Q_UNUSED_PAR(qsId);
    #endif

    QSignal const sig = e->sig;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	881b      	ldrh	r3, [r3, #0]
 8004064:	83fb      	strh	r3, [r7, #30]

    QF_CRIT_STAT
    QF_CRIT_ENTRY();
 8004066:	f7fe f999 	bl	800239c <QF_crit_entry_>
    QF_MEM_SYS();

    Q_REQUIRE_INCRIT(200, sig < (QSignal)QActive_maxPubSignal_);
 800406a:	4b71      	ldr	r3, [pc, #452]	@ (8004230 <QActive_publish_+0x1dc>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	b29b      	uxth	r3, r3
 8004070:	8bfa      	ldrh	r2, [r7, #30]
 8004072:	429a      	cmp	r2, r3
 8004074:	d303      	bcc.n	800407e <QActive_publish_+0x2a>
 8004076:	21c8      	movs	r1, #200	@ 0xc8
 8004078:	486e      	ldr	r0, [pc, #440]	@ (8004234 <QActive_publish_+0x1e0>)
 800407a:	f7fc fcd7 	bl	8000a2c <Q_onError>
    Q_REQUIRE_INCRIT(202,
 800407e:	4b6e      	ldr	r3, [pc, #440]	@ (8004238 <QActive_publish_+0x1e4>)
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	8bfb      	ldrh	r3, [r7, #30]
 8004084:	00db      	lsls	r3, r3, #3
 8004086:	4413      	add	r3, r2
 8004088:	4618      	mov	r0, r3
 800408a:	4b6b      	ldr	r3, [pc, #428]	@ (8004238 <QActive_publish_+0x1e4>)
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	8bfb      	ldrh	r3, [r7, #30]
 8004090:	00db      	lsls	r3, r3, #3
 8004092:	4413      	add	r3, r2
 8004094:	3304      	adds	r3, #4
 8004096:	4619      	mov	r1, r3
 8004098:	f7ff ff84 	bl	8003fa4 <QPSet_verify_>
 800409c:	4603      	mov	r3, r0
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d103      	bne.n	80040aa <QActive_publish_+0x56>
 80040a2:	21ca      	movs	r1, #202	@ 0xca
 80040a4:	4863      	ldr	r0, [pc, #396]	@ (8004234 <QActive_publish_+0x1e0>)
 80040a6:	f7fc fcc1 	bl	8000a2c <Q_onError>
        QPSet_verify_(&QActive_subscrList_[sig].set,
                      &QActive_subscrList_[sig].set_dis));

    QS_BEGIN_PRE_(QS_QF_PUBLISH, qsId)
 80040aa:	4b64      	ldr	r3, [pc, #400]	@ (800423c <QActive_publish_+0x1e8>)
 80040ac:	78db      	ldrb	r3, [r3, #3]
 80040ae:	f003 0304 	and.w	r3, r3, #4
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d02c      	beq.n	8004110 <QActive_publish_+0xbc>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	08db      	lsrs	r3, r3, #3
 80040ba:	4a60      	ldr	r2, [pc, #384]	@ (800423c <QActive_publish_+0x1e8>)
 80040bc:	4413      	add	r3, r2
 80040be:	7c1b      	ldrb	r3, [r3, #16]
 80040c0:	461a      	mov	r2, r3
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	f003 0307 	and.w	r3, r3, #7
 80040c8:	fa22 f303 	lsr.w	r3, r2, r3
 80040cc:	f003 0301 	and.w	r3, r3, #1
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d01d      	beq.n	8004110 <QActive_publish_+0xbc>
 80040d4:	201a      	movs	r0, #26
 80040d6:	f001 fb77 	bl	80057c8 <QS_beginRec_>
        QS_TIME_PRE_();          // the timestamp
 80040da:	f7fc fa5d 	bl	8000598 <QS_onGetTime>
 80040de:	4603      	mov	r3, r0
 80040e0:	4618      	mov	r0, r3
 80040e2:	f001 fe2d 	bl	8005d40 <QS_u32_raw_>
        QS_OBJ_PRE_(sender);     // the sender object
 80040e6:	68b8      	ldr	r0, [r7, #8]
 80040e8:	f001 fea2 	bl	8005e30 <QS_obj_raw_>
        QS_SIG_PRE_(sig);        // the signal of the event
 80040ec:	8bfb      	ldrh	r3, [r7, #30]
 80040ee:	4618      	mov	r0, r3
 80040f0:	f001 fd72 	bl	8005bd8 <QS_u16_raw_>
        QS_2U8_PRE_(QEvt_getPoolNum_(e), e->refCtr_); // poolNum & refCtr
 80040f4:	68f8      	ldr	r0, [r7, #12]
 80040f6:	f7ff fef3 	bl	8003ee0 <QEvt_getPoolNum_>
 80040fa:	4603      	mov	r3, r0
 80040fc:	b2da      	uxtb	r2, r3
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	789b      	ldrb	r3, [r3, #2]
 8004102:	b2db      	uxtb	r3, r3
 8004104:	4619      	mov	r1, r3
 8004106:	4610      	mov	r0, r2
 8004108:	f001 fcbe 	bl	8005a88 <QS_2u8_raw_>
    QS_END_PRE_()
 800410c:	f001 fbdc 	bl	80058c8 <QS_endRec_>

    // is it a mutable event?
    if (QEvt_getPoolNum_(e) != 0U) {
 8004110:	68f8      	ldr	r0, [r7, #12]
 8004112:	f7ff fee5 	bl	8003ee0 <QEvt_getPoolNum_>
 8004116:	4603      	mov	r3, r0
 8004118:	2b00      	cmp	r3, #0
 800411a:	d002      	beq.n	8004122 <QActive_publish_+0xce>
        // prevent premature recycling of the event while the multicasting
        // is still in progress. At the end of the function, the garbage
        // collector step (QF_gc()) decrements the reference counter and
        // recycles the event if the counter drops to zero. This covers the
        // case when the event was published without any subscribers.
        QEvt_refCtr_inc_(e);
 800411c:	68f8      	ldr	r0, [r7, #12]
 800411e:	f7ff ff56 	bl	8003fce <QEvt_refCtr_inc_>
    }

    // make a local, modifiable copy of the subscriber set
    QPSet subscrSet = QActive_subscrList_[sig].set;
 8004122:	4b45      	ldr	r3, [pc, #276]	@ (8004238 <QActive_publish_+0x1e4>)
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	8bfb      	ldrh	r3, [r7, #30]
 8004128:	00db      	lsls	r3, r3, #3
 800412a:	4413      	add	r3, r2
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	617b      	str	r3, [r7, #20]

    QF_MEM_APP();
    QF_CRIT_EXIT();
 8004130:	f7fe f946 	bl	80023c0 <QF_crit_exit_>

    if (QPSet_notEmpty(&subscrSet)) { // any subscribers?
 8004134:	f107 0314 	add.w	r3, r7, #20
 8004138:	4618      	mov	r0, r3
 800413a:	f7ff feec 	bl	8003f16 <QPSet_notEmpty>
 800413e:	4603      	mov	r3, r0
 8004140:	2b00      	cmp	r3, #0
 8004142:	d06d      	beq.n	8004220 <QActive_publish_+0x1cc>
        // highest-prio subscriber
        uint_fast8_t p = QPSet_findMax(&subscrSet);
 8004144:	f107 0314 	add.w	r3, r7, #20
 8004148:	4618      	mov	r0, r3
 800414a:	f7ff ff0b 	bl	8003f64 <QPSet_findMax>
 800414e:	62f8      	str	r0, [r7, #44]	@ 0x2c

        QF_CRIT_ENTRY();
 8004150:	f7fe f924 	bl	800239c <QF_crit_entry_>
        QF_MEM_SYS();

        QActive *a = QActive_registry_[p];
 8004154:	4a3a      	ldr	r2, [pc, #232]	@ (8004240 <QActive_publish_+0x1ec>)
 8004156:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800415c:	62bb      	str	r3, [r7, #40]	@ 0x28
        // the AO must be registered with the framework
        Q_ASSERT_INCRIT(210, a != (QActive *)0);
 800415e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004160:	2b00      	cmp	r3, #0
 8004162:	d103      	bne.n	800416c <QActive_publish_+0x118>
 8004164:	21d2      	movs	r1, #210	@ 0xd2
 8004166:	4833      	ldr	r0, [pc, #204]	@ (8004234 <QActive_publish_+0x1e0>)
 8004168:	f7fc fc60 	bl	8000a2c <Q_onError>

        QF_MEM_APP();
        QF_CRIT_EXIT();
 800416c:	f7fe f928 	bl	80023c0 <QF_crit_exit_>
    __asm volatile ("mrs %0,ipsr" : "=r" (regIPSR));
 8004170:	f3ef 8305 	mrs	r3, IPSR
 8004174:	61bb      	str	r3, [r7, #24]
    return regIPSR;
 8004176:	69bb      	ldr	r3, [r7, #24]

        QF_SCHED_STAT_
        QF_SCHED_LOCK_(p); // lock the scheduler up to AO's prio
 8004178:	2b00      	cmp	r3, #0
 800417a:	d002      	beq.n	8004182 <QActive_publish_+0x12e>
 800417c:	23ff      	movs	r3, #255	@ 0xff
 800417e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004180:	e003      	b.n	800418a <QActive_publish_+0x136>
 8004182:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004184:	f000 fba0 	bl	80048c8 <QK_schedLock>
 8004188:	6278      	str	r0, [r7, #36]	@ 0x24
        uint_fast8_t limit = QF_MAX_ACTIVE + 1U;
 800418a:	2321      	movs	r3, #33	@ 0x21
 800418c:	623b      	str	r3, [r7, #32]
        do { // loop over all subscribers
            --limit;
 800418e:	6a3b      	ldr	r3, [r7, #32]
 8004190:	3b01      	subs	r3, #1
 8004192:	623b      	str	r3, [r7, #32]

            // QACTIVE_POST() asserts internally if the queue overflows
            QACTIVE_POST(a, e, sender);
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800419a:	68f9      	ldr	r1, [r7, #12]
 800419c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800419e:	f7ff f8d1 	bl	8003344 <QActive_post_>

            QPSet_remove(&subscrSet, p); // remove the handled subscriber
 80041a2:	f107 0314 	add.w	r3, r7, #20
 80041a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80041a8:	4618      	mov	r0, r3
 80041aa:	f7ff fec5 	bl	8003f38 <QPSet_remove>
            if (QPSet_notEmpty(&subscrSet)) {  // still more subscribers?
 80041ae:	f107 0314 	add.w	r3, r7, #20
 80041b2:	4618      	mov	r0, r3
 80041b4:	f7ff feaf 	bl	8003f16 <QPSet_notEmpty>
 80041b8:	4603      	mov	r3, r0
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d016      	beq.n	80041ec <QActive_publish_+0x198>
                p = QPSet_findMax(&subscrSet); // highest-prio subscriber
 80041be:	f107 0314 	add.w	r3, r7, #20
 80041c2:	4618      	mov	r0, r3
 80041c4:	f7ff fece 	bl	8003f64 <QPSet_findMax>
 80041c8:	62f8      	str	r0, [r7, #44]	@ 0x2c

                QF_CRIT_ENTRY();
 80041ca:	f7fe f8e7 	bl	800239c <QF_crit_entry_>
                QF_MEM_SYS();

                a = QActive_registry_[p];
 80041ce:	4a1c      	ldr	r2, [pc, #112]	@ (8004240 <QActive_publish_+0x1ec>)
 80041d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041d6:	62bb      	str	r3, [r7, #40]	@ 0x28
                // the AO must be registered with the framework
                Q_ASSERT_INCRIT(220, a != (QActive *)0);
 80041d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d103      	bne.n	80041e6 <QActive_publish_+0x192>
 80041de:	21dc      	movs	r1, #220	@ 0xdc
 80041e0:	4814      	ldr	r0, [pc, #80]	@ (8004234 <QActive_publish_+0x1e0>)
 80041e2:	f7fc fc23 	bl	8000a2c <Q_onError>

                QF_MEM_APP();
                QF_CRIT_EXIT();
 80041e6:	f7fe f8eb 	bl	80023c0 <QF_crit_exit_>
 80041ea:	e001      	b.n	80041f0 <QActive_publish_+0x19c>
            }
            else {
                p = 0U; // no more subscribers
 80041ec:	2300      	movs	r3, #0
 80041ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
        } while ((p != 0U) && (limit > 0U));
 80041f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d002      	beq.n	80041fc <QActive_publish_+0x1a8>
 80041f6:	6a3b      	ldr	r3, [r7, #32]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d1c8      	bne.n	800418e <QActive_publish_+0x13a>

        QF_CRIT_ENTRY();
 80041fc:	f7fe f8ce 	bl	800239c <QF_crit_entry_>
        Q_ENSURE_INCRIT(290, p == 0U);
 8004200:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004202:	2b00      	cmp	r3, #0
 8004204:	d004      	beq.n	8004210 <QActive_publish_+0x1bc>
 8004206:	f44f 7191 	mov.w	r1, #290	@ 0x122
 800420a:	480a      	ldr	r0, [pc, #40]	@ (8004234 <QActive_publish_+0x1e0>)
 800420c:	f7fc fc0e 	bl	8000a2c <Q_onError>
        QF_CRIT_EXIT();
 8004210:	f7fe f8d6 	bl	80023c0 <QF_crit_exit_>

        QF_SCHED_UNLOCK_(); // unlock the scheduler
 8004214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004216:	2bff      	cmp	r3, #255	@ 0xff
 8004218:	d002      	beq.n	8004220 <QActive_publish_+0x1cc>
 800421a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800421c:	f000 fbba 	bl	8004994 <QK_schedUnlock>

    // The following garbage collection step decrements the reference counter
    // and recycles the event if the counter drops to zero. This covers both
    // cases when the event was published with or without any subscribers.
    #if (QF_MAX_EPOOL > 0U)
    QF_gc(e); // recycle the event to avoid a leak
 8004220:	68f8      	ldr	r0, [r7, #12]
 8004222:	f7ff fbff 	bl	8003a24 <QF_gc>
    #endif
}
 8004226:	bf00      	nop
 8004228:	3730      	adds	r7, #48	@ 0x30
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}
 800422e:	bf00      	nop
 8004230:	20000a40 	.word	0x20000a40
 8004234:	08007920 	.word	0x08007920
 8004238:	20000a3c 	.word	0x20000a3c
 800423c:	20000a84 	.word	0x20000a84
 8004240:	20000978 	.word	0x20000978

08004244 <QActive_ctor>:

//${QF::QActive::ctor} .......................................................
//! @protected @memberof QActive
void QActive_ctor(QActive * const me,
    QStateHandler const initial)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b082      	sub	sp, #8
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
 800424c:	6039      	str	r1, [r7, #0]
    // clear the whole QActive object, so that the framework can start
    // correctly even if the startup code fails to clear the uninitialized
    // data (as is required by the C Standard).
    QF_bzero_(me, sizeof(*me));
 800424e:	2128      	movs	r1, #40	@ 0x28
 8004250:	6878      	ldr	r0, [r7, #4]
 8004252:	f7fe fffd 	bl	8003250 <QF_bzero_>

    // NOTE: QActive inherits the abstract QAsm class, but it calls the
    // constructor of the QHsm subclass. This is because QActive inherits
    // the behavior from the QHsm subclass.
    QHsm_ctor((QHsm *)(me), initial);
 8004256:	6839      	ldr	r1, [r7, #0]
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	f7fe f953 	bl	8002504 <QHsm_ctor>
        &QHsm_isIn_
    #ifdef Q_SPY
        ,&QHsm_getStateHandler_
    #endif
    };
    me->super.vptr = &vtable; // hook vptr to QActive vtable
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	4a02      	ldr	r2, [pc, #8]	@ (800426c <QActive_ctor+0x28>)
 8004262:	601a      	str	r2, [r3, #0]
}
 8004264:	bf00      	nop
 8004266:	3708      	adds	r7, #8
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}
 800426c:	08007930 	.word	0x08007930

08004270 <QActive_register_>:

//$define${QF::QActive::register_} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

//${QF::QActive::register_} ..................................................
//! @private @memberof QActive
void QActive_register_(QActive * const me) {
 8004270:	b580      	push	{r7, lr}
 8004272:	b084      	sub	sp, #16
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
    QF_CRIT_STAT
    QF_CRIT_ENTRY();
 8004278:	f7fe f890 	bl	800239c <QF_crit_entry_>
    QF_MEM_SYS();

    if (me->pthre == 0U) { // preemption-threshold not defined?
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	7b5b      	ldrb	r3, [r3, #13]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d103      	bne.n	800428c <QActive_register_+0x1c>
        me->pthre = me->prio; // apply the default
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	7b1a      	ldrb	r2, [r3, #12]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	735a      	strb	r2, [r3, #13]
    }

    #ifndef Q_UNSAFE

    Q_REQUIRE_INCRIT(100, (0U < me->prio) && (me->prio <= QF_MAX_ACTIVE)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	7b1b      	ldrb	r3, [r3, #12]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d011      	beq.n	80042b8 <QActive_register_+0x48>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	7b1b      	ldrb	r3, [r3, #12]
 8004298:	2b20      	cmp	r3, #32
 800429a:	d80d      	bhi.n	80042b8 <QActive_register_+0x48>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	7b1b      	ldrb	r3, [r3, #12]
 80042a0:	461a      	mov	r2, r3
 80042a2:	4b37      	ldr	r3, [pc, #220]	@ (8004380 <QActive_register_+0x110>)
 80042a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d105      	bne.n	80042b8 <QActive_register_+0x48>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	7b1a      	ldrb	r2, [r3, #12]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	7b5b      	ldrb	r3, [r3, #13]
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d903      	bls.n	80042c0 <QActive_register_+0x50>
 80042b8:	2164      	movs	r1, #100	@ 0x64
 80042ba:	4832      	ldr	r0, [pc, #200]	@ (8004384 <QActive_register_+0x114>)
 80042bc:	f7fc fbb6 	bl	8000a2c <Q_onError>
                      && (QActive_registry_[me->prio] == (QActive *)0)
                      && (me->prio <= me->pthre));

    uint8_t prev_thre = me->pthre;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	7b5b      	ldrb	r3, [r3, #13]
 80042c4:	73fb      	strb	r3, [r7, #15]
    uint8_t next_thre = me->pthre;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	7b5b      	ldrb	r3, [r3, #13]
 80042ca:	73bb      	strb	r3, [r7, #14]

    uint_fast8_t p;
    for (p = (uint_fast8_t)me->prio - 1U; p > 0U; --p) {
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	7b1b      	ldrb	r3, [r3, #12]
 80042d0:	3b01      	subs	r3, #1
 80042d2:	60bb      	str	r3, [r7, #8]
 80042d4:	e00f      	b.n	80042f6 <QActive_register_+0x86>
        if (QActive_registry_[p] != (QActive *)0) {
 80042d6:	4a2a      	ldr	r2, [pc, #168]	@ (8004380 <QActive_register_+0x110>)
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d006      	beq.n	80042f0 <QActive_register_+0x80>
            prev_thre = QActive_registry_[p]->pthre;
 80042e2:	4a27      	ldr	r2, [pc, #156]	@ (8004380 <QActive_register_+0x110>)
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042ea:	7b5b      	ldrb	r3, [r3, #13]
 80042ec:	73fb      	strb	r3, [r7, #15]
            break;
 80042ee:	e005      	b.n	80042fc <QActive_register_+0x8c>
    for (p = (uint_fast8_t)me->prio - 1U; p > 0U; --p) {
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	3b01      	subs	r3, #1
 80042f4:	60bb      	str	r3, [r7, #8]
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d1ec      	bne.n	80042d6 <QActive_register_+0x66>
        }
    }
    for (p = (uint_fast8_t)me->prio + 1U; p <= QF_MAX_ACTIVE; ++p) {
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	7b1b      	ldrb	r3, [r3, #12]
 8004300:	3301      	adds	r3, #1
 8004302:	60bb      	str	r3, [r7, #8]
 8004304:	e00f      	b.n	8004326 <QActive_register_+0xb6>
        if (QActive_registry_[p] != (QActive *)0) {
 8004306:	4a1e      	ldr	r2, [pc, #120]	@ (8004380 <QActive_register_+0x110>)
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d006      	beq.n	8004320 <QActive_register_+0xb0>
            next_thre = QActive_registry_[p]->pthre;
 8004312:	4a1b      	ldr	r2, [pc, #108]	@ (8004380 <QActive_register_+0x110>)
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800431a:	7b5b      	ldrb	r3, [r3, #13]
 800431c:	73bb      	strb	r3, [r7, #14]
            break;
 800431e:	e005      	b.n	800432c <QActive_register_+0xbc>
    for (p = (uint_fast8_t)me->prio + 1U; p <= QF_MAX_ACTIVE; ++p) {
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	3301      	adds	r3, #1
 8004324:	60bb      	str	r3, [r7, #8]
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	2b20      	cmp	r3, #32
 800432a:	d9ec      	bls.n	8004306 <QActive_register_+0x96>
        }
    }

    Q_ASSERT_INCRIT(190, (prev_thre <= me->pthre)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	7b5b      	ldrb	r3, [r3, #13]
 8004330:	7bfa      	ldrb	r2, [r7, #15]
 8004332:	429a      	cmp	r2, r3
 8004334:	d804      	bhi.n	8004340 <QActive_register_+0xd0>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	7b5b      	ldrb	r3, [r3, #13]
 800433a:	7bba      	ldrb	r2, [r7, #14]
 800433c:	429a      	cmp	r2, r3
 800433e:	d203      	bcs.n	8004348 <QActive_register_+0xd8>
 8004340:	21be      	movs	r1, #190	@ 0xbe
 8004342:	4810      	ldr	r0, [pc, #64]	@ (8004384 <QActive_register_+0x114>)
 8004344:	f7fc fb72 	bl	8000a2c <Q_onError>
                          && (me->pthre <= next_thre));

    me->prio_dis  = (uint8_t)(~me->prio);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	7b1b      	ldrb	r3, [r3, #12]
 800434c:	43db      	mvns	r3, r3
 800434e:	b2da      	uxtb	r2, r3
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    me->pthre_dis = (uint8_t)(~me->pthre);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	7b5b      	ldrb	r3, [r3, #13]
 800435a:	43db      	mvns	r3, r3
 800435c:	b2da      	uxtb	r2, r3
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    #endif // Q_UNSAFE

    // register the AO at the QF-prio.
    QActive_registry_[me->prio] = me;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	7b1b      	ldrb	r3, [r3, #12]
 8004368:	4619      	mov	r1, r3
 800436a:	4a05      	ldr	r2, [pc, #20]	@ (8004380 <QActive_register_+0x110>)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

    QF_MEM_APP();
    QF_CRIT_EXIT();
 8004372:	f7fe f825 	bl	80023c0 <QF_crit_exit_>
}
 8004376:	bf00      	nop
 8004378:	3710      	adds	r7, #16
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}
 800437e:	bf00      	nop
 8004380:	20000978 	.word	0x20000978
 8004384:	08007928 	.word	0x08007928

08004388 <QEQueue_init>:
//${QF::QEQueue::init} .......................................................
//! @public @memberof QEQueue
void QEQueue_init(QEQueue * const me,
    struct QEvt const ** const qSto,
    uint_fast16_t const qLen)
{
 8004388:	b480      	push	{r7}
 800438a:	b085      	sub	sp, #20
 800438c:	af00      	add	r7, sp, #0
 800438e:	60f8      	str	r0, [r7, #12]
 8004390:	60b9      	str	r1, [r7, #8]
 8004392:	607a      	str	r2, [r7, #4]
    me->frontEvt = (QEvt *)0; // no events in the queue
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2200      	movs	r2, #0
 8004398:	601a      	str	r2, [r3, #0]
    me->ring     = qSto;      // the beginning of the ring buffer
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	68ba      	ldr	r2, [r7, #8]
 800439e:	605a      	str	r2, [r3, #4]
    me->end      = (QEQueueCtr)qLen;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	b2da      	uxtb	r2, r3
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	721a      	strb	r2, [r3, #8]
    if (qLen != 0U) {
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d005      	beq.n	80043ba <QEQueue_init+0x32>
        me->head = 0U;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2200      	movs	r2, #0
 80043b2:	725a      	strb	r2, [r3, #9]
        me->tail = 0U;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2200      	movs	r2, #0
 80043b8:	729a      	strb	r2, [r3, #10]
    }
    me->nFree    = (QEQueueCtr)(qLen + 1U); // +1 for frontEvt
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	b2db      	uxtb	r3, r3
 80043be:	3301      	adds	r3, #1
 80043c0:	b2da      	uxtb	r2, r3
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	72da      	strb	r2, [r3, #11]
    me->nMin     = me->nFree;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	7adb      	ldrb	r3, [r3, #11]
 80043ca:	b2da      	uxtb	r2, r3
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	731a      	strb	r2, [r3, #12]
}
 80043d0:	bf00      	nop
 80043d2:	3714      	adds	r7, #20
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr

080043dc <QEvt_verify_>:
static inline bool QEvt_verify_(QEvt const * const me) {
 80043dc:	b480      	push	{r7}
 80043de:	b083      	sub	sp, #12
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
           && ((me->evtTag_ & 0xF0U) == QEVT_MARKER);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d007      	beq.n	80043fa <QEvt_verify_+0x1e>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	78db      	ldrb	r3, [r3, #3]
 80043ee:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80043f2:	2be0      	cmp	r3, #224	@ 0xe0
 80043f4:	d101      	bne.n	80043fa <QEvt_verify_+0x1e>
 80043f6:	2301      	movs	r3, #1
 80043f8:	e000      	b.n	80043fc <QEvt_verify_+0x20>
 80043fa:	2300      	movs	r3, #0
 80043fc:	f003 0301 	and.w	r3, r3, #1
 8004400:	b2db      	uxtb	r3, r3
}
 8004402:	4618      	mov	r0, r3
 8004404:	370c      	adds	r7, #12
 8004406:	46bd      	mov	sp, r7
 8004408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440c:	4770      	bx	lr
	...

08004410 <QTimeEvt_ctorX>:
//! @public @memberof QTimeEvt
void QTimeEvt_ctorX(QTimeEvt * const me,
    QActive * const act,
    enum_t const sig,
    uint_fast8_t const tickRate)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b084      	sub	sp, #16
 8004414:	af00      	add	r7, sp, #0
 8004416:	60f8      	str	r0, [r7, #12]
 8004418:	60b9      	str	r1, [r7, #8]
 800441a:	607a      	str	r2, [r7, #4]
 800441c:	603b      	str	r3, [r7, #0]
    QF_CRIT_STAT
    QF_CRIT_ENTRY();
 800441e:	f7fd ffbd 	bl	800239c <QF_crit_entry_>
    Q_REQUIRE_INCRIT(300, (sig != 0)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d002      	beq.n	800442e <QTimeEvt_ctorX+0x1e>
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d004      	beq.n	8004438 <QTimeEvt_ctorX+0x28>
 800442e:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8004432:	4810      	ldr	r0, [pc, #64]	@ (8004474 <QTimeEvt_ctorX+0x64>)
 8004434:	f7fc fafa 	bl	8000a2c <Q_onError>
        && (tickRate < QF_MAX_TICK_RATE));
    QF_CRIT_EXIT();
 8004438:	f7fd ffc2 	bl	80023c0 <QF_crit_exit_>

    // Initialize the QEvt superclass:
    // NOTE: The refCtr_ attribute is not used in time events,
    // so it is reused to hold the tickRate as well as other
    // information about the status of the time event.
    me->super.sig     = (QSignal)sig;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	b29a      	uxth	r2, r3
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	801a      	strh	r2, [r3, #0]
    me->super.refCtr_ = (uint8_t)tickRate;
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	b2da      	uxtb	r2, r3
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	709a      	strb	r2, [r3, #2]
    me->super.evtTag_ = QEVT_MARKER;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	22e0      	movs	r2, #224	@ 0xe0
 8004450:	70da      	strb	r2, [r3, #3]

    me->next     = (QTimeEvt *)0;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2200      	movs	r2, #0
 8004456:	605a      	str	r2, [r3, #4]
    me->act      = act;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	68ba      	ldr	r2, [r7, #8]
 800445c:	609a      	str	r2, [r3, #8]
    me->ctr      = 0U;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2200      	movs	r2, #0
 8004462:	60da      	str	r2, [r3, #12]
    me->interval = 0U;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2200      	movs	r2, #0
 8004468:	611a      	str	r2, [r3, #16]
}
 800446a:	bf00      	nop
 800446c:	3710      	adds	r7, #16
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}
 8004472:	bf00      	nop
 8004474:	08007940 	.word	0x08007940

08004478 <QTimeEvt_armX>:
//${QF::QTimeEvt::armX} ......................................................
//! @public @memberof QTimeEvt
void QTimeEvt_armX(QTimeEvt * const me,
    QTimeEvtCtr const nTicks,
    QTimeEvtCtr const interval)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b088      	sub	sp, #32
 800447c:	af00      	add	r7, sp, #0
 800447e:	60f8      	str	r0, [r7, #12]
 8004480:	60b9      	str	r1, [r7, #8]
 8004482:	607a      	str	r2, [r7, #4]
    uint_fast8_t const tickRate
                       = ((uint_fast8_t)me->super.refCtr_ & QTE_TICK_RATE);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	789b      	ldrb	r3, [r3, #2]
 8004488:	b2db      	uxtb	r3, r3
    uint_fast8_t const tickRate
 800448a:	f003 030f 	and.w	r3, r3, #15
 800448e:	61fb      	str	r3, [r7, #28]
    QTimeEvtCtr const ctr = me->ctr;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	68db      	ldr	r3, [r3, #12]
 8004494:	61bb      	str	r3, [r7, #24]
    #ifdef Q_SPY
    uint_fast8_t const qsId = ((QActive *)(me->act))->prio;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	7b1b      	ldrb	r3, [r3, #12]
 800449c:	617b      	str	r3, [r7, #20]
    #endif

    QF_CRIT_STAT
    QF_CRIT_ENTRY();
 800449e:	f7fd ff7d 	bl	800239c <QF_crit_entry_>
    QF_MEM_SYS();

    Q_REQUIRE_INCRIT(400, (me->act != (void *)0)
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d00c      	beq.n	80044c4 <QTimeEvt_armX+0x4c>
 80044aa:	69bb      	ldr	r3, [r7, #24]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d109      	bne.n	80044c4 <QTimeEvt_armX+0x4c>
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d006      	beq.n	80044c4 <QTimeEvt_armX+0x4c>
 80044b6:	69fb      	ldr	r3, [r7, #28]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d103      	bne.n	80044c4 <QTimeEvt_armX+0x4c>
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	881b      	ldrh	r3, [r3, #0]
 80044c0:	2b03      	cmp	r3, #3
 80044c2:	d804      	bhi.n	80044ce <QTimeEvt_armX+0x56>
 80044c4:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80044c8:	4832      	ldr	r0, [pc, #200]	@ (8004594 <QTimeEvt_armX+0x11c>)
 80044ca:	f7fc faaf 	bl	8000a2c <Q_onError>
        && (me->super.sig >= (QSignal)Q_USER_SIG));
    #ifdef Q_UNSAFE
    Q_UNUSED_PAR(ctr);
    #endif

    me->ctr = nTicks;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	68ba      	ldr	r2, [r7, #8]
 80044d2:	60da      	str	r2, [r3, #12]
    me->interval = interval;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	687a      	ldr	r2, [r7, #4]
 80044d8:	611a      	str	r2, [r3, #16]

    // is the time event unlinked?
    // NOTE: For the duration of a single clock tick of the specified tick
    // rate a time event can be disarmed and yet still linked into the list
    // because un-linking is performed exclusively in QTimeEvt_tick_().
    if ((me->super.refCtr_ & QTE_IS_LINKED) == 0U) {
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	789b      	ldrb	r3, [r3, #2]
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	b25b      	sxtb	r3, r3
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	db1c      	blt.n	8004520 <QTimeEvt_armX+0xa8>
        // mark as linked
        me->super.refCtr_ |= QTE_IS_LINKED;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	789b      	ldrb	r3, [r3, #2]
 80044ea:	b2db      	uxtb	r3, r3
 80044ec:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80044f0:	b2da      	uxtb	r2, r3
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	709a      	strb	r2, [r3, #2]
        // "freshly armed" link list based on QTimeEvt_timeEvtHead_[tickRate].act.
        // Only later, inside the QTimeEvt_tick_() function, the "freshly armed"
        // list is appended to the main list of armed time events based on
        // QTimeEvt_timeEvtHead_[tickRate].next. Again, this is to keep any
        // changes to the main list exclusively inside the QTimeEvt_tick_().
        me->next = (QTimeEvt *)QTimeEvt_timeEvtHead_[tickRate].act;
 80044f6:	4928      	ldr	r1, [pc, #160]	@ (8004598 <QTimeEvt_armX+0x120>)
 80044f8:	69fa      	ldr	r2, [r7, #28]
 80044fa:	4613      	mov	r3, r2
 80044fc:	009b      	lsls	r3, r3, #2
 80044fe:	4413      	add	r3, r2
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	440b      	add	r3, r1
 8004504:	3308      	adds	r3, #8
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	605a      	str	r2, [r3, #4]
        QTimeEvt_timeEvtHead_[tickRate].act = me;
 800450c:	4922      	ldr	r1, [pc, #136]	@ (8004598 <QTimeEvt_armX+0x120>)
 800450e:	69fa      	ldr	r2, [r7, #28]
 8004510:	4613      	mov	r3, r2
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	4413      	add	r3, r2
 8004516:	009b      	lsls	r3, r3, #2
 8004518:	440b      	add	r3, r1
 800451a:	3308      	adds	r3, #8
 800451c:	68fa      	ldr	r2, [r7, #12]
 800451e:	601a      	str	r2, [r3, #0]
    }

    QS_BEGIN_PRE_(QS_QF_TIMEEVT_ARM, qsId)
 8004520:	4b1e      	ldr	r3, [pc, #120]	@ (800459c <QTimeEvt_armX+0x124>)
 8004522:	791b      	ldrb	r3, [r3, #4]
 8004524:	f003 0301 	and.w	r3, r3, #1
 8004528:	2b00      	cmp	r3, #0
 800452a:	d02c      	beq.n	8004586 <QTimeEvt_armX+0x10e>
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	08db      	lsrs	r3, r3, #3
 8004530:	4a1a      	ldr	r2, [pc, #104]	@ (800459c <QTimeEvt_armX+0x124>)
 8004532:	4413      	add	r3, r2
 8004534:	7c1b      	ldrb	r3, [r3, #16]
 8004536:	461a      	mov	r2, r3
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	f003 0307 	and.w	r3, r3, #7
 800453e:	fa22 f303 	lsr.w	r3, r2, r3
 8004542:	f003 0301 	and.w	r3, r3, #1
 8004546:	2b00      	cmp	r3, #0
 8004548:	d01d      	beq.n	8004586 <QTimeEvt_armX+0x10e>
 800454a:	2020      	movs	r0, #32
 800454c:	f001 f93c 	bl	80057c8 <QS_beginRec_>
        QS_TIME_PRE_();        // timestamp
 8004550:	f7fc f822 	bl	8000598 <QS_onGetTime>
 8004554:	4603      	mov	r3, r0
 8004556:	4618      	mov	r0, r3
 8004558:	f001 fbf2 	bl	8005d40 <QS_u32_raw_>
        QS_OBJ_PRE_(me);       // this time event object
 800455c:	68f8      	ldr	r0, [r7, #12]
 800455e:	f001 fc67 	bl	8005e30 <QS_obj_raw_>
        QS_OBJ_PRE_(me->act);  // the active object
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	4618      	mov	r0, r3
 8004568:	f001 fc62 	bl	8005e30 <QS_obj_raw_>
        QS_TEC_PRE_(nTicks);   // the # ticks
 800456c:	68b8      	ldr	r0, [r7, #8]
 800456e:	f001 fbe7 	bl	8005d40 <QS_u32_raw_>
        QS_TEC_PRE_(interval); // the interval
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f001 fbe4 	bl	8005d40 <QS_u32_raw_>
        QS_U8_PRE_(tickRate);  // tick rate
 8004578:	69fb      	ldr	r3, [r7, #28]
 800457a:	b2db      	uxtb	r3, r3
 800457c:	4618      	mov	r0, r3
 800457e:	f001 fa1d 	bl	80059bc <QS_u8_raw_>
    QS_END_PRE_()
 8004582:	f001 f9a1 	bl	80058c8 <QS_endRec_>

    QF_MEM_APP();
    QF_CRIT_EXIT();
 8004586:	f7fd ff1b 	bl	80023c0 <QF_crit_exit_>
}
 800458a:	bf00      	nop
 800458c:	3720      	adds	r7, #32
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}
 8004592:	bf00      	nop
 8004594:	08007940 	.word	0x08007940
 8004598:	20000a44 	.word	0x20000a44
 800459c:	20000a84 	.word	0x20000a84

080045a0 <QTimeEvt_tick_>:
//${QF::QTimeEvt::tick_} .....................................................
//! @static @private @memberof QTimeEvt
void QTimeEvt_tick_(
    uint_fast8_t const tickRate,
    void const * const sender)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b086      	sub	sp, #24
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
 80045a8:	6039      	str	r1, [r7, #0]
    #ifndef Q_SPY
    Q_UNUSED_PAR(sender);
    #endif

    QF_CRIT_STAT
    QF_CRIT_ENTRY();
 80045aa:	f7fd fef7 	bl	800239c <QF_crit_entry_>
    QF_MEM_SYS();

    Q_REQUIRE_INCRIT(100, tickRate < Q_DIM(QTimeEvt_timeEvtHead_));
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d003      	beq.n	80045bc <QTimeEvt_tick_+0x1c>
 80045b4:	2164      	movs	r1, #100	@ 0x64
 80045b6:	4893      	ldr	r0, [pc, #588]	@ (8004804 <QTimeEvt_tick_+0x264>)
 80045b8:	f7fc fa38 	bl	8000a2c <Q_onError>

    QTimeEvt *prev = &QTimeEvt_timeEvtHead_[tickRate];
 80045bc:	687a      	ldr	r2, [r7, #4]
 80045be:	4613      	mov	r3, r2
 80045c0:	009b      	lsls	r3, r3, #2
 80045c2:	4413      	add	r3, r2
 80045c4:	009b      	lsls	r3, r3, #2
 80045c6:	4a90      	ldr	r2, [pc, #576]	@ (8004808 <QTimeEvt_tick_+0x268>)
 80045c8:	4413      	add	r3, r2
 80045ca:	617b      	str	r3, [r7, #20]

    QS_BEGIN_PRE_(QS_QF_TICK, 0U)
 80045cc:	4b8f      	ldr	r3, [pc, #572]	@ (800480c <QTimeEvt_tick_+0x26c>)
 80045ce:	78db      	ldrb	r3, [r3, #3]
 80045d0:	b25b      	sxtb	r3, r3
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	da19      	bge.n	800460a <QTimeEvt_tick_+0x6a>
 80045d6:	4b8d      	ldr	r3, [pc, #564]	@ (800480c <QTimeEvt_tick_+0x26c>)
 80045d8:	7c1b      	ldrb	r3, [r3, #16]
 80045da:	f003 0301 	and.w	r3, r3, #1
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d013      	beq.n	800460a <QTimeEvt_tick_+0x6a>
 80045e2:	201f      	movs	r0, #31
 80045e4:	f001 f8f0 	bl	80057c8 <QS_beginRec_>
        ++prev->ctr;
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	1c5a      	adds	r2, r3, #1
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	60da      	str	r2, [r3, #12]
        QS_TEC_PRE_(prev->ctr);   // tick ctr
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	68db      	ldr	r3, [r3, #12]
 80045f6:	4618      	mov	r0, r3
 80045f8:	f001 fba2 	bl	8005d40 <QS_u32_raw_>
        QS_U8_PRE_(tickRate);     // tick rate
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	4618      	mov	r0, r3
 8004602:	f001 f9db 	bl	80059bc <QS_u8_raw_>
    QS_END_PRE_()
 8004606:	f001 f95f 	bl	80058c8 <QS_endRec_>

    // scan the linked-list of time events at this rate...
    uint_fast8_t limit = 2U*QF_MAX_ACTIVE; // loop hard limit
 800460a:	2340      	movs	r3, #64	@ 0x40
 800460c:	613b      	str	r3, [r7, #16]
    for (; limit > 0U; --limit) {
 800460e:	e0e5      	b.n	80047dc <QTimeEvt_tick_+0x23c>
        QTimeEvt *e = prev->next; // advance down the time evt. list
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	60fb      	str	r3, [r7, #12]

        if (e == (QTimeEvt *)0) { // end of the list?
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d12a      	bne.n	8004672 <QTimeEvt_tick_+0xd2>

            // any new time events armed since the last QTimeEvt_tick_()?
            if (QTimeEvt_timeEvtHead_[tickRate].act != (void *)0) {
 800461c:	497a      	ldr	r1, [pc, #488]	@ (8004808 <QTimeEvt_tick_+0x268>)
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	4613      	mov	r3, r2
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	4413      	add	r3, r2
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	440b      	add	r3, r1
 800462a:	3308      	adds	r3, #8
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	2b00      	cmp	r3, #0
 8004630:	f000 80d9 	beq.w	80047e6 <QTimeEvt_tick_+0x246>

                // sanity check
                Q_ASSERT_INCRIT(110, prev != (QTimeEvt *)0);
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d103      	bne.n	8004642 <QTimeEvt_tick_+0xa2>
 800463a:	216e      	movs	r1, #110	@ 0x6e
 800463c:	4871      	ldr	r0, [pc, #452]	@ (8004804 <QTimeEvt_tick_+0x264>)
 800463e:	f7fc f9f5 	bl	8000a2c <Q_onError>
                prev->next = (QTimeEvt *)QTimeEvt_timeEvtHead_[tickRate].act;
 8004642:	4971      	ldr	r1, [pc, #452]	@ (8004808 <QTimeEvt_tick_+0x268>)
 8004644:	687a      	ldr	r2, [r7, #4]
 8004646:	4613      	mov	r3, r2
 8004648:	009b      	lsls	r3, r3, #2
 800464a:	4413      	add	r3, r2
 800464c:	009b      	lsls	r3, r3, #2
 800464e:	440b      	add	r3, r1
 8004650:	3308      	adds	r3, #8
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	605a      	str	r2, [r3, #4]
                QTimeEvt_timeEvtHead_[tickRate].act = (void *)0;
 8004658:	496b      	ldr	r1, [pc, #428]	@ (8004808 <QTimeEvt_tick_+0x268>)
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	4613      	mov	r3, r2
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	4413      	add	r3, r2
 8004662:	009b      	lsls	r3, r3, #2
 8004664:	440b      	add	r3, r1
 8004666:	3308      	adds	r3, #8
 8004668:	2200      	movs	r2, #0
 800466a:	601a      	str	r2, [r3, #0]
                e = prev->next; // switch to the new list
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	60fb      	str	r3, [r7, #12]
                break; // terminate the for-loop
            }
        }

        // the time event 'e' must be valid
        Q_ASSERT_INCRIT(112, QEvt_verify_(Q_EVT_CAST(QEvt)));
 8004672:	68f8      	ldr	r0, [r7, #12]
 8004674:	f7ff feb2 	bl	80043dc <QEvt_verify_>
 8004678:	4603      	mov	r3, r0
 800467a:	2b00      	cmp	r3, #0
 800467c:	d103      	bne.n	8004686 <QTimeEvt_tick_+0xe6>
 800467e:	2170      	movs	r1, #112	@ 0x70
 8004680:	4860      	ldr	r0, [pc, #384]	@ (8004804 <QTimeEvt_tick_+0x264>)
 8004682:	f7fc f9d3 	bl	8000a2c <Q_onError>

        if (e->ctr == 0U) { // time event scheduled for removal?
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	68db      	ldr	r3, [r3, #12]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d110      	bne.n	80046b0 <QTimeEvt_tick_+0x110>
            prev->next = e->next;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	685a      	ldr	r2, [r3, #4]
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	605a      	str	r2, [r3, #4]
            // mark time event 'e' as NOT linked
            e->super.refCtr_ &= (uint8_t)(~QTE_IS_LINKED & 0xFFU);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	789b      	ldrb	r3, [r3, #2]
 800469a:	b2db      	uxtb	r3, r3
 800469c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80046a0:	b2da      	uxtb	r2, r3
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	709a      	strb	r2, [r3, #2]
            // do NOT advance the prev pointer
            QF_MEM_APP();
            QF_CRIT_EXIT(); // exit crit. section to reduce latency
 80046a6:	f7fd fe8b 	bl	80023c0 <QF_crit_exit_>
            // another entry to a critical section, the critical section
            // might not be really exited, but rather the two adjacent
            // critical sections would be MERGED. The QF_CRIT_EXIT_NOP()
            // macro contains minimal code required to prevent such merging
            // of critical sections in QF ports, in which it can occur.
            QF_CRIT_EXIT_NOP();
 80046aa:	f3bf 8f6f 	isb	sy
 80046ae:	e090      	b.n	80047d2 <QTimeEvt_tick_+0x232>
        }
        else {
            --e->ctr;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	68db      	ldr	r3, [r3, #12]
 80046b4:	1e5a      	subs	r2, r3, #1
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	60da      	str	r2, [r3, #12]

            if (e->ctr == 0U) { // is time event about to expire?
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	68db      	ldr	r3, [r3, #12]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	f040 8081 	bne.w	80047c6 <QTimeEvt_tick_+0x226>
                QActive * const act = (QActive *)e->act;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	60bb      	str	r3, [r7, #8]

                if (e->interval != 0U) { // periodic time evt?
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	691b      	ldr	r3, [r3, #16]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d006      	beq.n	80046e0 <QTimeEvt_tick_+0x140>
                    e->ctr = e->interval; // rearm the time event
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	691a      	ldr	r2, [r3, #16]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	60da      	str	r2, [r3, #12]
                    prev = e; // advance to this time event
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	617b      	str	r3, [r7, #20]
 80046de:	e034      	b.n	800474a <QTimeEvt_tick_+0x1aa>
                }
                else { // one-shot time event: automatically disarm
                    prev->next = e->next;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	685a      	ldr	r2, [r3, #4]
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	605a      	str	r2, [r3, #4]

                    // mark time event 'e' as NOT linked
                    e->super.refCtr_ &= (uint8_t)(~QTE_IS_LINKED & 0xFFU);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	789b      	ldrb	r3, [r3, #2]
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80046f2:	b2da      	uxtb	r2, r3
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	709a      	strb	r2, [r3, #2]
                    // do NOT advance the prev pointer

                    QS_BEGIN_PRE_(QS_QF_TIMEEVT_AUTO_DISARM, act->prio)
 80046f8:	4b44      	ldr	r3, [pc, #272]	@ (800480c <QTimeEvt_tick_+0x26c>)
 80046fa:	791b      	ldrb	r3, [r3, #4]
 80046fc:	f003 0302 	and.w	r3, r3, #2
 8004700:	2b00      	cmp	r3, #0
 8004702:	d022      	beq.n	800474a <QTimeEvt_tick_+0x1aa>
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	7b1b      	ldrb	r3, [r3, #12]
 8004708:	08db      	lsrs	r3, r3, #3
 800470a:	b2db      	uxtb	r3, r3
 800470c:	461a      	mov	r2, r3
 800470e:	4b3f      	ldr	r3, [pc, #252]	@ (800480c <QTimeEvt_tick_+0x26c>)
 8004710:	4413      	add	r3, r2
 8004712:	7c1b      	ldrb	r3, [r3, #16]
 8004714:	461a      	mov	r2, r3
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	7b1b      	ldrb	r3, [r3, #12]
 800471a:	f003 0307 	and.w	r3, r3, #7
 800471e:	fa22 f303 	lsr.w	r3, r2, r3
 8004722:	f003 0301 	and.w	r3, r3, #1
 8004726:	2b00      	cmp	r3, #0
 8004728:	d00f      	beq.n	800474a <QTimeEvt_tick_+0x1aa>
 800472a:	2021      	movs	r0, #33	@ 0x21
 800472c:	f001 f84c 	bl	80057c8 <QS_beginRec_>
                        QS_OBJ_PRE_(e);        // this time event object
 8004730:	68f8      	ldr	r0, [r7, #12]
 8004732:	f001 fb7d 	bl	8005e30 <QS_obj_raw_>
                        QS_OBJ_PRE_(act);      // the target AO
 8004736:	68b8      	ldr	r0, [r7, #8]
 8004738:	f001 fb7a 	bl	8005e30 <QS_obj_raw_>
                        QS_U8_PRE_(tickRate);  // tick rate
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	b2db      	uxtb	r3, r3
 8004740:	4618      	mov	r0, r3
 8004742:	f001 f93b 	bl	80059bc <QS_u8_raw_>
                    QS_END_PRE_()
 8004746:	f001 f8bf 	bl	80058c8 <QS_endRec_>
                }

                QS_BEGIN_PRE_(QS_QF_TIMEEVT_POST, act->prio)
 800474a:	4b30      	ldr	r3, [pc, #192]	@ (800480c <QTimeEvt_tick_+0x26c>)
 800474c:	791b      	ldrb	r3, [r3, #4]
 800474e:	f003 0320 	and.w	r3, r3, #32
 8004752:	2b00      	cmp	r3, #0
 8004754:	d02d      	beq.n	80047b2 <QTimeEvt_tick_+0x212>
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	7b1b      	ldrb	r3, [r3, #12]
 800475a:	08db      	lsrs	r3, r3, #3
 800475c:	b2db      	uxtb	r3, r3
 800475e:	461a      	mov	r2, r3
 8004760:	4b2a      	ldr	r3, [pc, #168]	@ (800480c <QTimeEvt_tick_+0x26c>)
 8004762:	4413      	add	r3, r2
 8004764:	7c1b      	ldrb	r3, [r3, #16]
 8004766:	461a      	mov	r2, r3
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	7b1b      	ldrb	r3, [r3, #12]
 800476c:	f003 0307 	and.w	r3, r3, #7
 8004770:	fa22 f303 	lsr.w	r3, r2, r3
 8004774:	f003 0301 	and.w	r3, r3, #1
 8004778:	2b00      	cmp	r3, #0
 800477a:	d01a      	beq.n	80047b2 <QTimeEvt_tick_+0x212>
 800477c:	2025      	movs	r0, #37	@ 0x25
 800477e:	f001 f823 	bl	80057c8 <QS_beginRec_>
                    QS_TIME_PRE_();            // timestamp
 8004782:	f7fb ff09 	bl	8000598 <QS_onGetTime>
 8004786:	4603      	mov	r3, r0
 8004788:	4618      	mov	r0, r3
 800478a:	f001 fad9 	bl	8005d40 <QS_u32_raw_>
                    QS_OBJ_PRE_(e);            // the time event object
 800478e:	68f8      	ldr	r0, [r7, #12]
 8004790:	f001 fb4e 	bl	8005e30 <QS_obj_raw_>
                    QS_SIG_PRE_(e->super.sig); // signal of this time event
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	881b      	ldrh	r3, [r3, #0]
 8004798:	4618      	mov	r0, r3
 800479a:	f001 fa1d 	bl	8005bd8 <QS_u16_raw_>
                    QS_OBJ_PRE_(act);          // the target AO
 800479e:	68b8      	ldr	r0, [r7, #8]
 80047a0:	f001 fb46 	bl	8005e30 <QS_obj_raw_>
                    QS_U8_PRE_(tickRate);      // tick rate
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	4618      	mov	r0, r3
 80047aa:	f001 f907 	bl	80059bc <QS_u8_raw_>
                QS_END_PRE_()
 80047ae:	f001 f88b 	bl	80058c8 <QS_endRec_>
                    // QACTIVE_POST() asserts if the queue overflows
                    QACTIVE_POST(act, &e->super, sender);
                }
    #else
                QF_MEM_APP();
                QF_CRIT_EXIT(); // exit crit. section before posting
 80047b2:	f7fd fe05 	bl	80023c0 <QF_crit_exit_>

                // QACTIVE_POST() asserts if the queue overflows
                QACTIVE_POST(act, &e->super, sender);
 80047b6:	68f9      	ldr	r1, [r7, #12]
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80047be:	68b8      	ldr	r0, [r7, #8]
 80047c0:	f7fe fdc0 	bl	8003344 <QActive_post_>
 80047c4:	e005      	b.n	80047d2 <QTimeEvt_tick_+0x232>
    #endif
            }
            else {
                prev = e; // advance to this time event
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	617b      	str	r3, [r7, #20]

                QF_MEM_APP();
                QF_CRIT_EXIT(); // exit crit. section to reduce latency
 80047ca:	f7fd fdf9 	bl	80023c0 <QF_crit_exit_>

                // prevent merging critical sections, see NOTE above
                QF_CRIT_EXIT_NOP();
 80047ce:	f3bf 8f6f 	isb	sy
            }
        }
        QF_CRIT_ENTRY(); // re-enter crit. section to continue the loop
 80047d2:	f7fd fde3 	bl	800239c <QF_crit_entry_>
    for (; limit > 0U; --limit) {
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	3b01      	subs	r3, #1
 80047da:	613b      	str	r3, [r7, #16]
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	f47f af16 	bne.w	8004610 <QTimeEvt_tick_+0x70>
 80047e4:	e000      	b.n	80047e8 <QTimeEvt_tick_+0x248>
                break; // terminate the for-loop
 80047e6:	bf00      	nop
        QF_MEM_SYS();
    }

    Q_ENSURE_INCRIT(190, limit > 0U);
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d103      	bne.n	80047f6 <QTimeEvt_tick_+0x256>
 80047ee:	21be      	movs	r1, #190	@ 0xbe
 80047f0:	4804      	ldr	r0, [pc, #16]	@ (8004804 <QTimeEvt_tick_+0x264>)
 80047f2:	f7fc f91b 	bl	8000a2c <Q_onError>
    QF_MEM_APP();
    QF_CRIT_EXIT();
 80047f6:	f7fd fde3 	bl	80023c0 <QF_crit_exit_>
}
 80047fa:	bf00      	nop
 80047fc:	3718      	adds	r7, #24
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}
 8004802:	bf00      	nop
 8004804:	08007940 	.word	0x08007940
 8004808:	20000a44 	.word	0x20000a44
 800480c:	20000a84 	.word	0x20000a84

08004810 <QPSet_isEmpty>:
static inline bool QPSet_isEmpty(QPSet const * const me) {
 8004810:	b480      	push	{r7}
 8004812:	b083      	sub	sp, #12
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
    return (me->bits[0] == 0U);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	2b00      	cmp	r3, #0
 800481e:	bf0c      	ite	eq
 8004820:	2301      	moveq	r3, #1
 8004822:	2300      	movne	r3, #0
 8004824:	b2db      	uxtb	r3, r3
}
 8004826:	4618      	mov	r0, r3
 8004828:	370c      	adds	r7, #12
 800482a:	46bd      	mov	sp, r7
 800482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004830:	4770      	bx	lr

08004832 <QPSet_remove>:
{
 8004832:	b480      	push	{r7}
 8004834:	b083      	sub	sp, #12
 8004836:	af00      	add	r7, sp, #0
 8004838:	6078      	str	r0, [r7, #4]
 800483a:	6039      	str	r1, [r7, #0]
    me->bits[0] = (me->bits[0] & (QPSetBits)(~((QPSetBits)1U << (n - 1U))));
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	3b01      	subs	r3, #1
 8004844:	2101      	movs	r1, #1
 8004846:	fa01 f303 	lsl.w	r3, r1, r3
 800484a:	43db      	mvns	r3, r3
 800484c:	401a      	ands	r2, r3
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	601a      	str	r2, [r3, #0]
}
 8004852:	bf00      	nop
 8004854:	370c      	adds	r7, #12
 8004856:	46bd      	mov	sp, r7
 8004858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485c:	4770      	bx	lr

0800485e <QPSet_findMax>:
static inline uint_fast8_t QPSet_findMax(QPSet const * const me) {
 800485e:	b480      	push	{r7}
 8004860:	b083      	sub	sp, #12
 8004862:	af00      	add	r7, sp, #0
 8004864:	6078      	str	r0, [r7, #4]
    return QF_LOG2(me->bits[0]);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	fab3 f383 	clz	r3, r3
 800486e:	f1c3 0320 	rsb	r3, r3, #32
}
 8004872:	4618      	mov	r0, r3
 8004874:	370c      	adds	r7, #12
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr

0800487e <QPSet_update_>:
{
 800487e:	b480      	push	{r7}
 8004880:	b083      	sub	sp, #12
 8004882:	af00      	add	r7, sp, #0
 8004884:	6078      	str	r0, [r7, #4]
 8004886:	6039      	str	r1, [r7, #0]
    dis->bits[0] = ~me->bits[0];
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	43da      	mvns	r2, r3
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	601a      	str	r2, [r3, #0]
}
 8004892:	bf00      	nop
 8004894:	370c      	adds	r7, #12
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr

0800489e <QPSet_verify_>:
{
 800489e:	b480      	push	{r7}
 80048a0:	b083      	sub	sp, #12
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	6078      	str	r0, [r7, #4]
 80048a6:	6039      	str	r1, [r7, #0]
    return me->bits[0] == (QPSetBits)(~dis->bits[0]);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	43db      	mvns	r3, r3
 80048b2:	429a      	cmp	r2, r3
 80048b4:	bf0c      	ite	eq
 80048b6:	2301      	moveq	r3, #1
 80048b8:	2300      	movne	r3, #0
 80048ba:	b2db      	uxtb	r3, r3
}
 80048bc:	4618      	mov	r0, r3
 80048be:	370c      	adds	r7, #12
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr

080048c8 <QK_schedLock>:
//${QK::QK-base::priv_} ......................................................
QK_Attr QK_priv_;

//${QK::QK-base::schedLock} ..................................................
//! @static @public @memberof QK
QSchedStatus QK_schedLock(uint_fast8_t const ceiling) {
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b084      	sub	sp, #16
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
    QF_CRIT_STAT
    QF_CRIT_ENTRY();
 80048d0:	f7fd fd64 	bl	800239c <QF_crit_entry_>
    __asm volatile ("mrs %0,ipsr" : "=r" (regIPSR));
 80048d4:	f3ef 8305 	mrs	r3, IPSR
 80048d8:	60bb      	str	r3, [r7, #8]
    return regIPSR;
 80048da:	68bb      	ldr	r3, [r7, #8]
    QF_MEM_SYS();

    Q_REQUIRE_INCRIT(100, !QK_ISR_CONTEXT_());
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d003      	beq.n	80048e8 <QK_schedLock+0x20>
 80048e0:	2164      	movs	r1, #100	@ 0x64
 80048e2:	4829      	ldr	r0, [pc, #164]	@ (8004988 <QK_schedLock+0xc0>)
 80048e4:	f7fc f8a2 	bl	8000a2c <Q_onError>
    Q_REQUIRE_INCRIT(102, QK_priv_.lockCeil
 80048e8:	4b28      	ldr	r3, [pc, #160]	@ (800498c <QK_schedLock+0xc4>)
 80048ea:	691a      	ldr	r2, [r3, #16]
 80048ec:	4b27      	ldr	r3, [pc, #156]	@ (800498c <QK_schedLock+0xc4>)
 80048ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048f0:	43db      	mvns	r3, r3
 80048f2:	429a      	cmp	r2, r3
 80048f4:	d003      	beq.n	80048fe <QK_schedLock+0x36>
 80048f6:	2166      	movs	r1, #102	@ 0x66
 80048f8:	4823      	ldr	r0, [pc, #140]	@ (8004988 <QK_schedLock+0xc0>)
 80048fa:	f7fc f897 	bl	8000a2c <Q_onError>
        == (uint_fast8_t)(~QK_priv_.lockCeil_dis));

    // first store the previous lock prio
    QSchedStatus stat;
    if (ceiling > QK_priv_.lockCeil) { // raising the lock ceiling?
 80048fe:	4b23      	ldr	r3, [pc, #140]	@ (800498c <QK_schedLock+0xc4>)
 8004900:	691b      	ldr	r3, [r3, #16]
 8004902:	687a      	ldr	r2, [r7, #4]
 8004904:	429a      	cmp	r2, r3
 8004906:	d935      	bls.n	8004974 <QK_schedLock+0xac>
        QS_BEGIN_PRE_(QS_SCHED_LOCK, QK_priv_.actPrio)
 8004908:	4b21      	ldr	r3, [pc, #132]	@ (8004990 <QK_schedLock+0xc8>)
 800490a:	799b      	ldrb	r3, [r3, #6]
 800490c:	f003 0304 	and.w	r3, r3, #4
 8004910:	2b00      	cmp	r3, #0
 8004912:	d024      	beq.n	800495e <QK_schedLock+0x96>
 8004914:	4b1d      	ldr	r3, [pc, #116]	@ (800498c <QK_schedLock+0xc4>)
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	08db      	lsrs	r3, r3, #3
 800491a:	4a1d      	ldr	r2, [pc, #116]	@ (8004990 <QK_schedLock+0xc8>)
 800491c:	4413      	add	r3, r2
 800491e:	7c1b      	ldrb	r3, [r3, #16]
 8004920:	461a      	mov	r2, r3
 8004922:	4b1a      	ldr	r3, [pc, #104]	@ (800498c <QK_schedLock+0xc4>)
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	f003 0307 	and.w	r3, r3, #7
 800492a:	fa22 f303 	lsr.w	r3, r2, r3
 800492e:	f003 0301 	and.w	r3, r3, #1
 8004932:	2b00      	cmp	r3, #0
 8004934:	d013      	beq.n	800495e <QK_schedLock+0x96>
 8004936:	2032      	movs	r0, #50	@ 0x32
 8004938:	f000 ff46 	bl	80057c8 <QS_beginRec_>
            QS_TIME_PRE_();   // timestamp
 800493c:	f7fb fe2c 	bl	8000598 <QS_onGetTime>
 8004940:	4603      	mov	r3, r0
 8004942:	4618      	mov	r0, r3
 8004944:	f001 f9fc 	bl	8005d40 <QS_u32_raw_>
            // the previous lock ceiling & new lock ceiling
            QS_2U8_PRE_((uint8_t)QK_priv_.lockCeil, (uint8_t)ceiling);
 8004948:	4b10      	ldr	r3, [pc, #64]	@ (800498c <QK_schedLock+0xc4>)
 800494a:	691b      	ldr	r3, [r3, #16]
 800494c:	b2db      	uxtb	r3, r3
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	b2d2      	uxtb	r2, r2
 8004952:	4611      	mov	r1, r2
 8004954:	4618      	mov	r0, r3
 8004956:	f001 f897 	bl	8005a88 <QS_2u8_raw_>
        QS_END_PRE_()
 800495a:	f000 ffb5 	bl	80058c8 <QS_endRec_>

        // previous status of the lock
        stat = (QSchedStatus)QK_priv_.lockCeil;
 800495e:	4b0b      	ldr	r3, [pc, #44]	@ (800498c <QK_schedLock+0xc4>)
 8004960:	691b      	ldr	r3, [r3, #16]
 8004962:	60fb      	str	r3, [r7, #12]

        // new status of the lock
        QK_priv_.lockCeil = ceiling;
 8004964:	4a09      	ldr	r2, [pc, #36]	@ (800498c <QK_schedLock+0xc4>)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6113      	str	r3, [r2, #16]
    #ifndef Q_UNSAFE
        QK_priv_.lockCeil_dis = (uint_fast8_t)(~ceiling);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	43db      	mvns	r3, r3
 800496e:	4a07      	ldr	r2, [pc, #28]	@ (800498c <QK_schedLock+0xc4>)
 8004970:	6293      	str	r3, [r2, #40]	@ 0x28
 8004972:	e001      	b.n	8004978 <QK_schedLock+0xb0>
    #endif
    }
    else {
        stat = 0xFFU; // scheduler not locked
 8004974:	23ff      	movs	r3, #255	@ 0xff
 8004976:	60fb      	str	r3, [r7, #12]
    }

    QF_MEM_APP();
    QF_CRIT_EXIT();
 8004978:	f7fd fd22 	bl	80023c0 <QF_crit_exit_>

    return stat; // return the status to be saved in a stack variable
 800497c:	68fb      	ldr	r3, [r7, #12]
}
 800497e:	4618      	mov	r0, r3
 8004980:	3710      	adds	r7, #16
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}
 8004986:	bf00      	nop
 8004988:	08007948 	.word	0x08007948
 800498c:	20000a58 	.word	0x20000a58
 8004990:	20000a84 	.word	0x20000a84

08004994 <QK_schedUnlock>:

//${QK::QK-base::schedUnlock} ................................................
//! @static @public @memberof QK
void QK_schedUnlock(QSchedStatus const prevCeil) {
 8004994:	b580      	push	{r7, lr}
 8004996:	b084      	sub	sp, #16
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
    // has the scheduler been actually locked by the last QK_schedLock()?
    if (prevCeil != 0xFFU) {
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2bff      	cmp	r3, #255	@ 0xff
 80049a0:	d056      	beq.n	8004a50 <QK_schedUnlock+0xbc>
        QF_CRIT_STAT
        QF_CRIT_ENTRY();
 80049a2:	f7fd fcfb 	bl	800239c <QF_crit_entry_>
        QF_MEM_SYS();

        Q_REQUIRE_INCRIT(202, QK_priv_.lockCeil
 80049a6:	4b2c      	ldr	r3, [pc, #176]	@ (8004a58 <QK_schedUnlock+0xc4>)
 80049a8:	691a      	ldr	r2, [r3, #16]
 80049aa:	4b2b      	ldr	r3, [pc, #172]	@ (8004a58 <QK_schedUnlock+0xc4>)
 80049ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049ae:	43db      	mvns	r3, r3
 80049b0:	429a      	cmp	r2, r3
 80049b2:	d003      	beq.n	80049bc <QK_schedUnlock+0x28>
 80049b4:	21ca      	movs	r1, #202	@ 0xca
 80049b6:	4829      	ldr	r0, [pc, #164]	@ (8004a5c <QK_schedUnlock+0xc8>)
 80049b8:	f7fc f838 	bl	8000a2c <Q_onError>
    __asm volatile ("mrs %0,ipsr" : "=r" (regIPSR));
 80049bc:	f3ef 8305 	mrs	r3, IPSR
 80049c0:	60fb      	str	r3, [r7, #12]
    return regIPSR;
 80049c2:	68fb      	ldr	r3, [r7, #12]
            == (uint_fast8_t)(~QK_priv_.lockCeil_dis));
        Q_REQUIRE_INCRIT(210, (!QK_ISR_CONTEXT_())
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d104      	bne.n	80049d2 <QK_schedUnlock+0x3e>
 80049c8:	4b23      	ldr	r3, [pc, #140]	@ (8004a58 <QK_schedUnlock+0xc4>)
 80049ca:	691b      	ldr	r3, [r3, #16]
 80049cc:	687a      	ldr	r2, [r7, #4]
 80049ce:	429a      	cmp	r2, r3
 80049d0:	d303      	bcc.n	80049da <QK_schedUnlock+0x46>
 80049d2:	21d2      	movs	r1, #210	@ 0xd2
 80049d4:	4821      	ldr	r0, [pc, #132]	@ (8004a5c <QK_schedUnlock+0xc8>)
 80049d6:	f7fc f829 	bl	8000a2c <Q_onError>
                              && (QK_priv_.lockCeil > prevCeil));

        QS_BEGIN_PRE_(QS_SCHED_UNLOCK, QK_priv_.actPrio)
 80049da:	4b21      	ldr	r3, [pc, #132]	@ (8004a60 <QK_schedUnlock+0xcc>)
 80049dc:	799b      	ldrb	r3, [r3, #6]
 80049de:	f003 0308 	and.w	r3, r3, #8
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d024      	beq.n	8004a30 <QK_schedUnlock+0x9c>
 80049e6:	4b1c      	ldr	r3, [pc, #112]	@ (8004a58 <QK_schedUnlock+0xc4>)
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	08db      	lsrs	r3, r3, #3
 80049ec:	4a1c      	ldr	r2, [pc, #112]	@ (8004a60 <QK_schedUnlock+0xcc>)
 80049ee:	4413      	add	r3, r2
 80049f0:	7c1b      	ldrb	r3, [r3, #16]
 80049f2:	461a      	mov	r2, r3
 80049f4:	4b18      	ldr	r3, [pc, #96]	@ (8004a58 <QK_schedUnlock+0xc4>)
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	f003 0307 	and.w	r3, r3, #7
 80049fc:	fa22 f303 	lsr.w	r3, r2, r3
 8004a00:	f003 0301 	and.w	r3, r3, #1
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d013      	beq.n	8004a30 <QK_schedUnlock+0x9c>
 8004a08:	2033      	movs	r0, #51	@ 0x33
 8004a0a:	f000 fedd 	bl	80057c8 <QS_beginRec_>
            QS_TIME_PRE_(); // timestamp
 8004a0e:	f7fb fdc3 	bl	8000598 <QS_onGetTime>
 8004a12:	4603      	mov	r3, r0
 8004a14:	4618      	mov	r0, r3
 8004a16:	f001 f993 	bl	8005d40 <QS_u32_raw_>
            // current lock ceiling (old), previous lock ceiling (new)
            QS_2U8_PRE_((uint8_t)QK_priv_.lockCeil, (uint8_t)prevCeil);
 8004a1a:	4b0f      	ldr	r3, [pc, #60]	@ (8004a58 <QK_schedUnlock+0xc4>)
 8004a1c:	691b      	ldr	r3, [r3, #16]
 8004a1e:	b2db      	uxtb	r3, r3
 8004a20:	687a      	ldr	r2, [r7, #4]
 8004a22:	b2d2      	uxtb	r2, r2
 8004a24:	4611      	mov	r1, r2
 8004a26:	4618      	mov	r0, r3
 8004a28:	f001 f82e 	bl	8005a88 <QS_2u8_raw_>
        QS_END_PRE_()
 8004a2c:	f000 ff4c 	bl	80058c8 <QS_endRec_>

        // restore the previous lock ceiling
        QK_priv_.lockCeil = prevCeil;
 8004a30:	4a09      	ldr	r2, [pc, #36]	@ (8004a58 <QK_schedUnlock+0xc4>)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6113      	str	r3, [r2, #16]
    #ifndef Q_UNSAFE
        QK_priv_.lockCeil_dis = (uint_fast8_t)(~prevCeil);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	43db      	mvns	r3, r3
 8004a3a:	4a07      	ldr	r2, [pc, #28]	@ (8004a58 <QK_schedUnlock+0xc4>)
 8004a3c:	6293      	str	r3, [r2, #40]	@ 0x28
    #endif

        // find if any AOs should be run after unlocking the scheduler
        if (QK_sched_() != 0U) { // preemption needed?
 8004a3e:	f000 f811 	bl	8004a64 <QK_sched_>
 8004a42:	4603      	mov	r3, r0
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d001      	beq.n	8004a4c <QK_schedUnlock+0xb8>
            QK_activate_(); // activate any unlocked AOs
 8004a48:	f000 f870 	bl	8004b2c <QK_activate_>
        }

        QF_MEM_APP();
        QF_CRIT_EXIT();
 8004a4c:	f7fd fcb8 	bl	80023c0 <QF_crit_exit_>
    }
}
 8004a50:	bf00      	nop
 8004a52:	3710      	adds	r7, #16
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}
 8004a58:	20000a58 	.word	0x20000a58
 8004a5c:	08007948 	.word	0x08007948
 8004a60:	20000a84 	.word	0x20000a84

08004a64 <QK_sched_>:

//${QK::QK-base::sched_} .....................................................
//! @static @private @memberof QK
uint_fast8_t QK_sched_(void) {
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b082      	sub	sp, #8
 8004a68:	af00      	add	r7, sp, #0
    // NOTE: this function is entered with interrupts DISABLED

    Q_REQUIRE_INCRIT(402, QPSet_verify_(&QK_priv_.readySet,
 8004a6a:	492d      	ldr	r1, [pc, #180]	@ (8004b20 <QK_sched_+0xbc>)
 8004a6c:	482d      	ldr	r0, [pc, #180]	@ (8004b24 <QK_sched_+0xc0>)
 8004a6e:	f7ff ff16 	bl	800489e <QPSet_verify_>
 8004a72:	4603      	mov	r3, r0
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d104      	bne.n	8004a82 <QK_sched_+0x1e>
 8004a78:	f44f 71c9 	mov.w	r1, #402	@ 0x192
 8004a7c:	482a      	ldr	r0, [pc, #168]	@ (8004b28 <QK_sched_+0xc4>)
 8004a7e:	f7fb ffd5 	bl	8000a2c <Q_onError>
                                        &QK_priv_.readySet_dis));
    uint_fast8_t p;
    if (QPSet_isEmpty(&QK_priv_.readySet)) {
 8004a82:	4828      	ldr	r0, [pc, #160]	@ (8004b24 <QK_sched_+0xc0>)
 8004a84:	f7ff fec4 	bl	8004810 <QPSet_isEmpty>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d002      	beq.n	8004a94 <QK_sched_+0x30>
        p = 0U; // no activation needed
 8004a8e:	2300      	movs	r3, #0
 8004a90:	607b      	str	r3, [r7, #4]
 8004a92:	e03f      	b.n	8004b14 <QK_sched_+0xb0>
    }
    else {
        // find the highest-prio AO with non-empty event queue
        p = QPSet_findMax(&QK_priv_.readySet);
 8004a94:	4823      	ldr	r0, [pc, #140]	@ (8004b24 <QK_sched_+0xc0>)
 8004a96:	f7ff fee2 	bl	800485e <QPSet_findMax>
 8004a9a:	6078      	str	r0, [r7, #4]

        Q_ASSERT_INCRIT(412,
 8004a9c:	4b21      	ldr	r3, [pc, #132]	@ (8004b24 <QK_sched_+0xc0>)
 8004a9e:	68da      	ldr	r2, [r3, #12]
 8004aa0:	4b20      	ldr	r3, [pc, #128]	@ (8004b24 <QK_sched_+0xc0>)
 8004aa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aa4:	43db      	mvns	r3, r3
 8004aa6:	429a      	cmp	r2, r3
 8004aa8:	d004      	beq.n	8004ab4 <QK_sched_+0x50>
 8004aaa:	f44f 71ce 	mov.w	r1, #412	@ 0x19c
 8004aae:	481e      	ldr	r0, [pc, #120]	@ (8004b28 <QK_sched_+0xc4>)
 8004ab0:	f7fb ffbc 	bl	8000a2c <Q_onError>
            QK_priv_.actThre == (uint_fast8_t)(~QK_priv_.actThre_dis));

        // is the AO's prio. below the active preemption-threshold?
        if (p <= QK_priv_.actThre) {
 8004ab4:	4b1b      	ldr	r3, [pc, #108]	@ (8004b24 <QK_sched_+0xc0>)
 8004ab6:	68db      	ldr	r3, [r3, #12]
 8004ab8:	687a      	ldr	r2, [r7, #4]
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d802      	bhi.n	8004ac4 <QK_sched_+0x60>
            p = 0U; // no activation needed
 8004abe:	2300      	movs	r3, #0
 8004ac0:	607b      	str	r3, [r7, #4]
 8004ac2:	e027      	b.n	8004b14 <QK_sched_+0xb0>
        }
        else {
            Q_ASSERT_INCRIT(422, QK_priv_.lockCeil
 8004ac4:	4b17      	ldr	r3, [pc, #92]	@ (8004b24 <QK_sched_+0xc0>)
 8004ac6:	691a      	ldr	r2, [r3, #16]
 8004ac8:	4b16      	ldr	r3, [pc, #88]	@ (8004b24 <QK_sched_+0xc0>)
 8004aca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004acc:	43db      	mvns	r3, r3
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d004      	beq.n	8004adc <QK_sched_+0x78>
 8004ad2:	f44f 71d3 	mov.w	r1, #422	@ 0x1a6
 8004ad6:	4814      	ldr	r0, [pc, #80]	@ (8004b28 <QK_sched_+0xc4>)
 8004ad8:	f7fb ffa8 	bl	8000a2c <Q_onError>
                == (uint_fast8_t)(~QK_priv_.lockCeil_dis));

            // is the AO's prio. below the lock-ceiling?
            if (p <= QK_priv_.lockCeil) {
 8004adc:	4b11      	ldr	r3, [pc, #68]	@ (8004b24 <QK_sched_+0xc0>)
 8004ade:	691b      	ldr	r3, [r3, #16]
 8004ae0:	687a      	ldr	r2, [r7, #4]
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	d802      	bhi.n	8004aec <QK_sched_+0x88>
                p = 0U; // no activation needed
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	607b      	str	r3, [r7, #4]
 8004aea:	e013      	b.n	8004b14 <QK_sched_+0xb0>
            }
            else {
                Q_ASSERT_INCRIT(432, QK_priv_.nextPrio
 8004aec:	4b0d      	ldr	r3, [pc, #52]	@ (8004b24 <QK_sched_+0xc0>)
 8004aee:	689a      	ldr	r2, [r3, #8]
 8004af0:	4b0c      	ldr	r3, [pc, #48]	@ (8004b24 <QK_sched_+0xc0>)
 8004af2:	6a1b      	ldr	r3, [r3, #32]
 8004af4:	43db      	mvns	r3, r3
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d004      	beq.n	8004b04 <QK_sched_+0xa0>
 8004afa:	f44f 71d8 	mov.w	r1, #432	@ 0x1b0
 8004afe:	480a      	ldr	r0, [pc, #40]	@ (8004b28 <QK_sched_+0xc4>)
 8004b00:	f7fb ff94 	bl	8000a2c <Q_onError>
                    == (uint_fast8_t)(~QK_priv_.nextPrio_dis));
                QK_priv_.nextPrio = p; // next AO to run
 8004b04:	4a07      	ldr	r2, [pc, #28]	@ (8004b24 <QK_sched_+0xc0>)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6093      	str	r3, [r2, #8]
    #ifndef Q_UNSAFE
                QK_priv_.nextPrio_dis = (uint_fast8_t)(~QK_priv_.nextPrio);
 8004b0a:	4b06      	ldr	r3, [pc, #24]	@ (8004b24 <QK_sched_+0xc0>)
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	43db      	mvns	r3, r3
 8004b10:	4a04      	ldr	r2, [pc, #16]	@ (8004b24 <QK_sched_+0xc0>)
 8004b12:	6213      	str	r3, [r2, #32]
    #endif
            }
        }
    }

    return p;
 8004b14:	687b      	ldr	r3, [r7, #4]
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3708      	adds	r7, #8
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}
 8004b1e:	bf00      	nop
 8004b20:	20000a70 	.word	0x20000a70
 8004b24:	20000a58 	.word	0x20000a58
 8004b28:	08007948 	.word	0x08007948

08004b2c <QK_activate_>:

//${QK::QK-base::activate_} ..................................................
//! @static @private @memberof QK
void QK_activate_(void) {
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b088      	sub	sp, #32
 8004b30:	af00      	add	r7, sp, #0
    // NOTE: this function is entered with interrupts DISABLED

    uint_fast8_t const prio_in = QK_priv_.actPrio; // save initial prio.
 8004b32:	4b82      	ldr	r3, [pc, #520]	@ (8004d3c <QK_activate_+0x210>)
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	613b      	str	r3, [r7, #16]
    uint_fast8_t p = QK_priv_.nextPrio; // next prio to run
 8004b38:	4b80      	ldr	r3, [pc, #512]	@ (8004d3c <QK_activate_+0x210>)
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	61fb      	str	r3, [r7, #28]

    Q_REQUIRE_INCRIT(502,
 8004b3e:	4b7f      	ldr	r3, [pc, #508]	@ (8004d3c <QK_activate_+0x210>)
 8004b40:	69db      	ldr	r3, [r3, #28]
 8004b42:	43db      	mvns	r3, r3
 8004b44:	693a      	ldr	r2, [r7, #16]
 8004b46:	429a      	cmp	r2, r3
 8004b48:	d105      	bne.n	8004b56 <QK_activate_+0x2a>
 8004b4a:	4b7c      	ldr	r3, [pc, #496]	@ (8004d3c <QK_activate_+0x210>)
 8004b4c:	6a1b      	ldr	r3, [r3, #32]
 8004b4e:	43db      	mvns	r3, r3
 8004b50:	69fa      	ldr	r2, [r7, #28]
 8004b52:	429a      	cmp	r2, r3
 8004b54:	d004      	beq.n	8004b60 <QK_activate_+0x34>
 8004b56:	f44f 71fb 	mov.w	r1, #502	@ 0x1f6
 8004b5a:	4879      	ldr	r0, [pc, #484]	@ (8004d40 <QK_activate_+0x214>)
 8004b5c:	f7fb ff66 	bl	8000a2c <Q_onError>
       (prio_in == (uint_fast8_t)(~QK_priv_.actPrio_dis))
       && (p == (uint_fast8_t)(~QK_priv_.nextPrio_dis)));
    Q_REQUIRE_INCRIT(510, (prio_in <= QF_MAX_ACTIVE)
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	2b20      	cmp	r3, #32
 8004b64:	d805      	bhi.n	8004b72 <QK_activate_+0x46>
 8004b66:	69fb      	ldr	r3, [r7, #28]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d002      	beq.n	8004b72 <QK_activate_+0x46>
 8004b6c:	69fb      	ldr	r3, [r7, #28]
 8004b6e:	2b20      	cmp	r3, #32
 8004b70:	d904      	bls.n	8004b7c <QK_activate_+0x50>
 8004b72:	f44f 71ff 	mov.w	r1, #510	@ 0x1fe
 8004b76:	4872      	ldr	r0, [pc, #456]	@ (8004d40 <QK_activate_+0x214>)
 8004b78:	f7fb ff58 	bl	8000a2c <Q_onError>
       && (0U < p) && (p <= QF_MAX_ACTIVE));

    #if (defined QF_ON_CONTEXT_SW) || (defined Q_SPY)
    uint_fast8_t pprev = prio_in;
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	61bb      	str	r3, [r7, #24]
    #endif // QF_ON_CONTEXT_SW || Q_SPY

    QK_priv_.nextPrio = 0U; // clear for the next time
 8004b80:	4b6e      	ldr	r3, [pc, #440]	@ (8004d3c <QK_activate_+0x210>)
 8004b82:	2200      	movs	r2, #0
 8004b84:	609a      	str	r2, [r3, #8]
    #ifndef Q_UNSAFE
    QK_priv_.nextPrio_dis = (uint_fast8_t)(~0U);
 8004b86:	4b6d      	ldr	r3, [pc, #436]	@ (8004d3c <QK_activate_+0x210>)
 8004b88:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004b8c:	621a      	str	r2, [r3, #32]
    #endif

    uint_fast8_t pthre_in;
    QActive *a;
    if (prio_in == 0U) { // preempting the idle thread?
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d102      	bne.n	8004b9a <QK_activate_+0x6e>
        pthre_in = 0U;
 8004b94:	2300      	movs	r3, #0
 8004b96:	617b      	str	r3, [r7, #20]
 8004b98:	e01c      	b.n	8004bd4 <QK_activate_+0xa8>
    }
    else {
        a = QActive_registry_[prio_in];
 8004b9a:	4a6a      	ldr	r2, [pc, #424]	@ (8004d44 <QK_activate_+0x218>)
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ba2:	60fb      	str	r3, [r7, #12]
        Q_ASSERT_INCRIT(510, a != (QActive *)0);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d104      	bne.n	8004bb4 <QK_activate_+0x88>
 8004baa:	f44f 71ff 	mov.w	r1, #510	@ 0x1fe
 8004bae:	4864      	ldr	r0, [pc, #400]	@ (8004d40 <QK_activate_+0x214>)
 8004bb0:	f7fb ff3c 	bl	8000a2c <Q_onError>

        pthre_in = (uint_fast8_t)a->pthre;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	7b5b      	ldrb	r3, [r3, #13]
 8004bb8:	617b      	str	r3, [r7, #20]
        Q_ASSERT_INCRIT(511, pthre_in ==
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004bc0:	43db      	mvns	r3, r3
 8004bc2:	b2db      	uxtb	r3, r3
 8004bc4:	697a      	ldr	r2, [r7, #20]
 8004bc6:	429a      	cmp	r2, r3
 8004bc8:	d004      	beq.n	8004bd4 <QK_activate_+0xa8>
 8004bca:	f240 11ff 	movw	r1, #511	@ 0x1ff
 8004bce:	485c      	ldr	r0, [pc, #368]	@ (8004d40 <QK_activate_+0x214>)
 8004bd0:	f7fb ff2c 	bl	8000a2c <Q_onError>
            (uint_fast8_t)(~(uint_fast8_t)a->pthre_dis & 0xFFU));
    }

    // loop until no more ready-to-run AOs of higher pthre than the initial
    do  {
        a = QActive_registry_[p]; // obtain the pointer to the AO
 8004bd4:	4a5b      	ldr	r2, [pc, #364]	@ (8004d44 <QK_activate_+0x218>)
 8004bd6:	69fb      	ldr	r3, [r7, #28]
 8004bd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bdc:	60fb      	str	r3, [r7, #12]
        Q_ASSERT_INCRIT(520, a != (QActive *)0); // the AO must be registered
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d104      	bne.n	8004bee <QK_activate_+0xc2>
 8004be4:	f44f 7102 	mov.w	r1, #520	@ 0x208
 8004be8:	4855      	ldr	r0, [pc, #340]	@ (8004d40 <QK_activate_+0x214>)
 8004bea:	f7fb ff1f 	bl	8000a2c <Q_onError>
        uint_fast8_t const pthre = (uint_fast8_t)a->pthre;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	7b5b      	ldrb	r3, [r3, #13]
 8004bf2:	60bb      	str	r3, [r7, #8]
        Q_ASSERT_INCRIT(522, pthre ==
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004bfa:	43db      	mvns	r3, r3
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	68ba      	ldr	r2, [r7, #8]
 8004c00:	429a      	cmp	r2, r3
 8004c02:	d004      	beq.n	8004c0e <QK_activate_+0xe2>
 8004c04:	f240 210a 	movw	r1, #522	@ 0x20a
 8004c08:	484d      	ldr	r0, [pc, #308]	@ (8004d40 <QK_activate_+0x214>)
 8004c0a:	f7fb ff0f 	bl	8000a2c <Q_onError>
            (uint_fast8_t)(~(uint_fast8_t)a->pthre_dis & 0xFFU));

        // set new active prio. and preemption-threshold
        QK_priv_.actPrio = p;
 8004c0e:	4a4b      	ldr	r2, [pc, #300]	@ (8004d3c <QK_activate_+0x210>)
 8004c10:	69fb      	ldr	r3, [r7, #28]
 8004c12:	6053      	str	r3, [r2, #4]
        QK_priv_.actThre = pthre;
 8004c14:	4a49      	ldr	r2, [pc, #292]	@ (8004d3c <QK_activate_+0x210>)
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	60d3      	str	r3, [r2, #12]
    #ifndef Q_UNSAFE
        QK_priv_.actPrio_dis = (uint_fast8_t)(~p);
 8004c1a:	69fb      	ldr	r3, [r7, #28]
 8004c1c:	43db      	mvns	r3, r3
 8004c1e:	4a47      	ldr	r2, [pc, #284]	@ (8004d3c <QK_activate_+0x210>)
 8004c20:	61d3      	str	r3, [r2, #28]
        QK_priv_.actThre_dis = (uint_fast8_t)(~pthre);
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	43db      	mvns	r3, r3
 8004c26:	4a45      	ldr	r2, [pc, #276]	@ (8004d3c <QK_activate_+0x210>)
 8004c28:	6253      	str	r3, [r2, #36]	@ 0x24
    #endif

    #if (defined QF_ON_CONTEXT_SW) || (defined Q_SPY)
        if (p != pprev) { // changing threads?
 8004c2a:	69fa      	ldr	r2, [r7, #28]
 8004c2c:	69bb      	ldr	r3, [r7, #24]
 8004c2e:	429a      	cmp	r2, r3
 8004c30:	d029      	beq.n	8004c86 <QK_activate_+0x15a>

            QS_BEGIN_PRE_(QS_SCHED_NEXT, p)
 8004c32:	4b45      	ldr	r3, [pc, #276]	@ (8004d48 <QK_activate_+0x21c>)
 8004c34:	799b      	ldrb	r3, [r3, #6]
 8004c36:	f003 0310 	and.w	r3, r3, #16
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d021      	beq.n	8004c82 <QK_activate_+0x156>
 8004c3e:	69fb      	ldr	r3, [r7, #28]
 8004c40:	08db      	lsrs	r3, r3, #3
 8004c42:	4a41      	ldr	r2, [pc, #260]	@ (8004d48 <QK_activate_+0x21c>)
 8004c44:	4413      	add	r3, r2
 8004c46:	7c1b      	ldrb	r3, [r3, #16]
 8004c48:	461a      	mov	r2, r3
 8004c4a:	69fb      	ldr	r3, [r7, #28]
 8004c4c:	f003 0307 	and.w	r3, r3, #7
 8004c50:	fa22 f303 	lsr.w	r3, r2, r3
 8004c54:	f003 0301 	and.w	r3, r3, #1
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d012      	beq.n	8004c82 <QK_activate_+0x156>
 8004c5c:	2034      	movs	r0, #52	@ 0x34
 8004c5e:	f000 fdb3 	bl	80057c8 <QS_beginRec_>
                QS_TIME_PRE_();     // timestamp
 8004c62:	f7fb fc99 	bl	8000598 <QS_onGetTime>
 8004c66:	4603      	mov	r3, r0
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f001 f869 	bl	8005d40 <QS_u32_raw_>
                QS_2U8_PRE_(p,      // prio. of the scheduled AO
 8004c6e:	69fb      	ldr	r3, [r7, #28]
 8004c70:	b2db      	uxtb	r3, r3
 8004c72:	69ba      	ldr	r2, [r7, #24]
 8004c74:	b2d2      	uxtb	r2, r2
 8004c76:	4611      	mov	r1, r2
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f000 ff05 	bl	8005a88 <QS_2u8_raw_>
                            pprev); // previous prio.
            QS_END_PRE_()
 8004c7e:	f000 fe23 	bl	80058c8 <QS_endRec_>

    #ifdef QF_ON_CONTEXT_SW
            QF_onContextSw(QActive_registry_[pprev], a);
    #endif // QF_ON_CONTEXT_SW

            pprev = p; // update previous prio.
 8004c82:	69fb      	ldr	r3, [r7, #28]
 8004c84:	61bb      	str	r3, [r7, #24]
        }
    #endif // QF_ON_CONTEXT_SW || Q_SPY

        QF_INT_ENABLE(); // unconditionally enable interrupts
 8004c86:	f7fd fb77 	bl	8002378 <QF_int_enable_>

        QEvt const * const e = QActive_get_(a);
 8004c8a:	68f8      	ldr	r0, [r7, #12]
 8004c8c:	f7fe fc88 	bl	80035a0 <QActive_get_>
 8004c90:	6078      	str	r0, [r7, #4]
        // NOTE QActive_get_() performs QF_MEM_APP() before return

        // dispatch event (virtual call)
        (*a->super.vptr->dispatch)(&a->super, e, p);
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	68f8      	ldr	r0, [r7, #12]
 8004c9a:	69fa      	ldr	r2, [r7, #28]
 8004c9c:	6879      	ldr	r1, [r7, #4]
 8004c9e:	4798      	blx	r3
    #if (QF_MAX_EPOOL > 0U)
        QF_gc(e);
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f7fe febf 	bl	8003a24 <QF_gc>
    #endif

        // determine the next highest-prio. AO ready to run...
        QF_INT_DISABLE(); // unconditionally disable interrupts
 8004ca6:	f7fd fb55 	bl	8002354 <QF_int_disable_>
        QF_MEM_SYS();

        // internal integrity check (duplicate inverse storage)
        Q_ASSERT_INCRIT(532, QPSet_verify_(&QK_priv_.readySet,
 8004caa:	4928      	ldr	r1, [pc, #160]	@ (8004d4c <QK_activate_+0x220>)
 8004cac:	4823      	ldr	r0, [pc, #140]	@ (8004d3c <QK_activate_+0x210>)
 8004cae:	f7ff fdf6 	bl	800489e <QPSet_verify_>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d104      	bne.n	8004cc2 <QK_activate_+0x196>
 8004cb8:	f44f 7105 	mov.w	r1, #532	@ 0x214
 8004cbc:	4820      	ldr	r0, [pc, #128]	@ (8004d40 <QK_activate_+0x214>)
 8004cbe:	f7fb feb5 	bl	8000a2c <Q_onError>
                                           &QK_priv_.readySet_dis));

        if (a->eQueue.frontEvt == (QEvt *)0) { // empty queue?
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	695b      	ldr	r3, [r3, #20]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d107      	bne.n	8004cda <QK_activate_+0x1ae>
            QPSet_remove(&QK_priv_.readySet, p);
 8004cca:	69f9      	ldr	r1, [r7, #28]
 8004ccc:	481b      	ldr	r0, [pc, #108]	@ (8004d3c <QK_activate_+0x210>)
 8004cce:	f7ff fdb0 	bl	8004832 <QPSet_remove>
    #ifndef Q_UNSAFE
            QPSet_update_(&QK_priv_.readySet, &QK_priv_.readySet_dis);
 8004cd2:	491e      	ldr	r1, [pc, #120]	@ (8004d4c <QK_activate_+0x220>)
 8004cd4:	4819      	ldr	r0, [pc, #100]	@ (8004d3c <QK_activate_+0x210>)
 8004cd6:	f7ff fdd2 	bl	800487e <QPSet_update_>
    #endif
        }

        if (QPSet_isEmpty(&QK_priv_.readySet)) {
 8004cda:	4818      	ldr	r0, [pc, #96]	@ (8004d3c <QK_activate_+0x210>)
 8004cdc:	f7ff fd98 	bl	8004810 <QPSet_isEmpty>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d002      	beq.n	8004cec <QK_activate_+0x1c0>
            p = 0U; // no activation needed
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	61fb      	str	r3, [r7, #28]
 8004cea:	e031      	b.n	8004d50 <QK_activate_+0x224>
        }
        else {
            // find new highest-prio AO ready to run...
            p = QPSet_findMax(&QK_priv_.readySet);
 8004cec:	4813      	ldr	r0, [pc, #76]	@ (8004d3c <QK_activate_+0x210>)
 8004cee:	f7ff fdb6 	bl	800485e <QPSet_findMax>
 8004cf2:	61f8      	str	r0, [r7, #28]

            // is the new prio. below the initial preemption-threshold?
            if (p <= pthre_in) {
 8004cf4:	69fa      	ldr	r2, [r7, #28]
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d802      	bhi.n	8004d02 <QK_activate_+0x1d6>
                p = 0U; // no activation needed
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	61fb      	str	r3, [r7, #28]
 8004d00:	e026      	b.n	8004d50 <QK_activate_+0x224>
            }
            else {
                Q_ASSERT_INCRIT(542, QK_priv_.lockCeil
 8004d02:	4b0e      	ldr	r3, [pc, #56]	@ (8004d3c <QK_activate_+0x210>)
 8004d04:	691a      	ldr	r2, [r3, #16]
 8004d06:	4b0d      	ldr	r3, [pc, #52]	@ (8004d3c <QK_activate_+0x210>)
 8004d08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d0a:	43db      	mvns	r3, r3
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d004      	beq.n	8004d1a <QK_activate_+0x1ee>
 8004d10:	f240 211e 	movw	r1, #542	@ 0x21e
 8004d14:	480a      	ldr	r0, [pc, #40]	@ (8004d40 <QK_activate_+0x214>)
 8004d16:	f7fb fe89 	bl	8000a2c <Q_onError>
                    == (uint_fast8_t)(~QK_priv_.lockCeil_dis));

                // is the AO's prio. below the lock preemption-threshold?
                if (p <= QK_priv_.lockCeil) {
 8004d1a:	4b08      	ldr	r3, [pc, #32]	@ (8004d3c <QK_activate_+0x210>)
 8004d1c:	691b      	ldr	r3, [r3, #16]
 8004d1e:	69fa      	ldr	r2, [r7, #28]
 8004d20:	429a      	cmp	r2, r3
 8004d22:	d802      	bhi.n	8004d2a <QK_activate_+0x1fe>
                    p = 0U; // no activation needed
 8004d24:	2300      	movs	r3, #0
 8004d26:	61fb      	str	r3, [r7, #28]
 8004d28:	e012      	b.n	8004d50 <QK_activate_+0x224>
                }
                else {
                    Q_ASSERT_INCRIT(550, p <= QF_MAX_ACTIVE);
 8004d2a:	69fb      	ldr	r3, [r7, #28]
 8004d2c:	2b20      	cmp	r3, #32
 8004d2e:	d90f      	bls.n	8004d50 <QK_activate_+0x224>
 8004d30:	f240 2126 	movw	r1, #550	@ 0x226
 8004d34:	4802      	ldr	r0, [pc, #8]	@ (8004d40 <QK_activate_+0x214>)
 8004d36:	f7fb fe79 	bl	8000a2c <Q_onError>
 8004d3a:	bf00      	nop
 8004d3c:	20000a58 	.word	0x20000a58
 8004d40:	08007948 	.word	0x08007948
 8004d44:	20000978 	.word	0x20000978
 8004d48:	20000a84 	.word	0x20000a84
 8004d4c:	20000a70 	.word	0x20000a70
                }
            }
        }
    } while (p != 0U);
 8004d50:	69fb      	ldr	r3, [r7, #28]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	f47f af3e 	bne.w	8004bd4 <QK_activate_+0xa8>

    // restore the active prio. and preemption-threshold
    QK_priv_.actPrio = prio_in;
 8004d58:	4a35      	ldr	r2, [pc, #212]	@ (8004e30 <QK_activate_+0x304>)
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	6053      	str	r3, [r2, #4]
    QK_priv_.actThre = pthre_in;
 8004d5e:	4a34      	ldr	r2, [pc, #208]	@ (8004e30 <QK_activate_+0x304>)
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	60d3      	str	r3, [r2, #12]
    #ifndef Q_UNSAFE
    QK_priv_.actPrio_dis = (uint_fast8_t)(~QK_priv_.actPrio);
 8004d64:	4b32      	ldr	r3, [pc, #200]	@ (8004e30 <QK_activate_+0x304>)
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	43db      	mvns	r3, r3
 8004d6a:	4a31      	ldr	r2, [pc, #196]	@ (8004e30 <QK_activate_+0x304>)
 8004d6c:	61d3      	str	r3, [r2, #28]
    QK_priv_.actThre_dis = (uint_fast8_t)(~QK_priv_.actThre);
 8004d6e:	4b30      	ldr	r3, [pc, #192]	@ (8004e30 <QK_activate_+0x304>)
 8004d70:	68db      	ldr	r3, [r3, #12]
 8004d72:	43db      	mvns	r3, r3
 8004d74:	4a2e      	ldr	r2, [pc, #184]	@ (8004e30 <QK_activate_+0x304>)
 8004d76:	6253      	str	r3, [r2, #36]	@ 0x24
    #endif

    #if (defined QF_ON_CONTEXT_SW) || (defined Q_SPY)
    if (prio_in != 0U) { // resuming an active object?
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d02d      	beq.n	8004dda <QK_activate_+0x2ae>
        a = QActive_registry_[prio_in]; // pointer to preempted AO
 8004d7e:	4a2d      	ldr	r2, [pc, #180]	@ (8004e34 <QK_activate_+0x308>)
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d86:	60fb      	str	r3, [r7, #12]

        QS_BEGIN_PRE_(QS_SCHED_NEXT, prio_in)
 8004d88:	4b2b      	ldr	r3, [pc, #172]	@ (8004e38 <QK_activate_+0x30c>)
 8004d8a:	799b      	ldrb	r3, [r3, #6]
 8004d8c:	f003 0310 	and.w	r3, r3, #16
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d049      	beq.n	8004e28 <QK_activate_+0x2fc>
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	08db      	lsrs	r3, r3, #3
 8004d98:	4a27      	ldr	r2, [pc, #156]	@ (8004e38 <QK_activate_+0x30c>)
 8004d9a:	4413      	add	r3, r2
 8004d9c:	7c1b      	ldrb	r3, [r3, #16]
 8004d9e:	461a      	mov	r2, r3
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	f003 0307 	and.w	r3, r3, #7
 8004da6:	fa22 f303 	lsr.w	r3, r2, r3
 8004daa:	f003 0301 	and.w	r3, r3, #1
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d03a      	beq.n	8004e28 <QK_activate_+0x2fc>
 8004db2:	2034      	movs	r0, #52	@ 0x34
 8004db4:	f000 fd08 	bl	80057c8 <QS_beginRec_>
            QS_TIME_PRE_();     // timestamp
 8004db8:	f7fb fbee 	bl	8000598 <QS_onGetTime>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f000 ffbe 	bl	8005d40 <QS_u32_raw_>
            // prio. of the resumed AO, previous prio.
            QS_2U8_PRE_(prio_in, pprev);
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	b2db      	uxtb	r3, r3
 8004dc8:	69ba      	ldr	r2, [r7, #24]
 8004dca:	b2d2      	uxtb	r2, r2
 8004dcc:	4611      	mov	r1, r2
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f000 fe5a 	bl	8005a88 <QS_2u8_raw_>
        QS_END_PRE_()
 8004dd4:	f000 fd78 	bl	80058c8 <QS_endRec_>
    #ifdef QF_ON_CONTEXT_SW
    QF_onContextSw(QActive_registry_[pprev], a);
    #endif // QF_ON_CONTEXT_SW

    #endif // QF_ON_CONTEXT_SW || Q_SPY
}
 8004dd8:	e026      	b.n	8004e28 <QK_activate_+0x2fc>
        a = (QActive *)0; // QK idle loop
 8004dda:	2300      	movs	r3, #0
 8004ddc:	60fb      	str	r3, [r7, #12]
        QS_BEGIN_PRE_(QS_SCHED_IDLE, pprev)
 8004dde:	4b16      	ldr	r3, [pc, #88]	@ (8004e38 <QK_activate_+0x30c>)
 8004de0:	799b      	ldrb	r3, [r3, #6]
 8004de2:	f003 0320 	and.w	r3, r3, #32
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d01e      	beq.n	8004e28 <QK_activate_+0x2fc>
 8004dea:	69bb      	ldr	r3, [r7, #24]
 8004dec:	08db      	lsrs	r3, r3, #3
 8004dee:	4a12      	ldr	r2, [pc, #72]	@ (8004e38 <QK_activate_+0x30c>)
 8004df0:	4413      	add	r3, r2
 8004df2:	7c1b      	ldrb	r3, [r3, #16]
 8004df4:	461a      	mov	r2, r3
 8004df6:	69bb      	ldr	r3, [r7, #24]
 8004df8:	f003 0307 	and.w	r3, r3, #7
 8004dfc:	fa22 f303 	lsr.w	r3, r2, r3
 8004e00:	f003 0301 	and.w	r3, r3, #1
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d00f      	beq.n	8004e28 <QK_activate_+0x2fc>
 8004e08:	2035      	movs	r0, #53	@ 0x35
 8004e0a:	f000 fcdd 	bl	80057c8 <QS_beginRec_>
            QS_TIME_PRE_();     // timestamp
 8004e0e:	f7fb fbc3 	bl	8000598 <QS_onGetTime>
 8004e12:	4603      	mov	r3, r0
 8004e14:	4618      	mov	r0, r3
 8004e16:	f000 ff93 	bl	8005d40 <QS_u32_raw_>
            QS_U8_PRE_(pprev);  // previous prio.
 8004e1a:	69bb      	ldr	r3, [r7, #24]
 8004e1c:	b2db      	uxtb	r3, r3
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f000 fdcc 	bl	80059bc <QS_u8_raw_>
        QS_END_PRE_()
 8004e24:	f000 fd50 	bl	80058c8 <QS_endRec_>
}
 8004e28:	bf00      	nop
 8004e2a:	3720      	adds	r7, #32
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}
 8004e30:	20000a58 	.word	0x20000a58
 8004e34:	20000978 	.word	0x20000978
 8004e38:	20000a84 	.word	0x20000a84

08004e3c <QF_init>:

//$define${QK::QF-cust} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

//${QK::QF-cust::init} .......................................................
//! @static @public @memberof QF
void QF_init(void) {
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b082      	sub	sp, #8
 8004e40:	af00      	add	r7, sp, #0
    QF_bzero_(&QF_priv_,                 sizeof(QF_priv_));
 8004e42:	2140      	movs	r1, #64	@ 0x40
 8004e44:	481e      	ldr	r0, [pc, #120]	@ (8004ec0 <QF_init+0x84>)
 8004e46:	f7fe fa03 	bl	8003250 <QF_bzero_>
    QF_bzero_(&QK_priv_,                 sizeof(QK_priv_));
 8004e4a:	212c      	movs	r1, #44	@ 0x2c
 8004e4c:	481d      	ldr	r0, [pc, #116]	@ (8004ec4 <QF_init+0x88>)
 8004e4e:	f7fe f9ff 	bl	8003250 <QF_bzero_>
    QF_bzero_(&QActive_registry_[0],     sizeof(QActive_registry_));
 8004e52:	2184      	movs	r1, #132	@ 0x84
 8004e54:	481c      	ldr	r0, [pc, #112]	@ (8004ec8 <QF_init+0x8c>)
 8004e56:	f7fe f9fb 	bl	8003250 <QF_bzero_>

    // setup the QK scheduler as initially locked and not running
    QK_priv_.lockCeil = (QF_MAX_ACTIVE + 1U); // scheduler locked
 8004e5a:	4b1a      	ldr	r3, [pc, #104]	@ (8004ec4 <QF_init+0x88>)
 8004e5c:	2221      	movs	r2, #33	@ 0x21
 8004e5e:	611a      	str	r2, [r3, #16]

    #ifndef Q_UNSAFE
    QPSet_update_(&QK_priv_.readySet, &QK_priv_.readySet_dis);
 8004e60:	491a      	ldr	r1, [pc, #104]	@ (8004ecc <QF_init+0x90>)
 8004e62:	4818      	ldr	r0, [pc, #96]	@ (8004ec4 <QF_init+0x88>)
 8004e64:	f7ff fd0b 	bl	800487e <QPSet_update_>
    QK_priv_.actPrio_dis  = (uint_fast8_t)(~0U);
 8004e68:	4b16      	ldr	r3, [pc, #88]	@ (8004ec4 <QF_init+0x88>)
 8004e6a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004e6e:	61da      	str	r2, [r3, #28]
    QK_priv_.nextPrio_dis = (uint_fast8_t)(~0U);
 8004e70:	4b14      	ldr	r3, [pc, #80]	@ (8004ec4 <QF_init+0x88>)
 8004e72:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004e76:	621a      	str	r2, [r3, #32]
    QK_priv_.actThre_dis  = (uint_fast8_t)(~0U);
 8004e78:	4b12      	ldr	r3, [pc, #72]	@ (8004ec4 <QF_init+0x88>)
 8004e7a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004e7e:	625a      	str	r2, [r3, #36]	@ 0x24
    QK_priv_.lockCeil_dis = (uint_fast8_t)(~QK_priv_.lockCeil);
 8004e80:	4b10      	ldr	r3, [pc, #64]	@ (8004ec4 <QF_init+0x88>)
 8004e82:	691b      	ldr	r3, [r3, #16]
 8004e84:	43db      	mvns	r3, r3
 8004e86:	4a0f      	ldr	r2, [pc, #60]	@ (8004ec4 <QF_init+0x88>)
 8004e88:	6293      	str	r3, [r2, #40]	@ 0x28
    #endif

    for (uint_fast8_t tickRate = 0U;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	607b      	str	r3, [r7, #4]
 8004e8e:	e00e      	b.n	8004eae <QF_init+0x72>
         tickRate < Q_DIM(QTimeEvt_timeEvtHead_);
         ++tickRate)
    {
        QTimeEvt_ctorX(&QTimeEvt_timeEvtHead_[tickRate],
 8004e90:	687a      	ldr	r2, [r7, #4]
 8004e92:	4613      	mov	r3, r2
 8004e94:	009b      	lsls	r3, r3, #2
 8004e96:	4413      	add	r3, r2
 8004e98:	009b      	lsls	r3, r3, #2
 8004e9a:	4a0d      	ldr	r2, [pc, #52]	@ (8004ed0 <QF_init+0x94>)
 8004e9c:	1898      	adds	r0, r3, r2
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2204      	movs	r2, #4
 8004ea2:	2100      	movs	r1, #0
 8004ea4:	f7ff fab4 	bl	8004410 <QTimeEvt_ctorX>
         ++tickRate)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	3301      	adds	r3, #1
 8004eac:	607b      	str	r3, [r7, #4]
         tickRate < Q_DIM(QTimeEvt_timeEvtHead_);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d0ed      	beq.n	8004e90 <QF_init+0x54>
                       (QActive *)0, (enum_t)Q_USER_SIG, tickRate);
    }

    #ifdef QK_INIT
    QK_INIT(); // port-specific initialization of the QK kernel
 8004eb4:	f7fd fa96 	bl	80023e4 <QK_init>
    #endif
}
 8004eb8:	bf00      	nop
 8004eba:	3708      	adds	r7, #8
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}
 8004ec0:	200009fc 	.word	0x200009fc
 8004ec4:	20000a58 	.word	0x20000a58
 8004ec8:	20000978 	.word	0x20000978
 8004ecc:	20000a70 	.word	0x20000a70
 8004ed0:	20000a44 	.word	0x20000a44

08004ed4 <QF_run>:
    // nothing else to do for the preemptive QK kernel
}

//${QK::QF-cust::run} ........................................................
//! @static @public @memberof QF
int_t QF_run(void) {
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	af00      	add	r7, sp, #0
    #ifdef Q_SPY
    // produce the QS_QF_RUN trace record
    QF_INT_DISABLE();
 8004ed8:	f7fd fa3c 	bl	8002354 <QF_int_disable_>
    QF_MEM_SYS();
    QS_beginRec_((uint_fast8_t)QS_QF_RUN);
 8004edc:	2046      	movs	r0, #70	@ 0x46
 8004ede:	f000 fc73 	bl	80057c8 <QS_beginRec_>
    QS_endRec_();
 8004ee2:	f000 fcf1 	bl	80058c8 <QS_endRec_>
    QF_MEM_APP();
    QF_INT_ENABLE();
 8004ee6:	f7fd fa47 	bl	8002378 <QF_int_enable_>
    #endif // Q_SPY

    QF_onStartup(); // application-specific startup callback
 8004eea:	f7fb fe53 	bl	8000b94 <QF_onStartup>

    QF_INT_DISABLE();
 8004eee:	f7fd fa31 	bl	8002354 <QF_int_disable_>
    QF_MEM_SYS();

    #ifdef QK_START
    QK_START(); // port-specific startup of the QK kernel
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	f383 8814 	msr	CONTROL, r3
    #endif

    QK_priv_.lockCeil = 0U; // unlock the QK scheduler
 8004ef8:	4b09      	ldr	r3, [pc, #36]	@ (8004f20 <QF_run+0x4c>)
 8004efa:	2200      	movs	r2, #0
 8004efc:	611a      	str	r2, [r3, #16]
    #ifndef Q_UNSAFE
    QK_priv_.lockCeil_dis = (uint_fast8_t)(~0U);
 8004efe:	4b08      	ldr	r3, [pc, #32]	@ (8004f20 <QF_run+0x4c>)
 8004f00:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004f04:	629a      	str	r2, [r3, #40]	@ 0x28
    #endif

    // activate AOs to process events posted so far
    if (QK_sched_() != 0U) {
 8004f06:	f7ff fdad 	bl	8004a64 <QK_sched_>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d001      	beq.n	8004f14 <QF_run+0x40>
        QK_activate_();
 8004f10:	f7ff fe0c 	bl	8004b2c <QK_activate_>
    }

    QF_MEM_APP();
    QF_INT_ENABLE();
 8004f14:	f7fd fa30 	bl	8002378 <QF_int_enable_>

    for (;;) { // QK idle loop...
        QK_onIdle(); // application-specific QK on-idle callback
 8004f18:	f7fb fe64 	bl	8000be4 <QK_onIdle>
 8004f1c:	e7fc      	b.n	8004f18 <QF_run+0x44>
 8004f1e:	bf00      	nop
 8004f20:	20000a58 	.word	0x20000a58

08004f24 <QActive_start_>:
    QEvt const * * const qSto,
    uint_fast16_t const qLen,
    void * const stkSto,
    uint_fast16_t const stkSize,
    void const * const par)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b086      	sub	sp, #24
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	60f8      	str	r0, [r7, #12]
 8004f2c:	607a      	str	r2, [r7, #4]
 8004f2e:	603b      	str	r3, [r7, #0]
 8004f30:	460b      	mov	r3, r1
 8004f32:	817b      	strh	r3, [r7, #10]
    Q_UNUSED_PAR(stkSto);  // not needed in QK
    Q_UNUSED_PAR(stkSize); // not needed in QK

    QF_CRIT_STAT
    QF_CRIT_ENTRY();
 8004f34:	f7fd fa32 	bl	800239c <QF_crit_entry_>
    __asm volatile ("mrs %0,ipsr" : "=r" (regIPSR));
 8004f38:	f3ef 8305 	mrs	r3, IPSR
 8004f3c:	617b      	str	r3, [r7, #20]
    return regIPSR;
 8004f3e:	697b      	ldr	r3, [r7, #20]
    QF_MEM_SYS();

    Q_REQUIRE_INCRIT(300, (!QK_ISR_CONTEXT_())
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d102      	bne.n	8004f4a <QActive_start_+0x26>
 8004f44:	6a3b      	ldr	r3, [r7, #32]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d004      	beq.n	8004f54 <QActive_start_+0x30>
 8004f4a:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8004f4e:	4819      	ldr	r0, [pc, #100]	@ (8004fb4 <QActive_start_+0x90>)
 8004f50:	f7fb fd6c 	bl	8000a2c <Q_onError>
                      && (stkSto == (void *)0));
    QF_MEM_APP();
    QF_CRIT_EXIT();
 8004f54:	f7fd fa34 	bl	80023c0 <QF_crit_exit_>

    me->prio  = (uint8_t)(prioSpec & 0xFFU); // QF-prio. of the AO
 8004f58:	897b      	ldrh	r3, [r7, #10]
 8004f5a:	b2da      	uxtb	r2, r3
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	731a      	strb	r2, [r3, #12]
    me->pthre = (uint8_t)(prioSpec >> 8U);   // preemption-threshold
 8004f60:	897b      	ldrh	r3, [r7, #10]
 8004f62:	0a1b      	lsrs	r3, r3, #8
 8004f64:	b29b      	uxth	r3, r3
 8004f66:	b2da      	uxtb	r2, r3
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	735a      	strb	r2, [r3, #13]
    QActive_register_(me); // make QF aware of this active object
 8004f6c:	68f8      	ldr	r0, [r7, #12]
 8004f6e:	f7ff f97f 	bl	8004270 <QActive_register_>

    QEQueue_init(&me->eQueue, qSto, qLen); // init the built-in queue
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	3314      	adds	r3, #20
 8004f76:	683a      	ldr	r2, [r7, #0]
 8004f78:	6879      	ldr	r1, [r7, #4]
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f7ff fa04 	bl	8004388 <QEQueue_init>

    // top-most initial tran. (virtual call)
    (*me->super.vptr->init)(&me->super, par, me->prio);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	68f8      	ldr	r0, [r7, #12]
 8004f88:	68fa      	ldr	r2, [r7, #12]
 8004f8a:	7b12      	ldrb	r2, [r2, #12]
 8004f8c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004f8e:	4798      	blx	r3
    QS_FLUSH(); // flush the trace buffer to the host
 8004f90:	f7fb fb24 	bl	80005dc <QS_onFlush>

    // See if this AO needs to be scheduled if QK is already running
    QF_CRIT_ENTRY();
 8004f94:	f7fd fa02 	bl	800239c <QF_crit_entry_>
    QF_MEM_SYS();
    if (QK_sched_() != 0U) { // activation needed?
 8004f98:	f7ff fd64 	bl	8004a64 <QK_sched_>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d001      	beq.n	8004fa6 <QActive_start_+0x82>
        QK_activate_();
 8004fa2:	f7ff fdc3 	bl	8004b2c <QK_activate_>
    }
    QF_MEM_APP();
    QF_CRIT_EXIT();
 8004fa6:	f7fd fa0b 	bl	80023c0 <QF_crit_exit_>
}
 8004faa:	bf00      	nop
 8004fac:	3718      	adds	r7, #24
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}
 8004fb2:	bf00      	nop
 8004fb4:	08007948 	.word	0x08007948

08004fb8 <QS_initBuf>:
//${QS::QS-TX::initBuf} ......................................................
//! @static @public @memberof QS
void QS_initBuf(
    uint8_t * const sto,
    uint_fast32_t const stoSize)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b082      	sub	sp, #8
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
 8004fc0:	6039      	str	r1, [r7, #0]
    QS_priv_.buf      = &sto[0];
 8004fc2:	4a17      	ldr	r2, [pc, #92]	@ (8005020 <QS_initBuf+0x68>)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6053      	str	r3, [r2, #4]
    QS_priv_.end      = (QSCtr)stoSize;
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	b29a      	uxth	r2, r3
 8004fcc:	4b14      	ldr	r3, [pc, #80]	@ (8005020 <QS_initBuf+0x68>)
 8004fce:	811a      	strh	r2, [r3, #8]
    QS_priv_.head     = 0U;
 8004fd0:	4b13      	ldr	r3, [pc, #76]	@ (8005020 <QS_initBuf+0x68>)
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	815a      	strh	r2, [r3, #10]
    QS_priv_.tail     = 0U;
 8004fd6:	4b12      	ldr	r3, [pc, #72]	@ (8005020 <QS_initBuf+0x68>)
 8004fd8:	2200      	movs	r2, #0
 8004fda:	819a      	strh	r2, [r3, #12]
    QS_priv_.used     = 0U;
 8004fdc:	4b10      	ldr	r3, [pc, #64]	@ (8005020 <QS_initBuf+0x68>)
 8004fde:	2200      	movs	r2, #0
 8004fe0:	81da      	strh	r2, [r3, #14]
    QS_priv_.seq      = 0U;
 8004fe2:	4b0f      	ldr	r3, [pc, #60]	@ (8005020 <QS_initBuf+0x68>)
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	741a      	strb	r2, [r3, #16]
    QS_priv_.chksum   = 0U;
 8004fe8:	4b0d      	ldr	r3, [pc, #52]	@ (8005020 <QS_initBuf+0x68>)
 8004fea:	2200      	movs	r2, #0
 8004fec:	745a      	strb	r2, [r3, #17]
    QS_priv_.critNest = 0U;
 8004fee:	4b0c      	ldr	r3, [pc, #48]	@ (8005020 <QS_initBuf+0x68>)
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	749a      	strb	r2, [r3, #18]

    QS_glbFilter_(-(int_fast16_t)QS_ALL_RECORDS); // all global filters OFF
 8004ff4:	f06f 00ef 	mvn.w	r0, #239	@ 0xef
 8004ff8:	f000 f848 	bl	800508c <QS_glbFilter_>
    QS_locFilter_((int_fast16_t)QS_ALL_IDS);      // all local filters ON
 8004ffc:	20f0      	movs	r0, #240	@ 0xf0
 8004ffe:	f000 faff 	bl	8005600 <QS_locFilter_>
    QS_priv_.locFilter_AP = (void *)0;            // deprecated "AP-filter"
 8005002:	4b07      	ldr	r3, [pc, #28]	@ (8005020 <QS_initBuf+0x68>)
 8005004:	2200      	movs	r2, #0
 8005006:	601a      	str	r2, [r3, #0]

    // produce an empty record to "flush" the QS trace buffer
    QS_beginRec_((uint_fast8_t)QS_EMPTY);
 8005008:	2000      	movs	r0, #0
 800500a:	f000 fbdd 	bl	80057c8 <QS_beginRec_>
    QS_endRec_();
 800500e:	f000 fc5b 	bl	80058c8 <QS_endRec_>

    // produce the reset record to inform QSPY of a new session
    QS_target_info_pre_(0xFFU);
 8005012:	20ff      	movs	r0, #255	@ 0xff
 8005014:	f001 f960 	bl	80062d8 <QS_target_info_pre_>

    // hold off flushing after successful initialization (see QS_INIT())
}
 8005018:	bf00      	nop
 800501a:	3708      	adds	r7, #8
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}
 8005020:	20000aa4 	.word	0x20000aa4

08005024 <QS_getByte>:

//${QS::QS-TX::getByte} ......................................................
//! @static @public @memberof QS
uint16_t QS_getByte(void) {
 8005024:	b480      	push	{r7}
 8005026:	b083      	sub	sp, #12
 8005028:	af00      	add	r7, sp, #0
    uint16_t ret;
    if (QS_priv_.used == 0U) {
 800502a:	4b17      	ldr	r3, [pc, #92]	@ (8005088 <QS_getByte+0x64>)
 800502c:	89db      	ldrh	r3, [r3, #14]
 800502e:	b29b      	uxth	r3, r3
 8005030:	2b00      	cmp	r3, #0
 8005032:	d103      	bne.n	800503c <QS_getByte+0x18>
        ret = QS_EOD; // set End-Of-Data
 8005034:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005038:	80fb      	strh	r3, [r7, #6]
 800503a:	e01e      	b.n	800507a <QS_getByte+0x56>
    }
    else {
        uint8_t const * const buf = QS_priv_.buf;  // put in a temporary
 800503c:	4b12      	ldr	r3, [pc, #72]	@ (8005088 <QS_getByte+0x64>)
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	603b      	str	r3, [r7, #0]
        QSCtr tail = QS_priv_.tail; // put in a temporary (register)
 8005042:	4b11      	ldr	r3, [pc, #68]	@ (8005088 <QS_getByte+0x64>)
 8005044:	899b      	ldrh	r3, [r3, #12]
 8005046:	80bb      	strh	r3, [r7, #4]
        ret = (uint16_t)buf[tail]; // set the byte to return
 8005048:	88bb      	ldrh	r3, [r7, #4]
 800504a:	683a      	ldr	r2, [r7, #0]
 800504c:	4413      	add	r3, r2
 800504e:	781b      	ldrb	r3, [r3, #0]
 8005050:	80fb      	strh	r3, [r7, #6]
        ++tail; // advance the tail
 8005052:	88bb      	ldrh	r3, [r7, #4]
 8005054:	3301      	adds	r3, #1
 8005056:	80bb      	strh	r3, [r7, #4]
        if (tail == QS_priv_.end) { // tail wrap around?
 8005058:	4b0b      	ldr	r3, [pc, #44]	@ (8005088 <QS_getByte+0x64>)
 800505a:	891b      	ldrh	r3, [r3, #8]
 800505c:	88ba      	ldrh	r2, [r7, #4]
 800505e:	429a      	cmp	r2, r3
 8005060:	d101      	bne.n	8005066 <QS_getByte+0x42>
            tail = 0U;
 8005062:	2300      	movs	r3, #0
 8005064:	80bb      	strh	r3, [r7, #4]
        }
        QS_priv_.tail = tail; // update the tail
 8005066:	4a08      	ldr	r2, [pc, #32]	@ (8005088 <QS_getByte+0x64>)
 8005068:	88bb      	ldrh	r3, [r7, #4]
 800506a:	8193      	strh	r3, [r2, #12]
        --QS_priv_.used;      // one less byte used
 800506c:	4b06      	ldr	r3, [pc, #24]	@ (8005088 <QS_getByte+0x64>)
 800506e:	89db      	ldrh	r3, [r3, #14]
 8005070:	b29b      	uxth	r3, r3
 8005072:	3b01      	subs	r3, #1
 8005074:	b29a      	uxth	r2, r3
 8005076:	4b04      	ldr	r3, [pc, #16]	@ (8005088 <QS_getByte+0x64>)
 8005078:	81da      	strh	r2, [r3, #14]
    }
    return ret; // return the byte or EOD
 800507a:	88fb      	ldrh	r3, [r7, #6]
}
 800507c:	4618      	mov	r0, r3
 800507e:	370c      	adds	r7, #12
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr
 8005088:	20000aa4 	.word	0x20000aa4

0800508c <QS_glbFilter_>:

//! @static @private @memberof QS
QS_Attr QS_priv_;

//............................................................................
void QS_glbFilter_(int_fast16_t const filter) {
 800508c:	b580      	push	{r7, lr}
 800508e:	b084      	sub	sp, #16
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
    bool const isRemove = (filter < 0);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	0fdb      	lsrs	r3, r3, #31
 8005098:	72fb      	strb	r3, [r7, #11]
    uint8_t const rec = isRemove ? (uint8_t)(-filter) : (uint8_t)filter;
 800509a:	7afb      	ldrb	r3, [r7, #11]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d004      	beq.n	80050aa <QS_glbFilter_+0x1e>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	b2db      	uxtb	r3, r3
 80050a4:	425b      	negs	r3, r3
 80050a6:	b2db      	uxtb	r3, r3
 80050a8:	e001      	b.n	80050ae <QS_glbFilter_+0x22>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	b2db      	uxtb	r3, r3
 80050ae:	72bb      	strb	r3, [r7, #10]
    switch (rec) {
 80050b0:	7abb      	ldrb	r3, [r7, #10]
 80050b2:	3bf0      	subs	r3, #240	@ 0xf0
 80050b4:	2b0f      	cmp	r3, #15
 80050b6:	f200 8259 	bhi.w	800556c <QS_glbFilter_+0x4e0>
 80050ba:	a201      	add	r2, pc, #4	@ (adr r2, 80050c0 <QS_glbFilter_+0x34>)
 80050bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050c0:	08005101 	.word	0x08005101
 80050c4:	08005171 	.word	0x08005171
 80050c8:	080051eb 	.word	0x080051eb
 80050cc:	08005249 	.word	0x08005249
 80050d0:	0800528b 	.word	0x0800528b
 80050d4:	08005347 	.word	0x08005347
 80050d8:	080052cd 	.word	0x080052cd
 80050dc:	0800536d 	.word	0x0800536d
 80050e0:	08005399 	.word	0x08005399
 80050e4:	080053db 	.word	0x080053db
 80050e8:	0800541d 	.word	0x0800541d
 80050ec:	0800545f 	.word	0x0800545f
 80050f0:	08005485 	.word	0x08005485
 80050f4:	080054c7 	.word	0x080054c7
 80050f8:	080054ed 	.word	0x080054ed
 80050fc:	08005513 	.word	0x08005513
        case (uint8_t)QS_ALL_RECORDS: {
            uint8_t const tmp = (isRemove ? 0x00U : 0xFFU);
 8005100:	7afb      	ldrb	r3, [r7, #11]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d001      	beq.n	800510a <QS_glbFilter_+0x7e>
 8005106:	2300      	movs	r3, #0
 8005108:	e000      	b.n	800510c <QS_glbFilter_+0x80>
 800510a:	23ff      	movs	r3, #255	@ 0xff
 800510c:	727b      	strb	r3, [r7, #9]

            // set all global filters (partially unrolled loop)
            for (uint_fast8_t i = 0U;
 800510e:	2300      	movs	r3, #0
 8005110:	60fb      	str	r3, [r7, #12]
 8005112:	e016      	b.n	8005142 <QS_glbFilter_+0xb6>
                 i < Q_DIM(QS_filt_.glb);
                 i += 4U)
            {
                QS_filt_.glb[i     ] = tmp;
 8005114:	4a9b      	ldr	r2, [pc, #620]	@ (8005384 <QS_glbFilter_+0x2f8>)
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	4413      	add	r3, r2
 800511a:	7a7a      	ldrb	r2, [r7, #9]
 800511c:	701a      	strb	r2, [r3, #0]
                QS_filt_.glb[i + 1U] = tmp;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	3301      	adds	r3, #1
 8005122:	4998      	ldr	r1, [pc, #608]	@ (8005384 <QS_glbFilter_+0x2f8>)
 8005124:	7a7a      	ldrb	r2, [r7, #9]
 8005126:	54ca      	strb	r2, [r1, r3]
                QS_filt_.glb[i + 2U] = tmp;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	3302      	adds	r3, #2
 800512c:	4995      	ldr	r1, [pc, #596]	@ (8005384 <QS_glbFilter_+0x2f8>)
 800512e:	7a7a      	ldrb	r2, [r7, #9]
 8005130:	54ca      	strb	r2, [r1, r3]
                QS_filt_.glb[i + 3U] = tmp;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	3303      	adds	r3, #3
 8005136:	4993      	ldr	r1, [pc, #588]	@ (8005384 <QS_glbFilter_+0x2f8>)
 8005138:	7a7a      	ldrb	r2, [r7, #9]
 800513a:	54ca      	strb	r2, [r1, r3]
                 i += 4U)
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	3304      	adds	r3, #4
 8005140:	60fb      	str	r3, [r7, #12]
                 i < Q_DIM(QS_filt_.glb);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2b0f      	cmp	r3, #15
 8005146:	d9e5      	bls.n	8005114 <QS_glbFilter_+0x88>
            }
            if (isRemove) {
 8005148:	7afb      	ldrb	r3, [r7, #11]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d00c      	beq.n	8005168 <QS_glbFilter_+0xdc>
                // leave the "not maskable" filters enabled,
                // see qs.h, Miscellaneous QS records (not maskable)
                QS_filt_.glb[0] = 0x01U;
 800514e:	4b8d      	ldr	r3, [pc, #564]	@ (8005384 <QS_glbFilter_+0x2f8>)
 8005150:	2201      	movs	r2, #1
 8005152:	701a      	strb	r2, [r3, #0]
                QS_filt_.glb[6] = 0x40U;
 8005154:	4b8b      	ldr	r3, [pc, #556]	@ (8005384 <QS_glbFilter_+0x2f8>)
 8005156:	2240      	movs	r2, #64	@ 0x40
 8005158:	719a      	strb	r2, [r3, #6]
                QS_filt_.glb[7] = 0xFCU;
 800515a:	4b8a      	ldr	r3, [pc, #552]	@ (8005384 <QS_glbFilter_+0x2f8>)
 800515c:	22fc      	movs	r2, #252	@ 0xfc
 800515e:	71da      	strb	r2, [r3, #7]
                QS_filt_.glb[8] = 0x7FU;
 8005160:	4b88      	ldr	r3, [pc, #544]	@ (8005384 <QS_glbFilter_+0x2f8>)
 8005162:	227f      	movs	r2, #127	@ 0x7f
 8005164:	721a      	strb	r2, [r3, #8]
            }
            else {
                // never turn the last 3 records on (0x7D, 0x7E, 0x7F)
                QS_filt_.glb[15] = 0x1FU;
            }
            break;
 8005166:	e242      	b.n	80055ee <QS_glbFilter_+0x562>
                QS_filt_.glb[15] = 0x1FU;
 8005168:	4b86      	ldr	r3, [pc, #536]	@ (8005384 <QS_glbFilter_+0x2f8>)
 800516a:	221f      	movs	r2, #31
 800516c:	73da      	strb	r2, [r3, #15]
            break;
 800516e:	e23e      	b.n	80055ee <QS_glbFilter_+0x562>
        }
        case (uint8_t)QS_SM_RECORDS:
            if (isRemove) {
 8005170:	7afb      	ldrb	r3, [r7, #11]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d01c      	beq.n	80051b0 <QS_glbFilter_+0x124>
                QS_filt_.glb[0] &= (uint8_t)(~0xFEU & 0xFFU);
 8005176:	4b83      	ldr	r3, [pc, #524]	@ (8005384 <QS_glbFilter_+0x2f8>)
 8005178:	781b      	ldrb	r3, [r3, #0]
 800517a:	f003 0301 	and.w	r3, r3, #1
 800517e:	b2da      	uxtb	r2, r3
 8005180:	4b80      	ldr	r3, [pc, #512]	@ (8005384 <QS_glbFilter_+0x2f8>)
 8005182:	701a      	strb	r2, [r3, #0]
                QS_filt_.glb[1] &= (uint8_t)(~0x03U & 0xFFU);
 8005184:	4b7f      	ldr	r3, [pc, #508]	@ (8005384 <QS_glbFilter_+0x2f8>)
 8005186:	785b      	ldrb	r3, [r3, #1]
 8005188:	f023 0303 	bic.w	r3, r3, #3
 800518c:	b2da      	uxtb	r2, r3
 800518e:	4b7d      	ldr	r3, [pc, #500]	@ (8005384 <QS_glbFilter_+0x2f8>)
 8005190:	705a      	strb	r2, [r3, #1]
                QS_filt_.glb[6] &= (uint8_t)(~0x80U & 0xFFU);
 8005192:	4b7c      	ldr	r3, [pc, #496]	@ (8005384 <QS_glbFilter_+0x2f8>)
 8005194:	799b      	ldrb	r3, [r3, #6]
 8005196:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800519a:	b2da      	uxtb	r2, r3
 800519c:	4b79      	ldr	r3, [pc, #484]	@ (8005384 <QS_glbFilter_+0x2f8>)
 800519e:	719a      	strb	r2, [r3, #6]
                QS_filt_.glb[7] &= (uint8_t)(~0x03U & 0xFFU);
 80051a0:	4b78      	ldr	r3, [pc, #480]	@ (8005384 <QS_glbFilter_+0x2f8>)
 80051a2:	79db      	ldrb	r3, [r3, #7]
 80051a4:	f023 0303 	bic.w	r3, r3, #3
 80051a8:	b2da      	uxtb	r2, r3
 80051aa:	4b76      	ldr	r3, [pc, #472]	@ (8005384 <QS_glbFilter_+0x2f8>)
 80051ac:	71da      	strb	r2, [r3, #7]
                QS_filt_.glb[0] |= 0xFEU;
                QS_filt_.glb[1] |= 0x03U;
                QS_filt_.glb[6] |= 0x80U;
                QS_filt_.glb[7] |= 0x03U;
            }
            break;
 80051ae:	e21e      	b.n	80055ee <QS_glbFilter_+0x562>
                QS_filt_.glb[0] |= 0xFEU;
 80051b0:	4b74      	ldr	r3, [pc, #464]	@ (8005384 <QS_glbFilter_+0x2f8>)
 80051b2:	781b      	ldrb	r3, [r3, #0]
 80051b4:	f063 0301 	orn	r3, r3, #1
 80051b8:	b2da      	uxtb	r2, r3
 80051ba:	4b72      	ldr	r3, [pc, #456]	@ (8005384 <QS_glbFilter_+0x2f8>)
 80051bc:	701a      	strb	r2, [r3, #0]
                QS_filt_.glb[1] |= 0x03U;
 80051be:	4b71      	ldr	r3, [pc, #452]	@ (8005384 <QS_glbFilter_+0x2f8>)
 80051c0:	785b      	ldrb	r3, [r3, #1]
 80051c2:	f043 0303 	orr.w	r3, r3, #3
 80051c6:	b2da      	uxtb	r2, r3
 80051c8:	4b6e      	ldr	r3, [pc, #440]	@ (8005384 <QS_glbFilter_+0x2f8>)
 80051ca:	705a      	strb	r2, [r3, #1]
                QS_filt_.glb[6] |= 0x80U;
 80051cc:	4b6d      	ldr	r3, [pc, #436]	@ (8005384 <QS_glbFilter_+0x2f8>)
 80051ce:	799b      	ldrb	r3, [r3, #6]
 80051d0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80051d4:	b2da      	uxtb	r2, r3
 80051d6:	4b6b      	ldr	r3, [pc, #428]	@ (8005384 <QS_glbFilter_+0x2f8>)
 80051d8:	719a      	strb	r2, [r3, #6]
                QS_filt_.glb[7] |= 0x03U;
 80051da:	4b6a      	ldr	r3, [pc, #424]	@ (8005384 <QS_glbFilter_+0x2f8>)
 80051dc:	79db      	ldrb	r3, [r3, #7]
 80051de:	f043 0303 	orr.w	r3, r3, #3
 80051e2:	b2da      	uxtb	r2, r3
 80051e4:	4b67      	ldr	r3, [pc, #412]	@ (8005384 <QS_glbFilter_+0x2f8>)
 80051e6:	71da      	strb	r2, [r3, #7]
            break;
 80051e8:	e201      	b.n	80055ee <QS_glbFilter_+0x562>
        case (uint8_t)QS_AO_RECORDS:
            if (isRemove) {
 80051ea:	7afb      	ldrb	r3, [r7, #11]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d015      	beq.n	800521c <QS_glbFilter_+0x190>
                QS_filt_.glb[1] &= (uint8_t)(~0xFCU & 0xFFU);
 80051f0:	4b64      	ldr	r3, [pc, #400]	@ (8005384 <QS_glbFilter_+0x2f8>)
 80051f2:	785b      	ldrb	r3, [r3, #1]
 80051f4:	f003 0303 	and.w	r3, r3, #3
 80051f8:	b2da      	uxtb	r2, r3
 80051fa:	4b62      	ldr	r3, [pc, #392]	@ (8005384 <QS_glbFilter_+0x2f8>)
 80051fc:	705a      	strb	r2, [r3, #1]
                QS_filt_.glb[2] &= (uint8_t)(~0x07U & 0xFFU);
 80051fe:	4b61      	ldr	r3, [pc, #388]	@ (8005384 <QS_glbFilter_+0x2f8>)
 8005200:	789b      	ldrb	r3, [r3, #2]
 8005202:	f023 0307 	bic.w	r3, r3, #7
 8005206:	b2da      	uxtb	r2, r3
 8005208:	4b5e      	ldr	r3, [pc, #376]	@ (8005384 <QS_glbFilter_+0x2f8>)
 800520a:	709a      	strb	r2, [r3, #2]
                QS_filt_.glb[5] &= (uint8_t)(~0x20U & 0xFFU);
 800520c:	4b5d      	ldr	r3, [pc, #372]	@ (8005384 <QS_glbFilter_+0x2f8>)
 800520e:	795b      	ldrb	r3, [r3, #5]
 8005210:	f023 0320 	bic.w	r3, r3, #32
 8005214:	b2da      	uxtb	r2, r3
 8005216:	4b5b      	ldr	r3, [pc, #364]	@ (8005384 <QS_glbFilter_+0x2f8>)
 8005218:	715a      	strb	r2, [r3, #5]
            else {
                QS_filt_.glb[1] |= 0xFCU;
                QS_filt_.glb[2] |= 0x07U;
                QS_filt_.glb[5] |= 0x20U;
            }
            break;
 800521a:	e1e8      	b.n	80055ee <QS_glbFilter_+0x562>
                QS_filt_.glb[1] |= 0xFCU;
 800521c:	4b59      	ldr	r3, [pc, #356]	@ (8005384 <QS_glbFilter_+0x2f8>)
 800521e:	785b      	ldrb	r3, [r3, #1]
 8005220:	f063 0303 	orn	r3, r3, #3
 8005224:	b2da      	uxtb	r2, r3
 8005226:	4b57      	ldr	r3, [pc, #348]	@ (8005384 <QS_glbFilter_+0x2f8>)
 8005228:	705a      	strb	r2, [r3, #1]
                QS_filt_.glb[2] |= 0x07U;
 800522a:	4b56      	ldr	r3, [pc, #344]	@ (8005384 <QS_glbFilter_+0x2f8>)
 800522c:	789b      	ldrb	r3, [r3, #2]
 800522e:	f043 0307 	orr.w	r3, r3, #7
 8005232:	b2da      	uxtb	r2, r3
 8005234:	4b53      	ldr	r3, [pc, #332]	@ (8005384 <QS_glbFilter_+0x2f8>)
 8005236:	709a      	strb	r2, [r3, #2]
                QS_filt_.glb[5] |= 0x20U;
 8005238:	4b52      	ldr	r3, [pc, #328]	@ (8005384 <QS_glbFilter_+0x2f8>)
 800523a:	795b      	ldrb	r3, [r3, #5]
 800523c:	f043 0320 	orr.w	r3, r3, #32
 8005240:	b2da      	uxtb	r2, r3
 8005242:	4b50      	ldr	r3, [pc, #320]	@ (8005384 <QS_glbFilter_+0x2f8>)
 8005244:	715a      	strb	r2, [r3, #5]
            break;
 8005246:	e1d2      	b.n	80055ee <QS_glbFilter_+0x562>
        case (uint8_t)QS_EQ_RECORDS:
            if (isRemove) {
 8005248:	7afb      	ldrb	r3, [r7, #11]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d00e      	beq.n	800526c <QS_glbFilter_+0x1e0>
                QS_filt_.glb[2] &= (uint8_t)(~0x78U & 0xFFU);
 800524e:	4b4d      	ldr	r3, [pc, #308]	@ (8005384 <QS_glbFilter_+0x2f8>)
 8005250:	789b      	ldrb	r3, [r3, #2]
 8005252:	f023 0378 	bic.w	r3, r3, #120	@ 0x78
 8005256:	b2da      	uxtb	r2, r3
 8005258:	4b4a      	ldr	r3, [pc, #296]	@ (8005384 <QS_glbFilter_+0x2f8>)
 800525a:	709a      	strb	r2, [r3, #2]
                QS_filt_.glb[5] &= (uint8_t)(~0x40U & 0xFFU);
 800525c:	4b49      	ldr	r3, [pc, #292]	@ (8005384 <QS_glbFilter_+0x2f8>)
 800525e:	795b      	ldrb	r3, [r3, #5]
 8005260:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005264:	b2da      	uxtb	r2, r3
 8005266:	4b47      	ldr	r3, [pc, #284]	@ (8005384 <QS_glbFilter_+0x2f8>)
 8005268:	715a      	strb	r2, [r3, #5]
            }
            else {
                QS_filt_.glb[2] |= 0x78U;
                QS_filt_.glb[5] |= 0x40U;
            }
            break;
 800526a:	e1c0      	b.n	80055ee <QS_glbFilter_+0x562>
                QS_filt_.glb[2] |= 0x78U;
 800526c:	4b45      	ldr	r3, [pc, #276]	@ (8005384 <QS_glbFilter_+0x2f8>)
 800526e:	789b      	ldrb	r3, [r3, #2]
 8005270:	f043 0378 	orr.w	r3, r3, #120	@ 0x78
 8005274:	b2da      	uxtb	r2, r3
 8005276:	4b43      	ldr	r3, [pc, #268]	@ (8005384 <QS_glbFilter_+0x2f8>)
 8005278:	709a      	strb	r2, [r3, #2]
                QS_filt_.glb[5] |= 0x40U;
 800527a:	4b42      	ldr	r3, [pc, #264]	@ (8005384 <QS_glbFilter_+0x2f8>)
 800527c:	795b      	ldrb	r3, [r3, #5]
 800527e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005282:	b2da      	uxtb	r2, r3
 8005284:	4b3f      	ldr	r3, [pc, #252]	@ (8005384 <QS_glbFilter_+0x2f8>)
 8005286:	715a      	strb	r2, [r3, #5]
            break;
 8005288:	e1b1      	b.n	80055ee <QS_glbFilter_+0x562>
        case (uint8_t)QS_MP_RECORDS:
            if (isRemove) {
 800528a:	7afb      	ldrb	r3, [r7, #11]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d00e      	beq.n	80052ae <QS_glbFilter_+0x222>
                QS_filt_.glb[3] &= (uint8_t)(~0x03U & 0xFFU);
 8005290:	4b3c      	ldr	r3, [pc, #240]	@ (8005384 <QS_glbFilter_+0x2f8>)
 8005292:	78db      	ldrb	r3, [r3, #3]
 8005294:	f023 0303 	bic.w	r3, r3, #3
 8005298:	b2da      	uxtb	r2, r3
 800529a:	4b3a      	ldr	r3, [pc, #232]	@ (8005384 <QS_glbFilter_+0x2f8>)
 800529c:	70da      	strb	r2, [r3, #3]
                QS_filt_.glb[5] &= (uint8_t)(~0x80U & 0xFFU);
 800529e:	4b39      	ldr	r3, [pc, #228]	@ (8005384 <QS_glbFilter_+0x2f8>)
 80052a0:	795b      	ldrb	r3, [r3, #5]
 80052a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80052a6:	b2da      	uxtb	r2, r3
 80052a8:	4b36      	ldr	r3, [pc, #216]	@ (8005384 <QS_glbFilter_+0x2f8>)
 80052aa:	715a      	strb	r2, [r3, #5]
            }
            else {
                QS_filt_.glb[3] |= 0x03U;
                QS_filt_.glb[5] |= 0x80U;
            }
            break;
 80052ac:	e19f      	b.n	80055ee <QS_glbFilter_+0x562>
                QS_filt_.glb[3] |= 0x03U;
 80052ae:	4b35      	ldr	r3, [pc, #212]	@ (8005384 <QS_glbFilter_+0x2f8>)
 80052b0:	78db      	ldrb	r3, [r3, #3]
 80052b2:	f043 0303 	orr.w	r3, r3, #3
 80052b6:	b2da      	uxtb	r2, r3
 80052b8:	4b32      	ldr	r3, [pc, #200]	@ (8005384 <QS_glbFilter_+0x2f8>)
 80052ba:	70da      	strb	r2, [r3, #3]
                QS_filt_.glb[5] |= 0x80U;
 80052bc:	4b31      	ldr	r3, [pc, #196]	@ (8005384 <QS_glbFilter_+0x2f8>)
 80052be:	795b      	ldrb	r3, [r3, #5]
 80052c0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80052c4:	b2da      	uxtb	r2, r3
 80052c6:	4b2f      	ldr	r3, [pc, #188]	@ (8005384 <QS_glbFilter_+0x2f8>)
 80052c8:	715a      	strb	r2, [r3, #5]
            break;
 80052ca:	e190      	b.n	80055ee <QS_glbFilter_+0x562>
        case (uint8_t)QS_QF_RECORDS:
            if (isRemove) {
 80052cc:	7afb      	ldrb	r3, [r7, #11]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d01c      	beq.n	800530c <QS_glbFilter_+0x280>
                QS_filt_.glb[2] &= (uint8_t)(~0x80U & 0xFFU);
 80052d2:	4b2c      	ldr	r3, [pc, #176]	@ (8005384 <QS_glbFilter_+0x2f8>)
 80052d4:	789b      	ldrb	r3, [r3, #2]
 80052d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80052da:	b2da      	uxtb	r2, r3
 80052dc:	4b29      	ldr	r3, [pc, #164]	@ (8005384 <QS_glbFilter_+0x2f8>)
 80052de:	709a      	strb	r2, [r3, #2]
                QS_filt_.glb[3] &= (uint8_t)(~0xFCU & 0xFFU);
 80052e0:	4b28      	ldr	r3, [pc, #160]	@ (8005384 <QS_glbFilter_+0x2f8>)
 80052e2:	78db      	ldrb	r3, [r3, #3]
 80052e4:	f003 0303 	and.w	r3, r3, #3
 80052e8:	b2da      	uxtb	r2, r3
 80052ea:	4b26      	ldr	r3, [pc, #152]	@ (8005384 <QS_glbFilter_+0x2f8>)
 80052ec:	70da      	strb	r2, [r3, #3]
                QS_filt_.glb[4] &= (uint8_t)(~0xC0U & 0xFFU);
 80052ee:	4b25      	ldr	r3, [pc, #148]	@ (8005384 <QS_glbFilter_+0x2f8>)
 80052f0:	791b      	ldrb	r3, [r3, #4]
 80052f2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80052f6:	b2da      	uxtb	r2, r3
 80052f8:	4b22      	ldr	r3, [pc, #136]	@ (8005384 <QS_glbFilter_+0x2f8>)
 80052fa:	711a      	strb	r2, [r3, #4]
                QS_filt_.glb[5] &= (uint8_t)(~0x1FU & 0xFFU);
 80052fc:	4b21      	ldr	r3, [pc, #132]	@ (8005384 <QS_glbFilter_+0x2f8>)
 80052fe:	795b      	ldrb	r3, [r3, #5]
 8005300:	f023 031f 	bic.w	r3, r3, #31
 8005304:	b2da      	uxtb	r2, r3
 8005306:	4b1f      	ldr	r3, [pc, #124]	@ (8005384 <QS_glbFilter_+0x2f8>)
 8005308:	715a      	strb	r2, [r3, #5]
                QS_filt_.glb[2] |= 0x80U;
                QS_filt_.glb[3] |= 0xFCU;
                QS_filt_.glb[4] |= 0xC0U;
                QS_filt_.glb[5] |= 0x1FU;
            }
            break;
 800530a:	e170      	b.n	80055ee <QS_glbFilter_+0x562>
                QS_filt_.glb[2] |= 0x80U;
 800530c:	4b1d      	ldr	r3, [pc, #116]	@ (8005384 <QS_glbFilter_+0x2f8>)
 800530e:	789b      	ldrb	r3, [r3, #2]
 8005310:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005314:	b2da      	uxtb	r2, r3
 8005316:	4b1b      	ldr	r3, [pc, #108]	@ (8005384 <QS_glbFilter_+0x2f8>)
 8005318:	709a      	strb	r2, [r3, #2]
                QS_filt_.glb[3] |= 0xFCU;
 800531a:	4b1a      	ldr	r3, [pc, #104]	@ (8005384 <QS_glbFilter_+0x2f8>)
 800531c:	78db      	ldrb	r3, [r3, #3]
 800531e:	f063 0303 	orn	r3, r3, #3
 8005322:	b2da      	uxtb	r2, r3
 8005324:	4b17      	ldr	r3, [pc, #92]	@ (8005384 <QS_glbFilter_+0x2f8>)
 8005326:	70da      	strb	r2, [r3, #3]
                QS_filt_.glb[4] |= 0xC0U;
 8005328:	4b16      	ldr	r3, [pc, #88]	@ (8005384 <QS_glbFilter_+0x2f8>)
 800532a:	791b      	ldrb	r3, [r3, #4]
 800532c:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 8005330:	b2da      	uxtb	r2, r3
 8005332:	4b14      	ldr	r3, [pc, #80]	@ (8005384 <QS_glbFilter_+0x2f8>)
 8005334:	711a      	strb	r2, [r3, #4]
                QS_filt_.glb[5] |= 0x1FU;
 8005336:	4b13      	ldr	r3, [pc, #76]	@ (8005384 <QS_glbFilter_+0x2f8>)
 8005338:	795b      	ldrb	r3, [r3, #5]
 800533a:	f043 031f 	orr.w	r3, r3, #31
 800533e:	b2da      	uxtb	r2, r3
 8005340:	4b10      	ldr	r3, [pc, #64]	@ (8005384 <QS_glbFilter_+0x2f8>)
 8005342:	715a      	strb	r2, [r3, #5]
            break;
 8005344:	e153      	b.n	80055ee <QS_glbFilter_+0x562>
        case (uint8_t)QS_TE_RECORDS:
            if (isRemove) {
 8005346:	7afb      	ldrb	r3, [r7, #11]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d007      	beq.n	800535c <QS_glbFilter_+0x2d0>
                QS_filt_.glb[4] &= (uint8_t)(~0x3FU & 0xFFU);
 800534c:	4b0d      	ldr	r3, [pc, #52]	@ (8005384 <QS_glbFilter_+0x2f8>)
 800534e:	791b      	ldrb	r3, [r3, #4]
 8005350:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005354:	b2da      	uxtb	r2, r3
 8005356:	4b0b      	ldr	r3, [pc, #44]	@ (8005384 <QS_glbFilter_+0x2f8>)
 8005358:	711a      	strb	r2, [r3, #4]
            }
            else {
                QS_filt_.glb[4] |= 0x3FU;
            }
            break;
 800535a:	e148      	b.n	80055ee <QS_glbFilter_+0x562>
                QS_filt_.glb[4] |= 0x3FU;
 800535c:	4b09      	ldr	r3, [pc, #36]	@ (8005384 <QS_glbFilter_+0x2f8>)
 800535e:	791b      	ldrb	r3, [r3, #4]
 8005360:	f043 033f 	orr.w	r3, r3, #63	@ 0x3f
 8005364:	b2da      	uxtb	r2, r3
 8005366:	4b07      	ldr	r3, [pc, #28]	@ (8005384 <QS_glbFilter_+0x2f8>)
 8005368:	711a      	strb	r2, [r3, #4]
            break;
 800536a:	e140      	b.n	80055ee <QS_glbFilter_+0x562>
        case (uint8_t)QS_SC_RECORDS:
            if (isRemove) {
 800536c:	7afb      	ldrb	r3, [r7, #11]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d00a      	beq.n	8005388 <QS_glbFilter_+0x2fc>
                QS_filt_.glb[6] &= (uint8_t)(~0x3FU & 0xFFU);
 8005372:	4b04      	ldr	r3, [pc, #16]	@ (8005384 <QS_glbFilter_+0x2f8>)
 8005374:	799b      	ldrb	r3, [r3, #6]
 8005376:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800537a:	b2da      	uxtb	r2, r3
 800537c:	4b01      	ldr	r3, [pc, #4]	@ (8005384 <QS_glbFilter_+0x2f8>)
 800537e:	719a      	strb	r2, [r3, #6]
            }
            else {
                QS_filt_.glb[6] |= 0x3FU;
            }
            break;
 8005380:	e135      	b.n	80055ee <QS_glbFilter_+0x562>
 8005382:	bf00      	nop
 8005384:	20000a84 	.word	0x20000a84
                QS_filt_.glb[6] |= 0x3FU;
 8005388:	4b9b      	ldr	r3, [pc, #620]	@ (80055f8 <QS_glbFilter_+0x56c>)
 800538a:	799b      	ldrb	r3, [r3, #6]
 800538c:	f043 033f 	orr.w	r3, r3, #63	@ 0x3f
 8005390:	b2da      	uxtb	r2, r3
 8005392:	4b99      	ldr	r3, [pc, #612]	@ (80055f8 <QS_glbFilter_+0x56c>)
 8005394:	719a      	strb	r2, [r3, #6]
            break;
 8005396:	e12a      	b.n	80055ee <QS_glbFilter_+0x562>
        case (uint8_t)QS_SEM_RECORDS:
            if (isRemove) {
 8005398:	7afb      	ldrb	r3, [r7, #11]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d00e      	beq.n	80053bc <QS_glbFilter_+0x330>
                QS_filt_.glb[8] &= (uint8_t)(~0x80U & 0xFFU);
 800539e:	4b96      	ldr	r3, [pc, #600]	@ (80055f8 <QS_glbFilter_+0x56c>)
 80053a0:	7a1b      	ldrb	r3, [r3, #8]
 80053a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80053a6:	b2da      	uxtb	r2, r3
 80053a8:	4b93      	ldr	r3, [pc, #588]	@ (80055f8 <QS_glbFilter_+0x56c>)
 80053aa:	721a      	strb	r2, [r3, #8]
                QS_filt_.glb[9] &= (uint8_t)(~0x07U & 0xFFU);
 80053ac:	4b92      	ldr	r3, [pc, #584]	@ (80055f8 <QS_glbFilter_+0x56c>)
 80053ae:	7a5b      	ldrb	r3, [r3, #9]
 80053b0:	f023 0307 	bic.w	r3, r3, #7
 80053b4:	b2da      	uxtb	r2, r3
 80053b6:	4b90      	ldr	r3, [pc, #576]	@ (80055f8 <QS_glbFilter_+0x56c>)
 80053b8:	725a      	strb	r2, [r3, #9]
            }
            else {
                QS_filt_.glb[8] |= 0x80U;
                QS_filt_.glb[9] |= 0x07U;
            }
            break;
 80053ba:	e118      	b.n	80055ee <QS_glbFilter_+0x562>
                QS_filt_.glb[8] |= 0x80U;
 80053bc:	4b8e      	ldr	r3, [pc, #568]	@ (80055f8 <QS_glbFilter_+0x56c>)
 80053be:	7a1b      	ldrb	r3, [r3, #8]
 80053c0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80053c4:	b2da      	uxtb	r2, r3
 80053c6:	4b8c      	ldr	r3, [pc, #560]	@ (80055f8 <QS_glbFilter_+0x56c>)
 80053c8:	721a      	strb	r2, [r3, #8]
                QS_filt_.glb[9] |= 0x07U;
 80053ca:	4b8b      	ldr	r3, [pc, #556]	@ (80055f8 <QS_glbFilter_+0x56c>)
 80053cc:	7a5b      	ldrb	r3, [r3, #9]
 80053ce:	f043 0307 	orr.w	r3, r3, #7
 80053d2:	b2da      	uxtb	r2, r3
 80053d4:	4b88      	ldr	r3, [pc, #544]	@ (80055f8 <QS_glbFilter_+0x56c>)
 80053d6:	725a      	strb	r2, [r3, #9]
            break;
 80053d8:	e109      	b.n	80055ee <QS_glbFilter_+0x562>
        case (uint8_t)QS_MTX_RECORDS:
            if (isRemove) {
 80053da:	7afb      	ldrb	r3, [r7, #11]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d00e      	beq.n	80053fe <QS_glbFilter_+0x372>
                QS_filt_.glb[9]  &= (uint8_t)(~0xF8U & 0xFFU);
 80053e0:	4b85      	ldr	r3, [pc, #532]	@ (80055f8 <QS_glbFilter_+0x56c>)
 80053e2:	7a5b      	ldrb	r3, [r3, #9]
 80053e4:	f003 0307 	and.w	r3, r3, #7
 80053e8:	b2da      	uxtb	r2, r3
 80053ea:	4b83      	ldr	r3, [pc, #524]	@ (80055f8 <QS_glbFilter_+0x56c>)
 80053ec:	725a      	strb	r2, [r3, #9]
                QS_filt_.glb[10] &= (uint8_t)(~0x01U & 0xFFU);
 80053ee:	4b82      	ldr	r3, [pc, #520]	@ (80055f8 <QS_glbFilter_+0x56c>)
 80053f0:	7a9b      	ldrb	r3, [r3, #10]
 80053f2:	f023 0301 	bic.w	r3, r3, #1
 80053f6:	b2da      	uxtb	r2, r3
 80053f8:	4b7f      	ldr	r3, [pc, #508]	@ (80055f8 <QS_glbFilter_+0x56c>)
 80053fa:	729a      	strb	r2, [r3, #10]
            }
            else {
                QS_filt_.glb[9]  |= 0xF8U;
                QS_filt_.glb[10] |= 0x01U;
            }
            break;
 80053fc:	e0f7      	b.n	80055ee <QS_glbFilter_+0x562>
                QS_filt_.glb[9]  |= 0xF8U;
 80053fe:	4b7e      	ldr	r3, [pc, #504]	@ (80055f8 <QS_glbFilter_+0x56c>)
 8005400:	7a5b      	ldrb	r3, [r3, #9]
 8005402:	f063 0307 	orn	r3, r3, #7
 8005406:	b2da      	uxtb	r2, r3
 8005408:	4b7b      	ldr	r3, [pc, #492]	@ (80055f8 <QS_glbFilter_+0x56c>)
 800540a:	725a      	strb	r2, [r3, #9]
                QS_filt_.glb[10] |= 0x01U;
 800540c:	4b7a      	ldr	r3, [pc, #488]	@ (80055f8 <QS_glbFilter_+0x56c>)
 800540e:	7a9b      	ldrb	r3, [r3, #10]
 8005410:	f043 0301 	orr.w	r3, r3, #1
 8005414:	b2da      	uxtb	r2, r3
 8005416:	4b78      	ldr	r3, [pc, #480]	@ (80055f8 <QS_glbFilter_+0x56c>)
 8005418:	729a      	strb	r2, [r3, #10]
            break;
 800541a:	e0e8      	b.n	80055ee <QS_glbFilter_+0x562>
        case (uint8_t)QS_U0_RECORDS:
            if (isRemove) {
 800541c:	7afb      	ldrb	r3, [r7, #11]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d00e      	beq.n	8005440 <QS_glbFilter_+0x3b4>
                QS_filt_.glb[12] &= (uint8_t)(~0xF0U & 0xFFU);
 8005422:	4b75      	ldr	r3, [pc, #468]	@ (80055f8 <QS_glbFilter_+0x56c>)
 8005424:	7b1b      	ldrb	r3, [r3, #12]
 8005426:	f003 030f 	and.w	r3, r3, #15
 800542a:	b2da      	uxtb	r2, r3
 800542c:	4b72      	ldr	r3, [pc, #456]	@ (80055f8 <QS_glbFilter_+0x56c>)
 800542e:	731a      	strb	r2, [r3, #12]
                QS_filt_.glb[13] &= (uint8_t)(~0x01U & 0xFFU);
 8005430:	4b71      	ldr	r3, [pc, #452]	@ (80055f8 <QS_glbFilter_+0x56c>)
 8005432:	7b5b      	ldrb	r3, [r3, #13]
 8005434:	f023 0301 	bic.w	r3, r3, #1
 8005438:	b2da      	uxtb	r2, r3
 800543a:	4b6f      	ldr	r3, [pc, #444]	@ (80055f8 <QS_glbFilter_+0x56c>)
 800543c:	735a      	strb	r2, [r3, #13]
            }
            else {
                QS_filt_.glb[12] |= 0xF0U;
                QS_filt_.glb[13] |= 0x01U;
            }
            break;
 800543e:	e0d6      	b.n	80055ee <QS_glbFilter_+0x562>
                QS_filt_.glb[12] |= 0xF0U;
 8005440:	4b6d      	ldr	r3, [pc, #436]	@ (80055f8 <QS_glbFilter_+0x56c>)
 8005442:	7b1b      	ldrb	r3, [r3, #12]
 8005444:	f063 030f 	orn	r3, r3, #15
 8005448:	b2da      	uxtb	r2, r3
 800544a:	4b6b      	ldr	r3, [pc, #428]	@ (80055f8 <QS_glbFilter_+0x56c>)
 800544c:	731a      	strb	r2, [r3, #12]
                QS_filt_.glb[13] |= 0x01U;
 800544e:	4b6a      	ldr	r3, [pc, #424]	@ (80055f8 <QS_glbFilter_+0x56c>)
 8005450:	7b5b      	ldrb	r3, [r3, #13]
 8005452:	f043 0301 	orr.w	r3, r3, #1
 8005456:	b2da      	uxtb	r2, r3
 8005458:	4b67      	ldr	r3, [pc, #412]	@ (80055f8 <QS_glbFilter_+0x56c>)
 800545a:	735a      	strb	r2, [r3, #13]
            break;
 800545c:	e0c7      	b.n	80055ee <QS_glbFilter_+0x562>
        case (uint8_t)QS_U1_RECORDS:
            if (isRemove) {
 800545e:	7afb      	ldrb	r3, [r7, #11]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d007      	beq.n	8005474 <QS_glbFilter_+0x3e8>
                QS_filt_.glb[13] &= (uint8_t)(~0x3EU & 0xFFU);
 8005464:	4b64      	ldr	r3, [pc, #400]	@ (80055f8 <QS_glbFilter_+0x56c>)
 8005466:	7b5b      	ldrb	r3, [r3, #13]
 8005468:	f023 033e 	bic.w	r3, r3, #62	@ 0x3e
 800546c:	b2da      	uxtb	r2, r3
 800546e:	4b62      	ldr	r3, [pc, #392]	@ (80055f8 <QS_glbFilter_+0x56c>)
 8005470:	735a      	strb	r2, [r3, #13]
            }
            else {
                QS_filt_.glb[13] |= 0x3EU;
            }
            break;
 8005472:	e0bc      	b.n	80055ee <QS_glbFilter_+0x562>
                QS_filt_.glb[13] |= 0x3EU;
 8005474:	4b60      	ldr	r3, [pc, #384]	@ (80055f8 <QS_glbFilter_+0x56c>)
 8005476:	7b5b      	ldrb	r3, [r3, #13]
 8005478:	f043 033e 	orr.w	r3, r3, #62	@ 0x3e
 800547c:	b2da      	uxtb	r2, r3
 800547e:	4b5e      	ldr	r3, [pc, #376]	@ (80055f8 <QS_glbFilter_+0x56c>)
 8005480:	735a      	strb	r2, [r3, #13]
            break;
 8005482:	e0b4      	b.n	80055ee <QS_glbFilter_+0x562>
        case (uint8_t)QS_U2_RECORDS:
            if (isRemove) {
 8005484:	7afb      	ldrb	r3, [r7, #11]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d00e      	beq.n	80054a8 <QS_glbFilter_+0x41c>
                QS_filt_.glb[13] &= (uint8_t)(~0xC0U & 0xFFU);
 800548a:	4b5b      	ldr	r3, [pc, #364]	@ (80055f8 <QS_glbFilter_+0x56c>)
 800548c:	7b5b      	ldrb	r3, [r3, #13]
 800548e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005492:	b2da      	uxtb	r2, r3
 8005494:	4b58      	ldr	r3, [pc, #352]	@ (80055f8 <QS_glbFilter_+0x56c>)
 8005496:	735a      	strb	r2, [r3, #13]
                QS_filt_.glb[14] &= (uint8_t)(~0x07U & 0xFFU);
 8005498:	4b57      	ldr	r3, [pc, #348]	@ (80055f8 <QS_glbFilter_+0x56c>)
 800549a:	7b9b      	ldrb	r3, [r3, #14]
 800549c:	f023 0307 	bic.w	r3, r3, #7
 80054a0:	b2da      	uxtb	r2, r3
 80054a2:	4b55      	ldr	r3, [pc, #340]	@ (80055f8 <QS_glbFilter_+0x56c>)
 80054a4:	739a      	strb	r2, [r3, #14]
            }
            else {
                QS_filt_.glb[13] |= 0xC0U;
                QS_filt_.glb[14] |= 0x07U;
            }
            break;
 80054a6:	e0a2      	b.n	80055ee <QS_glbFilter_+0x562>
                QS_filt_.glb[13] |= 0xC0U;
 80054a8:	4b53      	ldr	r3, [pc, #332]	@ (80055f8 <QS_glbFilter_+0x56c>)
 80054aa:	7b5b      	ldrb	r3, [r3, #13]
 80054ac:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 80054b0:	b2da      	uxtb	r2, r3
 80054b2:	4b51      	ldr	r3, [pc, #324]	@ (80055f8 <QS_glbFilter_+0x56c>)
 80054b4:	735a      	strb	r2, [r3, #13]
                QS_filt_.glb[14] |= 0x07U;
 80054b6:	4b50      	ldr	r3, [pc, #320]	@ (80055f8 <QS_glbFilter_+0x56c>)
 80054b8:	7b9b      	ldrb	r3, [r3, #14]
 80054ba:	f043 0307 	orr.w	r3, r3, #7
 80054be:	b2da      	uxtb	r2, r3
 80054c0:	4b4d      	ldr	r3, [pc, #308]	@ (80055f8 <QS_glbFilter_+0x56c>)
 80054c2:	739a      	strb	r2, [r3, #14]
            break;
 80054c4:	e093      	b.n	80055ee <QS_glbFilter_+0x562>
        case (uint8_t)QS_U3_RECORDS:
            if (isRemove) {
 80054c6:	7afb      	ldrb	r3, [r7, #11]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d007      	beq.n	80054dc <QS_glbFilter_+0x450>
                QS_filt_.glb[14] &= (uint8_t)(~0xF8U & 0xFFU);
 80054cc:	4b4a      	ldr	r3, [pc, #296]	@ (80055f8 <QS_glbFilter_+0x56c>)
 80054ce:	7b9b      	ldrb	r3, [r3, #14]
 80054d0:	f003 0307 	and.w	r3, r3, #7
 80054d4:	b2da      	uxtb	r2, r3
 80054d6:	4b48      	ldr	r3, [pc, #288]	@ (80055f8 <QS_glbFilter_+0x56c>)
 80054d8:	739a      	strb	r2, [r3, #14]
            }
            else {
                QS_filt_.glb[14] |= 0xF8U;
            }
            break;
 80054da:	e088      	b.n	80055ee <QS_glbFilter_+0x562>
                QS_filt_.glb[14] |= 0xF8U;
 80054dc:	4b46      	ldr	r3, [pc, #280]	@ (80055f8 <QS_glbFilter_+0x56c>)
 80054de:	7b9b      	ldrb	r3, [r3, #14]
 80054e0:	f063 0307 	orn	r3, r3, #7
 80054e4:	b2da      	uxtb	r2, r3
 80054e6:	4b44      	ldr	r3, [pc, #272]	@ (80055f8 <QS_glbFilter_+0x56c>)
 80054e8:	739a      	strb	r2, [r3, #14]
            break;
 80054ea:	e080      	b.n	80055ee <QS_glbFilter_+0x562>
        case (uint8_t)QS_U4_RECORDS:
            if (isRemove) {
 80054ec:	7afb      	ldrb	r3, [r7, #11]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d007      	beq.n	8005502 <QS_glbFilter_+0x476>
                QS_filt_.glb[15] &= (uint8_t)(~0x1FU & 0xFFU);
 80054f2:	4b41      	ldr	r3, [pc, #260]	@ (80055f8 <QS_glbFilter_+0x56c>)
 80054f4:	7bdb      	ldrb	r3, [r3, #15]
 80054f6:	f023 031f 	bic.w	r3, r3, #31
 80054fa:	b2da      	uxtb	r2, r3
 80054fc:	4b3e      	ldr	r3, [pc, #248]	@ (80055f8 <QS_glbFilter_+0x56c>)
 80054fe:	73da      	strb	r2, [r3, #15]
            }
            else {
                QS_filt_.glb[15] |= 0x1FU;
            }
            break;
 8005500:	e075      	b.n	80055ee <QS_glbFilter_+0x562>
                QS_filt_.glb[15] |= 0x1FU;
 8005502:	4b3d      	ldr	r3, [pc, #244]	@ (80055f8 <QS_glbFilter_+0x56c>)
 8005504:	7bdb      	ldrb	r3, [r3, #15]
 8005506:	f043 031f 	orr.w	r3, r3, #31
 800550a:	b2da      	uxtb	r2, r3
 800550c:	4b3a      	ldr	r3, [pc, #232]	@ (80055f8 <QS_glbFilter_+0x56c>)
 800550e:	73da      	strb	r2, [r3, #15]
            break;
 8005510:	e06d      	b.n	80055ee <QS_glbFilter_+0x562>
        case (uint8_t)QS_UA_RECORDS:
            if (isRemove) {
 8005512:	7afb      	ldrb	r3, [r7, #11]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d014      	beq.n	8005542 <QS_glbFilter_+0x4b6>
                QS_filt_.glb[12] &= (uint8_t)(~0xF0U & 0xFFU);
 8005518:	4b37      	ldr	r3, [pc, #220]	@ (80055f8 <QS_glbFilter_+0x56c>)
 800551a:	7b1b      	ldrb	r3, [r3, #12]
 800551c:	f003 030f 	and.w	r3, r3, #15
 8005520:	b2da      	uxtb	r2, r3
 8005522:	4b35      	ldr	r3, [pc, #212]	@ (80055f8 <QS_glbFilter_+0x56c>)
 8005524:	731a      	strb	r2, [r3, #12]
                QS_filt_.glb[13] = 0U;
 8005526:	4b34      	ldr	r3, [pc, #208]	@ (80055f8 <QS_glbFilter_+0x56c>)
 8005528:	2200      	movs	r2, #0
 800552a:	735a      	strb	r2, [r3, #13]
                QS_filt_.glb[14] = 0U;
 800552c:	4b32      	ldr	r3, [pc, #200]	@ (80055f8 <QS_glbFilter_+0x56c>)
 800552e:	2200      	movs	r2, #0
 8005530:	739a      	strb	r2, [r3, #14]
                QS_filt_.glb[15] &= (uint8_t)(~0x1FU & 0xFFU);
 8005532:	4b31      	ldr	r3, [pc, #196]	@ (80055f8 <QS_glbFilter_+0x56c>)
 8005534:	7bdb      	ldrb	r3, [r3, #15]
 8005536:	f023 031f 	bic.w	r3, r3, #31
 800553a:	b2da      	uxtb	r2, r3
 800553c:	4b2e      	ldr	r3, [pc, #184]	@ (80055f8 <QS_glbFilter_+0x56c>)
 800553e:	73da      	strb	r2, [r3, #15]
                QS_filt_.glb[12] |= 0xF0U;
                QS_filt_.glb[13] |= 0xFFU;
                QS_filt_.glb[14] |= 0xFFU;
                QS_filt_.glb[15] |= 0x1FU;
            }
            break;
 8005540:	e055      	b.n	80055ee <QS_glbFilter_+0x562>
                QS_filt_.glb[12] |= 0xF0U;
 8005542:	4b2d      	ldr	r3, [pc, #180]	@ (80055f8 <QS_glbFilter_+0x56c>)
 8005544:	7b1b      	ldrb	r3, [r3, #12]
 8005546:	f063 030f 	orn	r3, r3, #15
 800554a:	b2da      	uxtb	r2, r3
 800554c:	4b2a      	ldr	r3, [pc, #168]	@ (80055f8 <QS_glbFilter_+0x56c>)
 800554e:	731a      	strb	r2, [r3, #12]
                QS_filt_.glb[13] |= 0xFFU;
 8005550:	4b29      	ldr	r3, [pc, #164]	@ (80055f8 <QS_glbFilter_+0x56c>)
 8005552:	22ff      	movs	r2, #255	@ 0xff
 8005554:	735a      	strb	r2, [r3, #13]
                QS_filt_.glb[14] |= 0xFFU;
 8005556:	4b28      	ldr	r3, [pc, #160]	@ (80055f8 <QS_glbFilter_+0x56c>)
 8005558:	22ff      	movs	r2, #255	@ 0xff
 800555a:	739a      	strb	r2, [r3, #14]
                QS_filt_.glb[15] |= 0x1FU;
 800555c:	4b26      	ldr	r3, [pc, #152]	@ (80055f8 <QS_glbFilter_+0x56c>)
 800555e:	7bdb      	ldrb	r3, [r3, #15]
 8005560:	f043 031f 	orr.w	r3, r3, #31
 8005564:	b2da      	uxtb	r2, r3
 8005566:	4b24      	ldr	r3, [pc, #144]	@ (80055f8 <QS_glbFilter_+0x56c>)
 8005568:	73da      	strb	r2, [r3, #15]
            break;
 800556a:	e040      	b.n	80055ee <QS_glbFilter_+0x562>
        default: {
            QS_CRIT_STAT
            QS_CRIT_ENTRY();
 800556c:	f7fc ff16 	bl	800239c <QF_crit_entry_>
            // QS rec number must be below 0x7D, so no need for escaping
            Q_ASSERT_INCRIT(210, rec < 0x7DU);
 8005570:	7abb      	ldrb	r3, [r7, #10]
 8005572:	2b7c      	cmp	r3, #124	@ 0x7c
 8005574:	d903      	bls.n	800557e <QS_glbFilter_+0x4f2>
 8005576:	21d2      	movs	r1, #210	@ 0xd2
 8005578:	4820      	ldr	r0, [pc, #128]	@ (80055fc <QS_glbFilter_+0x570>)
 800557a:	f7fb fa57 	bl	8000a2c <Q_onError>
            QS_CRIT_EXIT();
 800557e:	f7fc ff1f 	bl	80023c0 <QF_crit_exit_>

            if (isRemove) {
 8005582:	7afb      	ldrb	r3, [r7, #11]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d016      	beq.n	80055b6 <QS_glbFilter_+0x52a>
                QS_filt_.glb[rec >> 3U]
 8005588:	7abb      	ldrb	r3, [r7, #10]
 800558a:	08db      	lsrs	r3, r3, #3
 800558c:	b2db      	uxtb	r3, r3
 800558e:	461a      	mov	r2, r3
 8005590:	4b19      	ldr	r3, [pc, #100]	@ (80055f8 <QS_glbFilter_+0x56c>)
 8005592:	5c9a      	ldrb	r2, [r3, r2]
                    &= (uint8_t)(~(1U << (rec & 7U)) & 0xFFU);
 8005594:	7abb      	ldrb	r3, [r7, #10]
 8005596:	f003 0307 	and.w	r3, r3, #7
 800559a:	2101      	movs	r1, #1
 800559c:	fa01 f303 	lsl.w	r3, r1, r3
 80055a0:	b2db      	uxtb	r3, r3
 80055a2:	43db      	mvns	r3, r3
 80055a4:	b2db      	uxtb	r3, r3
                QS_filt_.glb[rec >> 3U]
 80055a6:	7ab9      	ldrb	r1, [r7, #10]
 80055a8:	08c9      	lsrs	r1, r1, #3
 80055aa:	b2c9      	uxtb	r1, r1
                    &= (uint8_t)(~(1U << (rec & 7U)) & 0xFFU);
 80055ac:	4013      	ands	r3, r2
 80055ae:	b2da      	uxtb	r2, r3
 80055b0:	4b11      	ldr	r3, [pc, #68]	@ (80055f8 <QS_glbFilter_+0x56c>)
 80055b2:	545a      	strb	r2, [r3, r1]
                QS_filt_.glb[rec >> 3U]
                    |= (1U << (rec & 7U));
                // never turn the last 3 records on (0x7D, 0x7E, 0x7F)
                QS_filt_.glb[15] &= 0x1FU;
            }
            break;
 80055b4:	e01a      	b.n	80055ec <QS_glbFilter_+0x560>
                QS_filt_.glb[rec >> 3U]
 80055b6:	7abb      	ldrb	r3, [r7, #10]
 80055b8:	08db      	lsrs	r3, r3, #3
 80055ba:	b2db      	uxtb	r3, r3
 80055bc:	461a      	mov	r2, r3
 80055be:	4b0e      	ldr	r3, [pc, #56]	@ (80055f8 <QS_glbFilter_+0x56c>)
 80055c0:	5c9a      	ldrb	r2, [r3, r2]
                    |= (1U << (rec & 7U));
 80055c2:	7abb      	ldrb	r3, [r7, #10]
 80055c4:	f003 0307 	and.w	r3, r3, #7
 80055c8:	2101      	movs	r1, #1
 80055ca:	fa01 f303 	lsl.w	r3, r1, r3
 80055ce:	b2db      	uxtb	r3, r3
                QS_filt_.glb[rec >> 3U]
 80055d0:	7ab9      	ldrb	r1, [r7, #10]
 80055d2:	08c9      	lsrs	r1, r1, #3
 80055d4:	b2c9      	uxtb	r1, r1
                    |= (1U << (rec & 7U));
 80055d6:	4313      	orrs	r3, r2
 80055d8:	b2da      	uxtb	r2, r3
 80055da:	4b07      	ldr	r3, [pc, #28]	@ (80055f8 <QS_glbFilter_+0x56c>)
 80055dc:	545a      	strb	r2, [r3, r1]
                QS_filt_.glb[15] &= 0x1FU;
 80055de:	4b06      	ldr	r3, [pc, #24]	@ (80055f8 <QS_glbFilter_+0x56c>)
 80055e0:	7bdb      	ldrb	r3, [r3, #15]
 80055e2:	f003 031f 	and.w	r3, r3, #31
 80055e6:	b2da      	uxtb	r2, r3
 80055e8:	4b03      	ldr	r3, [pc, #12]	@ (80055f8 <QS_glbFilter_+0x56c>)
 80055ea:	73da      	strb	r2, [r3, #15]
            break;
 80055ec:	bf00      	nop
        }
    }
}
 80055ee:	bf00      	nop
 80055f0:	3710      	adds	r7, #16
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}
 80055f6:	bf00      	nop
 80055f8:	20000a84 	.word	0x20000a84
 80055fc:	0800794c 	.word	0x0800794c

08005600 <QS_locFilter_>:

//............................................................................
void QS_locFilter_(int_fast16_t const filter) {
 8005600:	b580      	push	{r7, lr}
 8005602:	b084      	sub	sp, #16
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
    bool const isRemove = (filter < 0);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	0fdb      	lsrs	r3, r3, #31
 800560c:	72fb      	strb	r3, [r7, #11]
    uint8_t const qsId = isRemove ? (uint8_t)(-filter) : (uint8_t)filter;
 800560e:	7afb      	ldrb	r3, [r7, #11]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d004      	beq.n	800561e <QS_locFilter_+0x1e>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	b2db      	uxtb	r3, r3
 8005618:	425b      	negs	r3, r3
 800561a:	b2db      	uxtb	r3, r3
 800561c:	e001      	b.n	8005622 <QS_locFilter_+0x22>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	b2db      	uxtb	r3, r3
 8005622:	72bb      	strb	r3, [r7, #10]
    uint8_t const tmp = (isRemove ? 0x00U : 0xFFU);
 8005624:	7afb      	ldrb	r3, [r7, #11]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d001      	beq.n	800562e <QS_locFilter_+0x2e>
 800562a:	2300      	movs	r3, #0
 800562c:	e000      	b.n	8005630 <QS_locFilter_+0x30>
 800562e:	23ff      	movs	r3, #255	@ 0xff
 8005630:	727b      	strb	r3, [r7, #9]
    uint_fast8_t i;
    switch (qsId) {
 8005632:	7abb      	ldrb	r3, [r7, #10]
 8005634:	2bf0      	cmp	r3, #240	@ 0xf0
 8005636:	d00a      	beq.n	800564e <QS_locFilter_+0x4e>
 8005638:	2bf0      	cmp	r3, #240	@ 0xf0
 800563a:	dc76      	bgt.n	800572a <QS_locFilter_+0x12a>
 800563c:	2be0      	cmp	r3, #224	@ 0xe0
 800563e:	d059      	beq.n	80056f4 <QS_locFilter_+0xf4>
 8005640:	2be0      	cmp	r3, #224	@ 0xe0
 8005642:	dc72      	bgt.n	800572a <QS_locFilter_+0x12a>
 8005644:	2b80      	cmp	r3, #128	@ 0x80
 8005646:	d024      	beq.n	8005692 <QS_locFilter_+0x92>
 8005648:	2bc0      	cmp	r3, #192	@ 0xc0
 800564a:	d044      	beq.n	80056d6 <QS_locFilter_+0xd6>
 800564c:	e06d      	b.n	800572a <QS_locFilter_+0x12a>
        case (uint8_t)QS_ALL_IDS:
            // set all local filters (partially unrolled loop)
            for (i = 0U; i < Q_DIM(QS_filt_.loc); i += 4U) {
 800564e:	2300      	movs	r3, #0
 8005650:	60fb      	str	r3, [r7, #12]
 8005652:	e01a      	b.n	800568a <QS_locFilter_+0x8a>
                QS_filt_.loc[i     ] = tmp;
 8005654:	4a5a      	ldr	r2, [pc, #360]	@ (80057c0 <QS_locFilter_+0x1c0>)
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	4413      	add	r3, r2
 800565a:	3310      	adds	r3, #16
 800565c:	7a7a      	ldrb	r2, [r7, #9]
 800565e:	701a      	strb	r2, [r3, #0]
                QS_filt_.loc[i + 1U] = tmp;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	3301      	adds	r3, #1
 8005664:	4a56      	ldr	r2, [pc, #344]	@ (80057c0 <QS_locFilter_+0x1c0>)
 8005666:	4413      	add	r3, r2
 8005668:	7a7a      	ldrb	r2, [r7, #9]
 800566a:	741a      	strb	r2, [r3, #16]
                QS_filt_.loc[i + 2U] = tmp;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	3302      	adds	r3, #2
 8005670:	4a53      	ldr	r2, [pc, #332]	@ (80057c0 <QS_locFilter_+0x1c0>)
 8005672:	4413      	add	r3, r2
 8005674:	7a7a      	ldrb	r2, [r7, #9]
 8005676:	741a      	strb	r2, [r3, #16]
                QS_filt_.loc[i + 3U] = tmp;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	3303      	adds	r3, #3
 800567c:	4a50      	ldr	r2, [pc, #320]	@ (80057c0 <QS_locFilter_+0x1c0>)
 800567e:	4413      	add	r3, r2
 8005680:	7a7a      	ldrb	r2, [r7, #9]
 8005682:	741a      	strb	r2, [r3, #16]
            for (i = 0U; i < Q_DIM(QS_filt_.loc); i += 4U) {
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	3304      	adds	r3, #4
 8005688:	60fb      	str	r3, [r7, #12]
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2b0f      	cmp	r3, #15
 800568e:	d9e1      	bls.n	8005654 <QS_locFilter_+0x54>
            }
            break;
 8005690:	e08a      	b.n	80057a8 <QS_locFilter_+0x1a8>
        case (uint8_t)QS_AO_IDS:
            for (i = 0U; i < 8U; i += 4U) {
 8005692:	2300      	movs	r3, #0
 8005694:	60fb      	str	r3, [r7, #12]
 8005696:	e01a      	b.n	80056ce <QS_locFilter_+0xce>
                QS_filt_.loc[i     ] = tmp;
 8005698:	4a49      	ldr	r2, [pc, #292]	@ (80057c0 <QS_locFilter_+0x1c0>)
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	4413      	add	r3, r2
 800569e:	3310      	adds	r3, #16
 80056a0:	7a7a      	ldrb	r2, [r7, #9]
 80056a2:	701a      	strb	r2, [r3, #0]
                QS_filt_.loc[i + 1U] = tmp;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	3301      	adds	r3, #1
 80056a8:	4a45      	ldr	r2, [pc, #276]	@ (80057c0 <QS_locFilter_+0x1c0>)
 80056aa:	4413      	add	r3, r2
 80056ac:	7a7a      	ldrb	r2, [r7, #9]
 80056ae:	741a      	strb	r2, [r3, #16]
                QS_filt_.loc[i + 2U] = tmp;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	3302      	adds	r3, #2
 80056b4:	4a42      	ldr	r2, [pc, #264]	@ (80057c0 <QS_locFilter_+0x1c0>)
 80056b6:	4413      	add	r3, r2
 80056b8:	7a7a      	ldrb	r2, [r7, #9]
 80056ba:	741a      	strb	r2, [r3, #16]
                QS_filt_.loc[i + 3U] = tmp;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	3303      	adds	r3, #3
 80056c0:	4a3f      	ldr	r2, [pc, #252]	@ (80057c0 <QS_locFilter_+0x1c0>)
 80056c2:	4413      	add	r3, r2
 80056c4:	7a7a      	ldrb	r2, [r7, #9]
 80056c6:	741a      	strb	r2, [r3, #16]
            for (i = 0U; i < 8U; i += 4U) {
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	3304      	adds	r3, #4
 80056cc:	60fb      	str	r3, [r7, #12]
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2b07      	cmp	r3, #7
 80056d2:	d9e1      	bls.n	8005698 <QS_locFilter_+0x98>
            }
            break;
 80056d4:	e068      	b.n	80057a8 <QS_locFilter_+0x1a8>
        case (uint8_t)QS_EP_IDS:
            i = 8U;
 80056d6:	2308      	movs	r3, #8
 80056d8:	60fb      	str	r3, [r7, #12]
            QS_filt_.loc[i     ] = tmp;
 80056da:	4a39      	ldr	r2, [pc, #228]	@ (80057c0 <QS_locFilter_+0x1c0>)
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	4413      	add	r3, r2
 80056e0:	3310      	adds	r3, #16
 80056e2:	7a7a      	ldrb	r2, [r7, #9]
 80056e4:	701a      	strb	r2, [r3, #0]
            QS_filt_.loc[i + 1U] = tmp;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	3301      	adds	r3, #1
 80056ea:	4a35      	ldr	r2, [pc, #212]	@ (80057c0 <QS_locFilter_+0x1c0>)
 80056ec:	4413      	add	r3, r2
 80056ee:	7a7a      	ldrb	r2, [r7, #9]
 80056f0:	741a      	strb	r2, [r3, #16]
            break;
 80056f2:	e059      	b.n	80057a8 <QS_locFilter_+0x1a8>
        case (uint8_t)QS_AP_IDS:
            i = 12U;
 80056f4:	230c      	movs	r3, #12
 80056f6:	60fb      	str	r3, [r7, #12]
            QS_filt_.loc[i     ] = tmp;
 80056f8:	4a31      	ldr	r2, [pc, #196]	@ (80057c0 <QS_locFilter_+0x1c0>)
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	4413      	add	r3, r2
 80056fe:	3310      	adds	r3, #16
 8005700:	7a7a      	ldrb	r2, [r7, #9]
 8005702:	701a      	strb	r2, [r3, #0]
            QS_filt_.loc[i + 1U] = tmp;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	3301      	adds	r3, #1
 8005708:	4a2d      	ldr	r2, [pc, #180]	@ (80057c0 <QS_locFilter_+0x1c0>)
 800570a:	4413      	add	r3, r2
 800570c:	7a7a      	ldrb	r2, [r7, #9]
 800570e:	741a      	strb	r2, [r3, #16]
            QS_filt_.loc[i + 2U] = tmp;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	3302      	adds	r3, #2
 8005714:	4a2a      	ldr	r2, [pc, #168]	@ (80057c0 <QS_locFilter_+0x1c0>)
 8005716:	4413      	add	r3, r2
 8005718:	7a7a      	ldrb	r2, [r7, #9]
 800571a:	741a      	strb	r2, [r3, #16]
            QS_filt_.loc[i + 3U] = tmp;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	3303      	adds	r3, #3
 8005720:	4a27      	ldr	r2, [pc, #156]	@ (80057c0 <QS_locFilter_+0x1c0>)
 8005722:	4413      	add	r3, r2
 8005724:	7a7a      	ldrb	r2, [r7, #9]
 8005726:	741a      	strb	r2, [r3, #16]
            break;
 8005728:	e03e      	b.n	80057a8 <QS_locFilter_+0x1a8>
        default: {
            QS_CRIT_STAT
            QS_CRIT_ENTRY();
 800572a:	f7fc fe37 	bl	800239c <QF_crit_entry_>
            // qsId must be in range
            Q_ASSERT_INCRIT(310, qsId < 0x7FU);
 800572e:	7abb      	ldrb	r3, [r7, #10]
 8005730:	2b7e      	cmp	r3, #126	@ 0x7e
 8005732:	d904      	bls.n	800573e <QS_locFilter_+0x13e>
 8005734:	f44f 719b 	mov.w	r1, #310	@ 0x136
 8005738:	4822      	ldr	r0, [pc, #136]	@ (80057c4 <QS_locFilter_+0x1c4>)
 800573a:	f7fb f977 	bl	8000a2c <Q_onError>
            QS_CRIT_EXIT();
 800573e:	f7fc fe3f 	bl	80023c0 <QF_crit_exit_>
            if (isRemove) {
 8005742:	7afb      	ldrb	r3, [r7, #11]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d018      	beq.n	800577a <QS_locFilter_+0x17a>
                QS_filt_.loc[qsId >> 3U]
 8005748:	7abb      	ldrb	r3, [r7, #10]
 800574a:	08db      	lsrs	r3, r3, #3
 800574c:	b2db      	uxtb	r3, r3
 800574e:	461a      	mov	r2, r3
 8005750:	4b1b      	ldr	r3, [pc, #108]	@ (80057c0 <QS_locFilter_+0x1c0>)
 8005752:	4413      	add	r3, r2
 8005754:	7c1a      	ldrb	r2, [r3, #16]
                    &= (uint8_t)(~(1U << (qsId & 7U)) & 0xFFU);
 8005756:	7abb      	ldrb	r3, [r7, #10]
 8005758:	f003 0307 	and.w	r3, r3, #7
 800575c:	2101      	movs	r1, #1
 800575e:	fa01 f303 	lsl.w	r3, r1, r3
 8005762:	b2db      	uxtb	r3, r3
 8005764:	43db      	mvns	r3, r3
 8005766:	b2db      	uxtb	r3, r3
                QS_filt_.loc[qsId >> 3U]
 8005768:	7ab9      	ldrb	r1, [r7, #10]
 800576a:	08c9      	lsrs	r1, r1, #3
 800576c:	b2c9      	uxtb	r1, r1
                    &= (uint8_t)(~(1U << (qsId & 7U)) & 0xFFU);
 800576e:	4013      	ands	r3, r2
 8005770:	b2da      	uxtb	r2, r3
 8005772:	4b13      	ldr	r3, [pc, #76]	@ (80057c0 <QS_locFilter_+0x1c0>)
 8005774:	440b      	add	r3, r1
 8005776:	741a      	strb	r2, [r3, #16]
            }
            else {
                QS_filt_.loc[qsId >> 3U]
                    |= (1U << (qsId & 7U));
            }
            break;
 8005778:	e015      	b.n	80057a6 <QS_locFilter_+0x1a6>
                QS_filt_.loc[qsId >> 3U]
 800577a:	7abb      	ldrb	r3, [r7, #10]
 800577c:	08db      	lsrs	r3, r3, #3
 800577e:	b2db      	uxtb	r3, r3
 8005780:	461a      	mov	r2, r3
 8005782:	4b0f      	ldr	r3, [pc, #60]	@ (80057c0 <QS_locFilter_+0x1c0>)
 8005784:	4413      	add	r3, r2
 8005786:	7c1a      	ldrb	r2, [r3, #16]
                    |= (1U << (qsId & 7U));
 8005788:	7abb      	ldrb	r3, [r7, #10]
 800578a:	f003 0307 	and.w	r3, r3, #7
 800578e:	2101      	movs	r1, #1
 8005790:	fa01 f303 	lsl.w	r3, r1, r3
 8005794:	b2db      	uxtb	r3, r3
                QS_filt_.loc[qsId >> 3U]
 8005796:	7ab9      	ldrb	r1, [r7, #10]
 8005798:	08c9      	lsrs	r1, r1, #3
 800579a:	b2c9      	uxtb	r1, r1
                    |= (1U << (qsId & 7U));
 800579c:	4313      	orrs	r3, r2
 800579e:	b2da      	uxtb	r2, r3
 80057a0:	4b07      	ldr	r3, [pc, #28]	@ (80057c0 <QS_locFilter_+0x1c0>)
 80057a2:	440b      	add	r3, r1
 80057a4:	741a      	strb	r2, [r3, #16]
            break;
 80057a6:	bf00      	nop
        }
    }
    QS_filt_.loc[0] |= 0x01U; // leave QS_ID == 0 always on
 80057a8:	4b05      	ldr	r3, [pc, #20]	@ (80057c0 <QS_locFilter_+0x1c0>)
 80057aa:	7c1b      	ldrb	r3, [r3, #16]
 80057ac:	f043 0301 	orr.w	r3, r3, #1
 80057b0:	b2da      	uxtb	r2, r3
 80057b2:	4b03      	ldr	r3, [pc, #12]	@ (80057c0 <QS_locFilter_+0x1c0>)
 80057b4:	741a      	strb	r2, [r3, #16]
}
 80057b6:	bf00      	nop
 80057b8:	3710      	adds	r7, #16
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}
 80057be:	bf00      	nop
 80057c0:	20000a84 	.word	0x20000a84
 80057c4:	0800794c 	.word	0x0800794c

080057c8 <QS_beginRec_>:

//............................................................................
void QS_beginRec_(uint_fast8_t const rec) {
 80057c8:	b480      	push	{r7}
 80057ca:	b087      	sub	sp, #28
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
    uint8_t const b = (uint8_t)(QS_priv_.seq + 1U);
 80057d0:	4b3c      	ldr	r3, [pc, #240]	@ (80058c4 <QS_beginRec_+0xfc>)
 80057d2:	7c1b      	ldrb	r3, [r3, #16]
 80057d4:	b2db      	uxtb	r3, r3
 80057d6:	3301      	adds	r3, #1
 80057d8:	757b      	strb	r3, [r7, #21]
    uint8_t chksum  = 0U;                // reset the checksum
 80057da:	2300      	movs	r3, #0
 80057dc:	753b      	strb	r3, [r7, #20]
    uint8_t * const buf = QS_priv_.buf;  // put in a temporary (register)
 80057de:	4b39      	ldr	r3, [pc, #228]	@ (80058c4 <QS_beginRec_+0xfc>)
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	613b      	str	r3, [r7, #16]
    QSCtr head          = QS_priv_.head; // put in a temporary (register)
 80057e4:	4b37      	ldr	r3, [pc, #220]	@ (80058c4 <QS_beginRec_+0xfc>)
 80057e6:	895b      	ldrh	r3, [r3, #10]
 80057e8:	82fb      	strh	r3, [r7, #22]
    QSCtr const end     = QS_priv_.end;  // put in a temporary (register)
 80057ea:	4b36      	ldr	r3, [pc, #216]	@ (80058c4 <QS_beginRec_+0xfc>)
 80057ec:	891b      	ldrh	r3, [r3, #8]
 80057ee:	81fb      	strh	r3, [r7, #14]

    QS_priv_.seq = b; // store the incremented sequence num
 80057f0:	4a34      	ldr	r2, [pc, #208]	@ (80058c4 <QS_beginRec_+0xfc>)
 80057f2:	7d7b      	ldrb	r3, [r7, #21]
 80057f4:	7413      	strb	r3, [r2, #16]
    QS_priv_.used += 2U; // 2 bytes about to be added
 80057f6:	4b33      	ldr	r3, [pc, #204]	@ (80058c4 <QS_beginRec_+0xfc>)
 80057f8:	89db      	ldrh	r3, [r3, #14]
 80057fa:	b29b      	uxth	r3, r3
 80057fc:	3302      	adds	r3, #2
 80057fe:	b29a      	uxth	r2, r3
 8005800:	4b30      	ldr	r3, [pc, #192]	@ (80058c4 <QS_beginRec_+0xfc>)
 8005802:	81da      	strh	r2, [r3, #14]

    QS_INSERT_ESC_BYTE_(b)
 8005804:	7d3a      	ldrb	r2, [r7, #20]
 8005806:	7d7b      	ldrb	r3, [r7, #21]
 8005808:	4413      	add	r3, r2
 800580a:	753b      	strb	r3, [r7, #20]
 800580c:	7d7b      	ldrb	r3, [r7, #21]
 800580e:	2b7e      	cmp	r3, #126	@ 0x7e
 8005810:	d011      	beq.n	8005836 <QS_beginRec_+0x6e>
 8005812:	7d7b      	ldrb	r3, [r7, #21]
 8005814:	2b7d      	cmp	r3, #125	@ 0x7d
 8005816:	d00e      	beq.n	8005836 <QS_beginRec_+0x6e>
 8005818:	8afb      	ldrh	r3, [r7, #22]
 800581a:	693a      	ldr	r2, [r7, #16]
 800581c:	4413      	add	r3, r2
 800581e:	7d7a      	ldrb	r2, [r7, #21]
 8005820:	701a      	strb	r2, [r3, #0]
 8005822:	8afb      	ldrh	r3, [r7, #22]
 8005824:	3301      	adds	r3, #1
 8005826:	82fb      	strh	r3, [r7, #22]
 8005828:	8afa      	ldrh	r2, [r7, #22]
 800582a:	89fb      	ldrh	r3, [r7, #14]
 800582c:	429a      	cmp	r2, r3
 800582e:	d128      	bne.n	8005882 <QS_beginRec_+0xba>
 8005830:	2300      	movs	r3, #0
 8005832:	82fb      	strh	r3, [r7, #22]
 8005834:	e025      	b.n	8005882 <QS_beginRec_+0xba>
 8005836:	8afb      	ldrh	r3, [r7, #22]
 8005838:	693a      	ldr	r2, [r7, #16]
 800583a:	4413      	add	r3, r2
 800583c:	227d      	movs	r2, #125	@ 0x7d
 800583e:	701a      	strb	r2, [r3, #0]
 8005840:	8afb      	ldrh	r3, [r7, #22]
 8005842:	3301      	adds	r3, #1
 8005844:	82fb      	strh	r3, [r7, #22]
 8005846:	8afa      	ldrh	r2, [r7, #22]
 8005848:	89fb      	ldrh	r3, [r7, #14]
 800584a:	429a      	cmp	r2, r3
 800584c:	d101      	bne.n	8005852 <QS_beginRec_+0x8a>
 800584e:	2300      	movs	r3, #0
 8005850:	82fb      	strh	r3, [r7, #22]
 8005852:	8afb      	ldrh	r3, [r7, #22]
 8005854:	693a      	ldr	r2, [r7, #16]
 8005856:	4413      	add	r3, r2
 8005858:	7d7a      	ldrb	r2, [r7, #21]
 800585a:	f082 0220 	eor.w	r2, r2, #32
 800585e:	b2d2      	uxtb	r2, r2
 8005860:	701a      	strb	r2, [r3, #0]
 8005862:	8afb      	ldrh	r3, [r7, #22]
 8005864:	3301      	adds	r3, #1
 8005866:	82fb      	strh	r3, [r7, #22]
 8005868:	8afa      	ldrh	r2, [r7, #22]
 800586a:	89fb      	ldrh	r3, [r7, #14]
 800586c:	429a      	cmp	r2, r3
 800586e:	d101      	bne.n	8005874 <QS_beginRec_+0xac>
 8005870:	2300      	movs	r3, #0
 8005872:	82fb      	strh	r3, [r7, #22]
 8005874:	4b13      	ldr	r3, [pc, #76]	@ (80058c4 <QS_beginRec_+0xfc>)
 8005876:	89db      	ldrh	r3, [r3, #14]
 8005878:	b29b      	uxth	r3, r3
 800587a:	3301      	adds	r3, #1
 800587c:	b29a      	uxth	r2, r3
 800587e:	4b11      	ldr	r3, [pc, #68]	@ (80058c4 <QS_beginRec_+0xfc>)
 8005880:	81da      	strh	r2, [r3, #14]

    chksum = (uint8_t)(chksum + rec); // update checksum
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	b2da      	uxtb	r2, r3
 8005886:	7d3b      	ldrb	r3, [r7, #20]
 8005888:	4413      	add	r3, r2
 800588a:	753b      	strb	r3, [r7, #20]
    QS_INSERT_BYTE_((uint8_t)rec) // rec byte does not need escaping
 800588c:	8afb      	ldrh	r3, [r7, #22]
 800588e:	693a      	ldr	r2, [r7, #16]
 8005890:	4413      	add	r3, r2
 8005892:	687a      	ldr	r2, [r7, #4]
 8005894:	b2d2      	uxtb	r2, r2
 8005896:	701a      	strb	r2, [r3, #0]
 8005898:	8afb      	ldrh	r3, [r7, #22]
 800589a:	3301      	adds	r3, #1
 800589c:	82fb      	strh	r3, [r7, #22]
 800589e:	8afa      	ldrh	r2, [r7, #22]
 80058a0:	89fb      	ldrh	r3, [r7, #14]
 80058a2:	429a      	cmp	r2, r3
 80058a4:	d101      	bne.n	80058aa <QS_beginRec_+0xe2>
 80058a6:	2300      	movs	r3, #0
 80058a8:	82fb      	strh	r3, [r7, #22]

    QS_priv_.head   = head;   // save the head
 80058aa:	4a06      	ldr	r2, [pc, #24]	@ (80058c4 <QS_beginRec_+0xfc>)
 80058ac:	8afb      	ldrh	r3, [r7, #22]
 80058ae:	8153      	strh	r3, [r2, #10]
    QS_priv_.chksum = chksum; // save the checksum
 80058b0:	4a04      	ldr	r2, [pc, #16]	@ (80058c4 <QS_beginRec_+0xfc>)
 80058b2:	7d3b      	ldrb	r3, [r7, #20]
 80058b4:	7453      	strb	r3, [r2, #17]
}
 80058b6:	bf00      	nop
 80058b8:	371c      	adds	r7, #28
 80058ba:	46bd      	mov	sp, r7
 80058bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c0:	4770      	bx	lr
 80058c2:	bf00      	nop
 80058c4:	20000aa4 	.word	0x20000aa4

080058c8 <QS_endRec_>:

//............................................................................
void QS_endRec_(void) {
 80058c8:	b480      	push	{r7}
 80058ca:	b085      	sub	sp, #20
 80058cc:	af00      	add	r7, sp, #0
    uint8_t * const buf = QS_priv_.buf;  // put in a temporary (register)
 80058ce:	4b3a      	ldr	r3, [pc, #232]	@ (80059b8 <QS_endRec_+0xf0>)
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	60bb      	str	r3, [r7, #8]
    QSCtr   head        = QS_priv_.head;
 80058d4:	4b38      	ldr	r3, [pc, #224]	@ (80059b8 <QS_endRec_+0xf0>)
 80058d6:	895b      	ldrh	r3, [r3, #10]
 80058d8:	81fb      	strh	r3, [r7, #14]
    QSCtr const end     = QS_priv_.end;
 80058da:	4b37      	ldr	r3, [pc, #220]	@ (80059b8 <QS_endRec_+0xf0>)
 80058dc:	891b      	ldrh	r3, [r3, #8]
 80058de:	80fb      	strh	r3, [r7, #6]
    uint8_t b = QS_priv_.chksum;
 80058e0:	4b35      	ldr	r3, [pc, #212]	@ (80059b8 <QS_endRec_+0xf0>)
 80058e2:	7c5b      	ldrb	r3, [r3, #17]
 80058e4:	717b      	strb	r3, [r7, #5]
    b ^= 0xFFU;   // invert the bits in the checksum
 80058e6:	797b      	ldrb	r3, [r7, #5]
 80058e8:	43db      	mvns	r3, r3
 80058ea:	717b      	strb	r3, [r7, #5]

    QS_priv_.used += 2U; // 2 bytes about to be added
 80058ec:	4b32      	ldr	r3, [pc, #200]	@ (80059b8 <QS_endRec_+0xf0>)
 80058ee:	89db      	ldrh	r3, [r3, #14]
 80058f0:	b29b      	uxth	r3, r3
 80058f2:	3302      	adds	r3, #2
 80058f4:	b29a      	uxth	r2, r3
 80058f6:	4b30      	ldr	r3, [pc, #192]	@ (80059b8 <QS_endRec_+0xf0>)
 80058f8:	81da      	strh	r2, [r3, #14]

    if ((b != QS_FRAME) && (b != QS_ESC)) {
 80058fa:	797b      	ldrb	r3, [r7, #5]
 80058fc:	2b7e      	cmp	r3, #126	@ 0x7e
 80058fe:	d011      	beq.n	8005924 <QS_endRec_+0x5c>
 8005900:	797b      	ldrb	r3, [r7, #5]
 8005902:	2b7d      	cmp	r3, #125	@ 0x7d
 8005904:	d00e      	beq.n	8005924 <QS_endRec_+0x5c>
        QS_INSERT_BYTE_(b)
 8005906:	89fb      	ldrh	r3, [r7, #14]
 8005908:	68ba      	ldr	r2, [r7, #8]
 800590a:	4413      	add	r3, r2
 800590c:	797a      	ldrb	r2, [r7, #5]
 800590e:	701a      	strb	r2, [r3, #0]
 8005910:	89fb      	ldrh	r3, [r7, #14]
 8005912:	3301      	adds	r3, #1
 8005914:	81fb      	strh	r3, [r7, #14]
 8005916:	89fa      	ldrh	r2, [r7, #14]
 8005918:	88fb      	ldrh	r3, [r7, #6]
 800591a:	429a      	cmp	r2, r3
 800591c:	d128      	bne.n	8005970 <QS_endRec_+0xa8>
 800591e:	2300      	movs	r3, #0
 8005920:	81fb      	strh	r3, [r7, #14]
 8005922:	e025      	b.n	8005970 <QS_endRec_+0xa8>
    }
    else {
        QS_INSERT_BYTE_(QS_ESC)
 8005924:	89fb      	ldrh	r3, [r7, #14]
 8005926:	68ba      	ldr	r2, [r7, #8]
 8005928:	4413      	add	r3, r2
 800592a:	227d      	movs	r2, #125	@ 0x7d
 800592c:	701a      	strb	r2, [r3, #0]
 800592e:	89fb      	ldrh	r3, [r7, #14]
 8005930:	3301      	adds	r3, #1
 8005932:	81fb      	strh	r3, [r7, #14]
 8005934:	89fa      	ldrh	r2, [r7, #14]
 8005936:	88fb      	ldrh	r3, [r7, #6]
 8005938:	429a      	cmp	r2, r3
 800593a:	d101      	bne.n	8005940 <QS_endRec_+0x78>
 800593c:	2300      	movs	r3, #0
 800593e:	81fb      	strh	r3, [r7, #14]
        QS_INSERT_BYTE_(b ^ QS_ESC_XOR)
 8005940:	89fb      	ldrh	r3, [r7, #14]
 8005942:	68ba      	ldr	r2, [r7, #8]
 8005944:	4413      	add	r3, r2
 8005946:	797a      	ldrb	r2, [r7, #5]
 8005948:	f082 0220 	eor.w	r2, r2, #32
 800594c:	b2d2      	uxtb	r2, r2
 800594e:	701a      	strb	r2, [r3, #0]
 8005950:	89fb      	ldrh	r3, [r7, #14]
 8005952:	3301      	adds	r3, #1
 8005954:	81fb      	strh	r3, [r7, #14]
 8005956:	89fa      	ldrh	r2, [r7, #14]
 8005958:	88fb      	ldrh	r3, [r7, #6]
 800595a:	429a      	cmp	r2, r3
 800595c:	d101      	bne.n	8005962 <QS_endRec_+0x9a>
 800595e:	2300      	movs	r3, #0
 8005960:	81fb      	strh	r3, [r7, #14]
        ++QS_priv_.used; // account for the ESC byte
 8005962:	4b15      	ldr	r3, [pc, #84]	@ (80059b8 <QS_endRec_+0xf0>)
 8005964:	89db      	ldrh	r3, [r3, #14]
 8005966:	b29b      	uxth	r3, r3
 8005968:	3301      	adds	r3, #1
 800596a:	b29a      	uxth	r2, r3
 800596c:	4b12      	ldr	r3, [pc, #72]	@ (80059b8 <QS_endRec_+0xf0>)
 800596e:	81da      	strh	r2, [r3, #14]
    }

    QS_INSERT_BYTE_(QS_FRAME) // do not escape this QS_FRAME
 8005970:	89fb      	ldrh	r3, [r7, #14]
 8005972:	68ba      	ldr	r2, [r7, #8]
 8005974:	4413      	add	r3, r2
 8005976:	227e      	movs	r2, #126	@ 0x7e
 8005978:	701a      	strb	r2, [r3, #0]
 800597a:	89fb      	ldrh	r3, [r7, #14]
 800597c:	3301      	adds	r3, #1
 800597e:	81fb      	strh	r3, [r7, #14]
 8005980:	89fa      	ldrh	r2, [r7, #14]
 8005982:	88fb      	ldrh	r3, [r7, #6]
 8005984:	429a      	cmp	r2, r3
 8005986:	d101      	bne.n	800598c <QS_endRec_+0xc4>
 8005988:	2300      	movs	r3, #0
 800598a:	81fb      	strh	r3, [r7, #14]

    QS_priv_.head = head; // save the head
 800598c:	4a0a      	ldr	r2, [pc, #40]	@ (80059b8 <QS_endRec_+0xf0>)
 800598e:	89fb      	ldrh	r3, [r7, #14]
 8005990:	8153      	strh	r3, [r2, #10]

    // overrun over the old data?
    if (QS_priv_.used > end) {
 8005992:	4b09      	ldr	r3, [pc, #36]	@ (80059b8 <QS_endRec_+0xf0>)
 8005994:	89db      	ldrh	r3, [r3, #14]
 8005996:	b29b      	uxth	r3, r3
 8005998:	88fa      	ldrh	r2, [r7, #6]
 800599a:	429a      	cmp	r2, r3
 800599c:	d205      	bcs.n	80059aa <QS_endRec_+0xe2>
        QS_priv_.used = end;   // the whole buffer is used
 800599e:	4a06      	ldr	r2, [pc, #24]	@ (80059b8 <QS_endRec_+0xf0>)
 80059a0:	88fb      	ldrh	r3, [r7, #6]
 80059a2:	81d3      	strh	r3, [r2, #14]
        QS_priv_.tail = head;  // shift the tail to the old data
 80059a4:	4a04      	ldr	r2, [pc, #16]	@ (80059b8 <QS_endRec_+0xf0>)
 80059a6:	89fb      	ldrh	r3, [r7, #14]
 80059a8:	8193      	strh	r3, [r2, #12]
    }
}
 80059aa:	bf00      	nop
 80059ac:	3714      	adds	r7, #20
 80059ae:	46bd      	mov	sp, r7
 80059b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b4:	4770      	bx	lr
 80059b6:	bf00      	nop
 80059b8:	20000aa4 	.word	0x20000aa4

080059bc <QS_u8_raw_>:

//............................................................................
void QS_u8_raw_(uint8_t const d) {
 80059bc:	b480      	push	{r7}
 80059be:	b087      	sub	sp, #28
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	4603      	mov	r3, r0
 80059c4:	71fb      	strb	r3, [r7, #7]
    uint8_t chksum = QS_priv_.chksum;    // put in a temporary (register)
 80059c6:	4b2f      	ldr	r3, [pc, #188]	@ (8005a84 <QS_u8_raw_+0xc8>)
 80059c8:	7c5b      	ldrb	r3, [r3, #17]
 80059ca:	757b      	strb	r3, [r7, #21]
    uint8_t * const buf = QS_priv_.buf;  // put in a temporary (register)
 80059cc:	4b2d      	ldr	r3, [pc, #180]	@ (8005a84 <QS_u8_raw_+0xc8>)
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	613b      	str	r3, [r7, #16]
    QSCtr head          = QS_priv_.head; // put in a temporary (register)
 80059d2:	4b2c      	ldr	r3, [pc, #176]	@ (8005a84 <QS_u8_raw_+0xc8>)
 80059d4:	895b      	ldrh	r3, [r3, #10]
 80059d6:	82fb      	strh	r3, [r7, #22]
    QSCtr const end     = QS_priv_.end;  // put in a temporary (register)
 80059d8:	4b2a      	ldr	r3, [pc, #168]	@ (8005a84 <QS_u8_raw_+0xc8>)
 80059da:	891b      	ldrh	r3, [r3, #8]
 80059dc:	81fb      	strh	r3, [r7, #14]

    QS_priv_.used += 1U; // 1 byte about to be added
 80059de:	4b29      	ldr	r3, [pc, #164]	@ (8005a84 <QS_u8_raw_+0xc8>)
 80059e0:	89db      	ldrh	r3, [r3, #14]
 80059e2:	b29b      	uxth	r3, r3
 80059e4:	3301      	adds	r3, #1
 80059e6:	b29a      	uxth	r2, r3
 80059e8:	4b26      	ldr	r3, [pc, #152]	@ (8005a84 <QS_u8_raw_+0xc8>)
 80059ea:	81da      	strh	r2, [r3, #14]
    QS_INSERT_ESC_BYTE_(d)
 80059ec:	7d7a      	ldrb	r2, [r7, #21]
 80059ee:	79fb      	ldrb	r3, [r7, #7]
 80059f0:	4413      	add	r3, r2
 80059f2:	757b      	strb	r3, [r7, #21]
 80059f4:	79fb      	ldrb	r3, [r7, #7]
 80059f6:	2b7e      	cmp	r3, #126	@ 0x7e
 80059f8:	d011      	beq.n	8005a1e <QS_u8_raw_+0x62>
 80059fa:	79fb      	ldrb	r3, [r7, #7]
 80059fc:	2b7d      	cmp	r3, #125	@ 0x7d
 80059fe:	d00e      	beq.n	8005a1e <QS_u8_raw_+0x62>
 8005a00:	8afb      	ldrh	r3, [r7, #22]
 8005a02:	693a      	ldr	r2, [r7, #16]
 8005a04:	4413      	add	r3, r2
 8005a06:	79fa      	ldrb	r2, [r7, #7]
 8005a08:	701a      	strb	r2, [r3, #0]
 8005a0a:	8afb      	ldrh	r3, [r7, #22]
 8005a0c:	3301      	adds	r3, #1
 8005a0e:	82fb      	strh	r3, [r7, #22]
 8005a10:	8afa      	ldrh	r2, [r7, #22]
 8005a12:	89fb      	ldrh	r3, [r7, #14]
 8005a14:	429a      	cmp	r2, r3
 8005a16:	d128      	bne.n	8005a6a <QS_u8_raw_+0xae>
 8005a18:	2300      	movs	r3, #0
 8005a1a:	82fb      	strh	r3, [r7, #22]
 8005a1c:	e025      	b.n	8005a6a <QS_u8_raw_+0xae>
 8005a1e:	8afb      	ldrh	r3, [r7, #22]
 8005a20:	693a      	ldr	r2, [r7, #16]
 8005a22:	4413      	add	r3, r2
 8005a24:	227d      	movs	r2, #125	@ 0x7d
 8005a26:	701a      	strb	r2, [r3, #0]
 8005a28:	8afb      	ldrh	r3, [r7, #22]
 8005a2a:	3301      	adds	r3, #1
 8005a2c:	82fb      	strh	r3, [r7, #22]
 8005a2e:	8afa      	ldrh	r2, [r7, #22]
 8005a30:	89fb      	ldrh	r3, [r7, #14]
 8005a32:	429a      	cmp	r2, r3
 8005a34:	d101      	bne.n	8005a3a <QS_u8_raw_+0x7e>
 8005a36:	2300      	movs	r3, #0
 8005a38:	82fb      	strh	r3, [r7, #22]
 8005a3a:	8afb      	ldrh	r3, [r7, #22]
 8005a3c:	693a      	ldr	r2, [r7, #16]
 8005a3e:	4413      	add	r3, r2
 8005a40:	79fa      	ldrb	r2, [r7, #7]
 8005a42:	f082 0220 	eor.w	r2, r2, #32
 8005a46:	b2d2      	uxtb	r2, r2
 8005a48:	701a      	strb	r2, [r3, #0]
 8005a4a:	8afb      	ldrh	r3, [r7, #22]
 8005a4c:	3301      	adds	r3, #1
 8005a4e:	82fb      	strh	r3, [r7, #22]
 8005a50:	8afa      	ldrh	r2, [r7, #22]
 8005a52:	89fb      	ldrh	r3, [r7, #14]
 8005a54:	429a      	cmp	r2, r3
 8005a56:	d101      	bne.n	8005a5c <QS_u8_raw_+0xa0>
 8005a58:	2300      	movs	r3, #0
 8005a5a:	82fb      	strh	r3, [r7, #22]
 8005a5c:	4b09      	ldr	r3, [pc, #36]	@ (8005a84 <QS_u8_raw_+0xc8>)
 8005a5e:	89db      	ldrh	r3, [r3, #14]
 8005a60:	b29b      	uxth	r3, r3
 8005a62:	3301      	adds	r3, #1
 8005a64:	b29a      	uxth	r2, r3
 8005a66:	4b07      	ldr	r3, [pc, #28]	@ (8005a84 <QS_u8_raw_+0xc8>)
 8005a68:	81da      	strh	r2, [r3, #14]

    QS_priv_.head   = head;    // save the head
 8005a6a:	4a06      	ldr	r2, [pc, #24]	@ (8005a84 <QS_u8_raw_+0xc8>)
 8005a6c:	8afb      	ldrh	r3, [r7, #22]
 8005a6e:	8153      	strh	r3, [r2, #10]
    QS_priv_.chksum = chksum;  // save the checksum
 8005a70:	4a04      	ldr	r2, [pc, #16]	@ (8005a84 <QS_u8_raw_+0xc8>)
 8005a72:	7d7b      	ldrb	r3, [r7, #21]
 8005a74:	7453      	strb	r3, [r2, #17]
}
 8005a76:	bf00      	nop
 8005a78:	371c      	adds	r7, #28
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a80:	4770      	bx	lr
 8005a82:	bf00      	nop
 8005a84:	20000aa4 	.word	0x20000aa4

08005a88 <QS_2u8_raw_>:

//............................................................................
void QS_2u8_raw_(
    uint8_t const d1,
    uint8_t const d2)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b087      	sub	sp, #28
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	4603      	mov	r3, r0
 8005a90:	460a      	mov	r2, r1
 8005a92:	71fb      	strb	r3, [r7, #7]
 8005a94:	4613      	mov	r3, r2
 8005a96:	71bb      	strb	r3, [r7, #6]
    uint8_t chksum = QS_priv_.chksum;    // put in a temporary (register)
 8005a98:	4b4e      	ldr	r3, [pc, #312]	@ (8005bd4 <QS_2u8_raw_+0x14c>)
 8005a9a:	7c5b      	ldrb	r3, [r3, #17]
 8005a9c:	757b      	strb	r3, [r7, #21]
    uint8_t * const buf = QS_priv_.buf;  // put in a temporary (register)
 8005a9e:	4b4d      	ldr	r3, [pc, #308]	@ (8005bd4 <QS_2u8_raw_+0x14c>)
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	613b      	str	r3, [r7, #16]
    QSCtr head          = QS_priv_.head; // put in a temporary (register)
 8005aa4:	4b4b      	ldr	r3, [pc, #300]	@ (8005bd4 <QS_2u8_raw_+0x14c>)
 8005aa6:	895b      	ldrh	r3, [r3, #10]
 8005aa8:	82fb      	strh	r3, [r7, #22]
    QSCtr const end     = QS_priv_.end;  // put in a temporary (register)
 8005aaa:	4b4a      	ldr	r3, [pc, #296]	@ (8005bd4 <QS_2u8_raw_+0x14c>)
 8005aac:	891b      	ldrh	r3, [r3, #8]
 8005aae:	81fb      	strh	r3, [r7, #14]

    QS_priv_.used += 2U; // 2 bytes are about to be added
 8005ab0:	4b48      	ldr	r3, [pc, #288]	@ (8005bd4 <QS_2u8_raw_+0x14c>)
 8005ab2:	89db      	ldrh	r3, [r3, #14]
 8005ab4:	b29b      	uxth	r3, r3
 8005ab6:	3302      	adds	r3, #2
 8005ab8:	b29a      	uxth	r2, r3
 8005aba:	4b46      	ldr	r3, [pc, #280]	@ (8005bd4 <QS_2u8_raw_+0x14c>)
 8005abc:	81da      	strh	r2, [r3, #14]
    QS_INSERT_ESC_BYTE_(d1)
 8005abe:	7d7a      	ldrb	r2, [r7, #21]
 8005ac0:	79fb      	ldrb	r3, [r7, #7]
 8005ac2:	4413      	add	r3, r2
 8005ac4:	757b      	strb	r3, [r7, #21]
 8005ac6:	79fb      	ldrb	r3, [r7, #7]
 8005ac8:	2b7e      	cmp	r3, #126	@ 0x7e
 8005aca:	d011      	beq.n	8005af0 <QS_2u8_raw_+0x68>
 8005acc:	79fb      	ldrb	r3, [r7, #7]
 8005ace:	2b7d      	cmp	r3, #125	@ 0x7d
 8005ad0:	d00e      	beq.n	8005af0 <QS_2u8_raw_+0x68>
 8005ad2:	8afb      	ldrh	r3, [r7, #22]
 8005ad4:	693a      	ldr	r2, [r7, #16]
 8005ad6:	4413      	add	r3, r2
 8005ad8:	79fa      	ldrb	r2, [r7, #7]
 8005ada:	701a      	strb	r2, [r3, #0]
 8005adc:	8afb      	ldrh	r3, [r7, #22]
 8005ade:	3301      	adds	r3, #1
 8005ae0:	82fb      	strh	r3, [r7, #22]
 8005ae2:	8afa      	ldrh	r2, [r7, #22]
 8005ae4:	89fb      	ldrh	r3, [r7, #14]
 8005ae6:	429a      	cmp	r2, r3
 8005ae8:	d128      	bne.n	8005b3c <QS_2u8_raw_+0xb4>
 8005aea:	2300      	movs	r3, #0
 8005aec:	82fb      	strh	r3, [r7, #22]
 8005aee:	e025      	b.n	8005b3c <QS_2u8_raw_+0xb4>
 8005af0:	8afb      	ldrh	r3, [r7, #22]
 8005af2:	693a      	ldr	r2, [r7, #16]
 8005af4:	4413      	add	r3, r2
 8005af6:	227d      	movs	r2, #125	@ 0x7d
 8005af8:	701a      	strb	r2, [r3, #0]
 8005afa:	8afb      	ldrh	r3, [r7, #22]
 8005afc:	3301      	adds	r3, #1
 8005afe:	82fb      	strh	r3, [r7, #22]
 8005b00:	8afa      	ldrh	r2, [r7, #22]
 8005b02:	89fb      	ldrh	r3, [r7, #14]
 8005b04:	429a      	cmp	r2, r3
 8005b06:	d101      	bne.n	8005b0c <QS_2u8_raw_+0x84>
 8005b08:	2300      	movs	r3, #0
 8005b0a:	82fb      	strh	r3, [r7, #22]
 8005b0c:	8afb      	ldrh	r3, [r7, #22]
 8005b0e:	693a      	ldr	r2, [r7, #16]
 8005b10:	4413      	add	r3, r2
 8005b12:	79fa      	ldrb	r2, [r7, #7]
 8005b14:	f082 0220 	eor.w	r2, r2, #32
 8005b18:	b2d2      	uxtb	r2, r2
 8005b1a:	701a      	strb	r2, [r3, #0]
 8005b1c:	8afb      	ldrh	r3, [r7, #22]
 8005b1e:	3301      	adds	r3, #1
 8005b20:	82fb      	strh	r3, [r7, #22]
 8005b22:	8afa      	ldrh	r2, [r7, #22]
 8005b24:	89fb      	ldrh	r3, [r7, #14]
 8005b26:	429a      	cmp	r2, r3
 8005b28:	d101      	bne.n	8005b2e <QS_2u8_raw_+0xa6>
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	82fb      	strh	r3, [r7, #22]
 8005b2e:	4b29      	ldr	r3, [pc, #164]	@ (8005bd4 <QS_2u8_raw_+0x14c>)
 8005b30:	89db      	ldrh	r3, [r3, #14]
 8005b32:	b29b      	uxth	r3, r3
 8005b34:	3301      	adds	r3, #1
 8005b36:	b29a      	uxth	r2, r3
 8005b38:	4b26      	ldr	r3, [pc, #152]	@ (8005bd4 <QS_2u8_raw_+0x14c>)
 8005b3a:	81da      	strh	r2, [r3, #14]
    QS_INSERT_ESC_BYTE_(d2)
 8005b3c:	7d7a      	ldrb	r2, [r7, #21]
 8005b3e:	79bb      	ldrb	r3, [r7, #6]
 8005b40:	4413      	add	r3, r2
 8005b42:	757b      	strb	r3, [r7, #21]
 8005b44:	79bb      	ldrb	r3, [r7, #6]
 8005b46:	2b7e      	cmp	r3, #126	@ 0x7e
 8005b48:	d011      	beq.n	8005b6e <QS_2u8_raw_+0xe6>
 8005b4a:	79bb      	ldrb	r3, [r7, #6]
 8005b4c:	2b7d      	cmp	r3, #125	@ 0x7d
 8005b4e:	d00e      	beq.n	8005b6e <QS_2u8_raw_+0xe6>
 8005b50:	8afb      	ldrh	r3, [r7, #22]
 8005b52:	693a      	ldr	r2, [r7, #16]
 8005b54:	4413      	add	r3, r2
 8005b56:	79ba      	ldrb	r2, [r7, #6]
 8005b58:	701a      	strb	r2, [r3, #0]
 8005b5a:	8afb      	ldrh	r3, [r7, #22]
 8005b5c:	3301      	adds	r3, #1
 8005b5e:	82fb      	strh	r3, [r7, #22]
 8005b60:	8afa      	ldrh	r2, [r7, #22]
 8005b62:	89fb      	ldrh	r3, [r7, #14]
 8005b64:	429a      	cmp	r2, r3
 8005b66:	d128      	bne.n	8005bba <QS_2u8_raw_+0x132>
 8005b68:	2300      	movs	r3, #0
 8005b6a:	82fb      	strh	r3, [r7, #22]
 8005b6c:	e025      	b.n	8005bba <QS_2u8_raw_+0x132>
 8005b6e:	8afb      	ldrh	r3, [r7, #22]
 8005b70:	693a      	ldr	r2, [r7, #16]
 8005b72:	4413      	add	r3, r2
 8005b74:	227d      	movs	r2, #125	@ 0x7d
 8005b76:	701a      	strb	r2, [r3, #0]
 8005b78:	8afb      	ldrh	r3, [r7, #22]
 8005b7a:	3301      	adds	r3, #1
 8005b7c:	82fb      	strh	r3, [r7, #22]
 8005b7e:	8afa      	ldrh	r2, [r7, #22]
 8005b80:	89fb      	ldrh	r3, [r7, #14]
 8005b82:	429a      	cmp	r2, r3
 8005b84:	d101      	bne.n	8005b8a <QS_2u8_raw_+0x102>
 8005b86:	2300      	movs	r3, #0
 8005b88:	82fb      	strh	r3, [r7, #22]
 8005b8a:	8afb      	ldrh	r3, [r7, #22]
 8005b8c:	693a      	ldr	r2, [r7, #16]
 8005b8e:	4413      	add	r3, r2
 8005b90:	79ba      	ldrb	r2, [r7, #6]
 8005b92:	f082 0220 	eor.w	r2, r2, #32
 8005b96:	b2d2      	uxtb	r2, r2
 8005b98:	701a      	strb	r2, [r3, #0]
 8005b9a:	8afb      	ldrh	r3, [r7, #22]
 8005b9c:	3301      	adds	r3, #1
 8005b9e:	82fb      	strh	r3, [r7, #22]
 8005ba0:	8afa      	ldrh	r2, [r7, #22]
 8005ba2:	89fb      	ldrh	r3, [r7, #14]
 8005ba4:	429a      	cmp	r2, r3
 8005ba6:	d101      	bne.n	8005bac <QS_2u8_raw_+0x124>
 8005ba8:	2300      	movs	r3, #0
 8005baa:	82fb      	strh	r3, [r7, #22]
 8005bac:	4b09      	ldr	r3, [pc, #36]	@ (8005bd4 <QS_2u8_raw_+0x14c>)
 8005bae:	89db      	ldrh	r3, [r3, #14]
 8005bb0:	b29b      	uxth	r3, r3
 8005bb2:	3301      	adds	r3, #1
 8005bb4:	b29a      	uxth	r2, r3
 8005bb6:	4b07      	ldr	r3, [pc, #28]	@ (8005bd4 <QS_2u8_raw_+0x14c>)
 8005bb8:	81da      	strh	r2, [r3, #14]

    QS_priv_.head   = head;    // save the head
 8005bba:	4a06      	ldr	r2, [pc, #24]	@ (8005bd4 <QS_2u8_raw_+0x14c>)
 8005bbc:	8afb      	ldrh	r3, [r7, #22]
 8005bbe:	8153      	strh	r3, [r2, #10]
    QS_priv_.chksum = chksum;  // save the checksum
 8005bc0:	4a04      	ldr	r2, [pc, #16]	@ (8005bd4 <QS_2u8_raw_+0x14c>)
 8005bc2:	7d7b      	ldrb	r3, [r7, #21]
 8005bc4:	7453      	strb	r3, [r2, #17]
}
 8005bc6:	bf00      	nop
 8005bc8:	371c      	adds	r7, #28
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd0:	4770      	bx	lr
 8005bd2:	bf00      	nop
 8005bd4:	20000aa4 	.word	0x20000aa4

08005bd8 <QS_u16_raw_>:

//............................................................................
void QS_u16_raw_(uint16_t const d) {
 8005bd8:	b480      	push	{r7}
 8005bda:	b087      	sub	sp, #28
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	4603      	mov	r3, r0
 8005be0:	80fb      	strh	r3, [r7, #6]
    uint8_t chksum = QS_priv_.chksum;    // put in a temporary (register)
 8005be2:	4b56      	ldr	r3, [pc, #344]	@ (8005d3c <QS_u16_raw_+0x164>)
 8005be4:	7c5b      	ldrb	r3, [r3, #17]
 8005be6:	757b      	strb	r3, [r7, #21]
    uint8_t * const buf = QS_priv_.buf;  // put in a temporary (register)
 8005be8:	4b54      	ldr	r3, [pc, #336]	@ (8005d3c <QS_u16_raw_+0x164>)
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	613b      	str	r3, [r7, #16]
    QSCtr head          = QS_priv_.head; // put in a temporary (register)
 8005bee:	4b53      	ldr	r3, [pc, #332]	@ (8005d3c <QS_u16_raw_+0x164>)
 8005bf0:	895b      	ldrh	r3, [r3, #10]
 8005bf2:	82fb      	strh	r3, [r7, #22]
    QSCtr const end     = QS_priv_.end;  // put in a temporary (register)
 8005bf4:	4b51      	ldr	r3, [pc, #324]	@ (8005d3c <QS_u16_raw_+0x164>)
 8005bf6:	891b      	ldrh	r3, [r3, #8]
 8005bf8:	81fb      	strh	r3, [r7, #14]
    uint16_t x   = d;
 8005bfa:	88fb      	ldrh	r3, [r7, #6]
 8005bfc:	81bb      	strh	r3, [r7, #12]

    QS_priv_.used += 2U; // 2 bytes are about to be added
 8005bfe:	4b4f      	ldr	r3, [pc, #316]	@ (8005d3c <QS_u16_raw_+0x164>)
 8005c00:	89db      	ldrh	r3, [r3, #14]
 8005c02:	b29b      	uxth	r3, r3
 8005c04:	3302      	adds	r3, #2
 8005c06:	b29a      	uxth	r2, r3
 8005c08:	4b4c      	ldr	r3, [pc, #304]	@ (8005d3c <QS_u16_raw_+0x164>)
 8005c0a:	81da      	strh	r2, [r3, #14]

    QS_INSERT_ESC_BYTE_((uint8_t)x)
 8005c0c:	89bb      	ldrh	r3, [r7, #12]
 8005c0e:	b2da      	uxtb	r2, r3
 8005c10:	7d7b      	ldrb	r3, [r7, #21]
 8005c12:	4413      	add	r3, r2
 8005c14:	757b      	strb	r3, [r7, #21]
 8005c16:	89bb      	ldrh	r3, [r7, #12]
 8005c18:	b2db      	uxtb	r3, r3
 8005c1a:	2b7e      	cmp	r3, #126	@ 0x7e
 8005c1c:	d013      	beq.n	8005c46 <QS_u16_raw_+0x6e>
 8005c1e:	89bb      	ldrh	r3, [r7, #12]
 8005c20:	b2db      	uxtb	r3, r3
 8005c22:	2b7d      	cmp	r3, #125	@ 0x7d
 8005c24:	d00f      	beq.n	8005c46 <QS_u16_raw_+0x6e>
 8005c26:	8afb      	ldrh	r3, [r7, #22]
 8005c28:	693a      	ldr	r2, [r7, #16]
 8005c2a:	4413      	add	r3, r2
 8005c2c:	89ba      	ldrh	r2, [r7, #12]
 8005c2e:	b2d2      	uxtb	r2, r2
 8005c30:	701a      	strb	r2, [r3, #0]
 8005c32:	8afb      	ldrh	r3, [r7, #22]
 8005c34:	3301      	adds	r3, #1
 8005c36:	82fb      	strh	r3, [r7, #22]
 8005c38:	8afa      	ldrh	r2, [r7, #22]
 8005c3a:	89fb      	ldrh	r3, [r7, #14]
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	d129      	bne.n	8005c94 <QS_u16_raw_+0xbc>
 8005c40:	2300      	movs	r3, #0
 8005c42:	82fb      	strh	r3, [r7, #22]
 8005c44:	e026      	b.n	8005c94 <QS_u16_raw_+0xbc>
 8005c46:	8afb      	ldrh	r3, [r7, #22]
 8005c48:	693a      	ldr	r2, [r7, #16]
 8005c4a:	4413      	add	r3, r2
 8005c4c:	227d      	movs	r2, #125	@ 0x7d
 8005c4e:	701a      	strb	r2, [r3, #0]
 8005c50:	8afb      	ldrh	r3, [r7, #22]
 8005c52:	3301      	adds	r3, #1
 8005c54:	82fb      	strh	r3, [r7, #22]
 8005c56:	8afa      	ldrh	r2, [r7, #22]
 8005c58:	89fb      	ldrh	r3, [r7, #14]
 8005c5a:	429a      	cmp	r2, r3
 8005c5c:	d101      	bne.n	8005c62 <QS_u16_raw_+0x8a>
 8005c5e:	2300      	movs	r3, #0
 8005c60:	82fb      	strh	r3, [r7, #22]
 8005c62:	89bb      	ldrh	r3, [r7, #12]
 8005c64:	b2da      	uxtb	r2, r3
 8005c66:	8afb      	ldrh	r3, [r7, #22]
 8005c68:	6939      	ldr	r1, [r7, #16]
 8005c6a:	440b      	add	r3, r1
 8005c6c:	f082 0220 	eor.w	r2, r2, #32
 8005c70:	b2d2      	uxtb	r2, r2
 8005c72:	701a      	strb	r2, [r3, #0]
 8005c74:	8afb      	ldrh	r3, [r7, #22]
 8005c76:	3301      	adds	r3, #1
 8005c78:	82fb      	strh	r3, [r7, #22]
 8005c7a:	8afa      	ldrh	r2, [r7, #22]
 8005c7c:	89fb      	ldrh	r3, [r7, #14]
 8005c7e:	429a      	cmp	r2, r3
 8005c80:	d101      	bne.n	8005c86 <QS_u16_raw_+0xae>
 8005c82:	2300      	movs	r3, #0
 8005c84:	82fb      	strh	r3, [r7, #22]
 8005c86:	4b2d      	ldr	r3, [pc, #180]	@ (8005d3c <QS_u16_raw_+0x164>)
 8005c88:	89db      	ldrh	r3, [r3, #14]
 8005c8a:	b29b      	uxth	r3, r3
 8005c8c:	3301      	adds	r3, #1
 8005c8e:	b29a      	uxth	r2, r3
 8005c90:	4b2a      	ldr	r3, [pc, #168]	@ (8005d3c <QS_u16_raw_+0x164>)
 8005c92:	81da      	strh	r2, [r3, #14]
    x >>= 8U;
 8005c94:	89bb      	ldrh	r3, [r7, #12]
 8005c96:	0a1b      	lsrs	r3, r3, #8
 8005c98:	81bb      	strh	r3, [r7, #12]
    QS_INSERT_ESC_BYTE_((uint8_t)x)
 8005c9a:	89bb      	ldrh	r3, [r7, #12]
 8005c9c:	b2da      	uxtb	r2, r3
 8005c9e:	7d7b      	ldrb	r3, [r7, #21]
 8005ca0:	4413      	add	r3, r2
 8005ca2:	757b      	strb	r3, [r7, #21]
 8005ca4:	89bb      	ldrh	r3, [r7, #12]
 8005ca6:	b2db      	uxtb	r3, r3
 8005ca8:	2b7e      	cmp	r3, #126	@ 0x7e
 8005caa:	d013      	beq.n	8005cd4 <QS_u16_raw_+0xfc>
 8005cac:	89bb      	ldrh	r3, [r7, #12]
 8005cae:	b2db      	uxtb	r3, r3
 8005cb0:	2b7d      	cmp	r3, #125	@ 0x7d
 8005cb2:	d00f      	beq.n	8005cd4 <QS_u16_raw_+0xfc>
 8005cb4:	8afb      	ldrh	r3, [r7, #22]
 8005cb6:	693a      	ldr	r2, [r7, #16]
 8005cb8:	4413      	add	r3, r2
 8005cba:	89ba      	ldrh	r2, [r7, #12]
 8005cbc:	b2d2      	uxtb	r2, r2
 8005cbe:	701a      	strb	r2, [r3, #0]
 8005cc0:	8afb      	ldrh	r3, [r7, #22]
 8005cc2:	3301      	adds	r3, #1
 8005cc4:	82fb      	strh	r3, [r7, #22]
 8005cc6:	8afa      	ldrh	r2, [r7, #22]
 8005cc8:	89fb      	ldrh	r3, [r7, #14]
 8005cca:	429a      	cmp	r2, r3
 8005ccc:	d129      	bne.n	8005d22 <QS_u16_raw_+0x14a>
 8005cce:	2300      	movs	r3, #0
 8005cd0:	82fb      	strh	r3, [r7, #22]
 8005cd2:	e026      	b.n	8005d22 <QS_u16_raw_+0x14a>
 8005cd4:	8afb      	ldrh	r3, [r7, #22]
 8005cd6:	693a      	ldr	r2, [r7, #16]
 8005cd8:	4413      	add	r3, r2
 8005cda:	227d      	movs	r2, #125	@ 0x7d
 8005cdc:	701a      	strb	r2, [r3, #0]
 8005cde:	8afb      	ldrh	r3, [r7, #22]
 8005ce0:	3301      	adds	r3, #1
 8005ce2:	82fb      	strh	r3, [r7, #22]
 8005ce4:	8afa      	ldrh	r2, [r7, #22]
 8005ce6:	89fb      	ldrh	r3, [r7, #14]
 8005ce8:	429a      	cmp	r2, r3
 8005cea:	d101      	bne.n	8005cf0 <QS_u16_raw_+0x118>
 8005cec:	2300      	movs	r3, #0
 8005cee:	82fb      	strh	r3, [r7, #22]
 8005cf0:	89bb      	ldrh	r3, [r7, #12]
 8005cf2:	b2da      	uxtb	r2, r3
 8005cf4:	8afb      	ldrh	r3, [r7, #22]
 8005cf6:	6939      	ldr	r1, [r7, #16]
 8005cf8:	440b      	add	r3, r1
 8005cfa:	f082 0220 	eor.w	r2, r2, #32
 8005cfe:	b2d2      	uxtb	r2, r2
 8005d00:	701a      	strb	r2, [r3, #0]
 8005d02:	8afb      	ldrh	r3, [r7, #22]
 8005d04:	3301      	adds	r3, #1
 8005d06:	82fb      	strh	r3, [r7, #22]
 8005d08:	8afa      	ldrh	r2, [r7, #22]
 8005d0a:	89fb      	ldrh	r3, [r7, #14]
 8005d0c:	429a      	cmp	r2, r3
 8005d0e:	d101      	bne.n	8005d14 <QS_u16_raw_+0x13c>
 8005d10:	2300      	movs	r3, #0
 8005d12:	82fb      	strh	r3, [r7, #22]
 8005d14:	4b09      	ldr	r3, [pc, #36]	@ (8005d3c <QS_u16_raw_+0x164>)
 8005d16:	89db      	ldrh	r3, [r3, #14]
 8005d18:	b29b      	uxth	r3, r3
 8005d1a:	3301      	adds	r3, #1
 8005d1c:	b29a      	uxth	r2, r3
 8005d1e:	4b07      	ldr	r3, [pc, #28]	@ (8005d3c <QS_u16_raw_+0x164>)
 8005d20:	81da      	strh	r2, [r3, #14]

    QS_priv_.head   = head;    // save the head
 8005d22:	4a06      	ldr	r2, [pc, #24]	@ (8005d3c <QS_u16_raw_+0x164>)
 8005d24:	8afb      	ldrh	r3, [r7, #22]
 8005d26:	8153      	strh	r3, [r2, #10]
    QS_priv_.chksum = chksum;  // save the checksum
 8005d28:	4a04      	ldr	r2, [pc, #16]	@ (8005d3c <QS_u16_raw_+0x164>)
 8005d2a:	7d7b      	ldrb	r3, [r7, #21]
 8005d2c:	7453      	strb	r3, [r2, #17]
}
 8005d2e:	bf00      	nop
 8005d30:	371c      	adds	r7, #28
 8005d32:	46bd      	mov	sp, r7
 8005d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d38:	4770      	bx	lr
 8005d3a:	bf00      	nop
 8005d3c:	20000aa4 	.word	0x20000aa4

08005d40 <QS_u32_raw_>:

//............................................................................
void QS_u32_raw_(uint32_t const d) {
 8005d40:	b480      	push	{r7}
 8005d42:	b089      	sub	sp, #36	@ 0x24
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
    uint8_t chksum = QS_priv_.chksum;    // put in a temporary (register)
 8005d48:	4b38      	ldr	r3, [pc, #224]	@ (8005e2c <QS_u32_raw_+0xec>)
 8005d4a:	7c5b      	ldrb	r3, [r3, #17]
 8005d4c:	77fb      	strb	r3, [r7, #31]
    uint8_t * const buf = QS_priv_.buf;  // put in a temporary (register)
 8005d4e:	4b37      	ldr	r3, [pc, #220]	@ (8005e2c <QS_u32_raw_+0xec>)
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	613b      	str	r3, [r7, #16]
    QSCtr head          = QS_priv_.head; // put in a temporary (register)
 8005d54:	4b35      	ldr	r3, [pc, #212]	@ (8005e2c <QS_u32_raw_+0xec>)
 8005d56:	895b      	ldrh	r3, [r3, #10]
 8005d58:	83bb      	strh	r3, [r7, #28]
    QSCtr const end     = QS_priv_.end;  // put in a temporary (register)
 8005d5a:	4b34      	ldr	r3, [pc, #208]	@ (8005e2c <QS_u32_raw_+0xec>)
 8005d5c:	891b      	ldrh	r3, [r3, #8]
 8005d5e:	81fb      	strh	r3, [r7, #14]
    uint32_t x = d;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	61bb      	str	r3, [r7, #24]

    QS_priv_.used += 4U; // 4 bytes are about to be added
 8005d64:	4b31      	ldr	r3, [pc, #196]	@ (8005e2c <QS_u32_raw_+0xec>)
 8005d66:	89db      	ldrh	r3, [r3, #14]
 8005d68:	b29b      	uxth	r3, r3
 8005d6a:	3304      	adds	r3, #4
 8005d6c:	b29a      	uxth	r2, r3
 8005d6e:	4b2f      	ldr	r3, [pc, #188]	@ (8005e2c <QS_u32_raw_+0xec>)
 8005d70:	81da      	strh	r2, [r3, #14]
    for (uint_fast8_t i = 4U; i != 0U; --i) {
 8005d72:	2304      	movs	r3, #4
 8005d74:	617b      	str	r3, [r7, #20]
 8005d76:	e049      	b.n	8005e0c <QS_u32_raw_+0xcc>
        QS_INSERT_ESC_BYTE_((uint8_t)x)
 8005d78:	69bb      	ldr	r3, [r7, #24]
 8005d7a:	b2da      	uxtb	r2, r3
 8005d7c:	7ffb      	ldrb	r3, [r7, #31]
 8005d7e:	4413      	add	r3, r2
 8005d80:	77fb      	strb	r3, [r7, #31]
 8005d82:	69bb      	ldr	r3, [r7, #24]
 8005d84:	b2db      	uxtb	r3, r3
 8005d86:	2b7e      	cmp	r3, #126	@ 0x7e
 8005d88:	d013      	beq.n	8005db2 <QS_u32_raw_+0x72>
 8005d8a:	69bb      	ldr	r3, [r7, #24]
 8005d8c:	b2db      	uxtb	r3, r3
 8005d8e:	2b7d      	cmp	r3, #125	@ 0x7d
 8005d90:	d00f      	beq.n	8005db2 <QS_u32_raw_+0x72>
 8005d92:	8bbb      	ldrh	r3, [r7, #28]
 8005d94:	693a      	ldr	r2, [r7, #16]
 8005d96:	4413      	add	r3, r2
 8005d98:	69ba      	ldr	r2, [r7, #24]
 8005d9a:	b2d2      	uxtb	r2, r2
 8005d9c:	701a      	strb	r2, [r3, #0]
 8005d9e:	8bbb      	ldrh	r3, [r7, #28]
 8005da0:	3301      	adds	r3, #1
 8005da2:	83bb      	strh	r3, [r7, #28]
 8005da4:	8bba      	ldrh	r2, [r7, #28]
 8005da6:	89fb      	ldrh	r3, [r7, #14]
 8005da8:	429a      	cmp	r2, r3
 8005daa:	d129      	bne.n	8005e00 <QS_u32_raw_+0xc0>
 8005dac:	2300      	movs	r3, #0
 8005dae:	83bb      	strh	r3, [r7, #28]
 8005db0:	e026      	b.n	8005e00 <QS_u32_raw_+0xc0>
 8005db2:	8bbb      	ldrh	r3, [r7, #28]
 8005db4:	693a      	ldr	r2, [r7, #16]
 8005db6:	4413      	add	r3, r2
 8005db8:	227d      	movs	r2, #125	@ 0x7d
 8005dba:	701a      	strb	r2, [r3, #0]
 8005dbc:	8bbb      	ldrh	r3, [r7, #28]
 8005dbe:	3301      	adds	r3, #1
 8005dc0:	83bb      	strh	r3, [r7, #28]
 8005dc2:	8bba      	ldrh	r2, [r7, #28]
 8005dc4:	89fb      	ldrh	r3, [r7, #14]
 8005dc6:	429a      	cmp	r2, r3
 8005dc8:	d101      	bne.n	8005dce <QS_u32_raw_+0x8e>
 8005dca:	2300      	movs	r3, #0
 8005dcc:	83bb      	strh	r3, [r7, #28]
 8005dce:	69bb      	ldr	r3, [r7, #24]
 8005dd0:	b2da      	uxtb	r2, r3
 8005dd2:	8bbb      	ldrh	r3, [r7, #28]
 8005dd4:	6939      	ldr	r1, [r7, #16]
 8005dd6:	440b      	add	r3, r1
 8005dd8:	f082 0220 	eor.w	r2, r2, #32
 8005ddc:	b2d2      	uxtb	r2, r2
 8005dde:	701a      	strb	r2, [r3, #0]
 8005de0:	8bbb      	ldrh	r3, [r7, #28]
 8005de2:	3301      	adds	r3, #1
 8005de4:	83bb      	strh	r3, [r7, #28]
 8005de6:	8bba      	ldrh	r2, [r7, #28]
 8005de8:	89fb      	ldrh	r3, [r7, #14]
 8005dea:	429a      	cmp	r2, r3
 8005dec:	d101      	bne.n	8005df2 <QS_u32_raw_+0xb2>
 8005dee:	2300      	movs	r3, #0
 8005df0:	83bb      	strh	r3, [r7, #28]
 8005df2:	4b0e      	ldr	r3, [pc, #56]	@ (8005e2c <QS_u32_raw_+0xec>)
 8005df4:	89db      	ldrh	r3, [r3, #14]
 8005df6:	b29b      	uxth	r3, r3
 8005df8:	3301      	adds	r3, #1
 8005dfa:	b29a      	uxth	r2, r3
 8005dfc:	4b0b      	ldr	r3, [pc, #44]	@ (8005e2c <QS_u32_raw_+0xec>)
 8005dfe:	81da      	strh	r2, [r3, #14]
        x >>= 8U;
 8005e00:	69bb      	ldr	r3, [r7, #24]
 8005e02:	0a1b      	lsrs	r3, r3, #8
 8005e04:	61bb      	str	r3, [r7, #24]
    for (uint_fast8_t i = 4U; i != 0U; --i) {
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	3b01      	subs	r3, #1
 8005e0a:	617b      	str	r3, [r7, #20]
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d1b2      	bne.n	8005d78 <QS_u32_raw_+0x38>
    }

    QS_priv_.head   = head;    // save the head
 8005e12:	4a06      	ldr	r2, [pc, #24]	@ (8005e2c <QS_u32_raw_+0xec>)
 8005e14:	8bbb      	ldrh	r3, [r7, #28]
 8005e16:	8153      	strh	r3, [r2, #10]
    QS_priv_.chksum = chksum;  // save the checksum
 8005e18:	4a04      	ldr	r2, [pc, #16]	@ (8005e2c <QS_u32_raw_+0xec>)
 8005e1a:	7ffb      	ldrb	r3, [r7, #31]
 8005e1c:	7453      	strb	r3, [r2, #17]
}
 8005e1e:	bf00      	nop
 8005e20:	3724      	adds	r7, #36	@ 0x24
 8005e22:	46bd      	mov	sp, r7
 8005e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e28:	4770      	bx	lr
 8005e2a:	bf00      	nop
 8005e2c:	20000aa4 	.word	0x20000aa4

08005e30 <QS_obj_raw_>:

//............................................................................
void QS_obj_raw_(void const * const obj) {
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b082      	sub	sp, #8
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
    #if (QS_OBJ_PTR_SIZE == 1U)
        QS_u8_raw_((uint8_t)obj);
    #elif (QS_OBJ_PTR_SIZE == 2U)
        QS_u16_raw_((uint16_t)obj);
    #elif (QS_OBJ_PTR_SIZE == 4U)
        QS_u32_raw_((uint32_t)obj);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	f7ff ff80 	bl	8005d40 <QS_u32_raw_>
    #elif (QS_OBJ_PTR_SIZE == 8U)
        QS_u64_raw_((uint64_t)obj);
    #else
        QS_u32_raw_((uint32_t)obj);
    #endif
}
 8005e40:	bf00      	nop
 8005e42:	3708      	adds	r7, #8
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}

08005e48 <QS_str_raw_>:

//............................................................................
void QS_str_raw_(char const * const str) {
 8005e48:	b480      	push	{r7}
 8005e4a:	b089      	sub	sp, #36	@ 0x24
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
    uint8_t chksum = QS_priv_.chksum;    // put in a temporary (register)
 8005e50:	4b27      	ldr	r3, [pc, #156]	@ (8005ef0 <QS_str_raw_+0xa8>)
 8005e52:	7c5b      	ldrb	r3, [r3, #17]
 8005e54:	77fb      	strb	r3, [r7, #31]
    uint8_t * const buf = QS_priv_.buf;  // put in a temporary (register)
 8005e56:	4b26      	ldr	r3, [pc, #152]	@ (8005ef0 <QS_str_raw_+0xa8>)
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	613b      	str	r3, [r7, #16]
    QSCtr head          = QS_priv_.head; // put in a temporary (register)
 8005e5c:	4b24      	ldr	r3, [pc, #144]	@ (8005ef0 <QS_str_raw_+0xa8>)
 8005e5e:	895b      	ldrh	r3, [r3, #10]
 8005e60:	83bb      	strh	r3, [r7, #28]
    QSCtr const end     = QS_priv_.end;  // put in a temporary (register)
 8005e62:	4b23      	ldr	r3, [pc, #140]	@ (8005ef0 <QS_str_raw_+0xa8>)
 8005e64:	891b      	ldrh	r3, [r3, #8]
 8005e66:	81fb      	strh	r3, [r7, #14]
    QSCtr used          = QS_priv_.used; // put in a temporary (register)
 8005e68:	4b21      	ldr	r3, [pc, #132]	@ (8005ef0 <QS_str_raw_+0xa8>)
 8005e6a:	89db      	ldrh	r3, [r3, #14]
 8005e6c:	837b      	strh	r3, [r7, #26]

    for (char const *s = str; *s != '\0'; ++s) {
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	617b      	str	r3, [r7, #20]
 8005e72:	e019      	b.n	8005ea8 <QS_str_raw_+0x60>
        chksum += (uint8_t)*s; // update checksum
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	781a      	ldrb	r2, [r3, #0]
 8005e78:	7ffb      	ldrb	r3, [r7, #31]
 8005e7a:	4413      	add	r3, r2
 8005e7c:	77fb      	strb	r3, [r7, #31]
        QS_INSERT_BYTE_((uint8_t)*s)  // ASCII char doesn't need escaping
 8005e7e:	8bbb      	ldrh	r3, [r7, #28]
 8005e80:	693a      	ldr	r2, [r7, #16]
 8005e82:	4413      	add	r3, r2
 8005e84:	697a      	ldr	r2, [r7, #20]
 8005e86:	7812      	ldrb	r2, [r2, #0]
 8005e88:	701a      	strb	r2, [r3, #0]
 8005e8a:	8bbb      	ldrh	r3, [r7, #28]
 8005e8c:	3301      	adds	r3, #1
 8005e8e:	83bb      	strh	r3, [r7, #28]
 8005e90:	8bba      	ldrh	r2, [r7, #28]
 8005e92:	89fb      	ldrh	r3, [r7, #14]
 8005e94:	429a      	cmp	r2, r3
 8005e96:	d101      	bne.n	8005e9c <QS_str_raw_+0x54>
 8005e98:	2300      	movs	r3, #0
 8005e9a:	83bb      	strh	r3, [r7, #28]
        ++used;
 8005e9c:	8b7b      	ldrh	r3, [r7, #26]
 8005e9e:	3301      	adds	r3, #1
 8005ea0:	837b      	strh	r3, [r7, #26]
    for (char const *s = str; *s != '\0'; ++s) {
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	3301      	adds	r3, #1
 8005ea6:	617b      	str	r3, [r7, #20]
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	781b      	ldrb	r3, [r3, #0]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d1e1      	bne.n	8005e74 <QS_str_raw_+0x2c>
    }
    QS_INSERT_BYTE_((uint8_t)'\0')  // zero-terminate the string
 8005eb0:	8bbb      	ldrh	r3, [r7, #28]
 8005eb2:	693a      	ldr	r2, [r7, #16]
 8005eb4:	4413      	add	r3, r2
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	701a      	strb	r2, [r3, #0]
 8005eba:	8bbb      	ldrh	r3, [r7, #28]
 8005ebc:	3301      	adds	r3, #1
 8005ebe:	83bb      	strh	r3, [r7, #28]
 8005ec0:	8bba      	ldrh	r2, [r7, #28]
 8005ec2:	89fb      	ldrh	r3, [r7, #14]
 8005ec4:	429a      	cmp	r2, r3
 8005ec6:	d101      	bne.n	8005ecc <QS_str_raw_+0x84>
 8005ec8:	2300      	movs	r3, #0
 8005eca:	83bb      	strh	r3, [r7, #28]
    ++used;
 8005ecc:	8b7b      	ldrh	r3, [r7, #26]
 8005ece:	3301      	adds	r3, #1
 8005ed0:	837b      	strh	r3, [r7, #26]

    QS_priv_.head   = head;   // save the head
 8005ed2:	4a07      	ldr	r2, [pc, #28]	@ (8005ef0 <QS_str_raw_+0xa8>)
 8005ed4:	8bbb      	ldrh	r3, [r7, #28]
 8005ed6:	8153      	strh	r3, [r2, #10]
    QS_priv_.chksum = chksum; // save the checksum
 8005ed8:	4a05      	ldr	r2, [pc, #20]	@ (8005ef0 <QS_str_raw_+0xa8>)
 8005eda:	7ffb      	ldrb	r3, [r7, #31]
 8005edc:	7453      	strb	r3, [r2, #17]
    QS_priv_.used   = used;   // save # of used buffer space
 8005ede:	4a04      	ldr	r2, [pc, #16]	@ (8005ef0 <QS_str_raw_+0xa8>)
 8005ee0:	8b7b      	ldrh	r3, [r7, #26]
 8005ee2:	81d3      	strh	r3, [r2, #14]
}
 8005ee4:	bf00      	nop
 8005ee6:	3724      	adds	r7, #36	@ 0x24
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eee:	4770      	bx	lr
 8005ef0:	20000aa4 	.word	0x20000aa4

08005ef4 <QS_str_fmt_>:
    QS_priv_.head   = head;   // save the head
    QS_priv_.chksum = chksum; // save the checksum
}

//............................................................................
void QS_str_fmt_(char const * const str) {
 8005ef4:	b480      	push	{r7}
 8005ef6:	b089      	sub	sp, #36	@ 0x24
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
    uint8_t chksum = QS_priv_.chksum;
 8005efc:	4b30      	ldr	r3, [pc, #192]	@ (8005fc0 <QS_str_fmt_+0xcc>)
 8005efe:	7c5b      	ldrb	r3, [r3, #17]
 8005f00:	77fb      	strb	r3, [r7, #31]
    uint8_t * const buf = QS_priv_.buf;  // put in a temporary (register)
 8005f02:	4b2f      	ldr	r3, [pc, #188]	@ (8005fc0 <QS_str_fmt_+0xcc>)
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	613b      	str	r3, [r7, #16]
    QSCtr head          = QS_priv_.head; // put in a temporary (register)
 8005f08:	4b2d      	ldr	r3, [pc, #180]	@ (8005fc0 <QS_str_fmt_+0xcc>)
 8005f0a:	895b      	ldrh	r3, [r3, #10]
 8005f0c:	83bb      	strh	r3, [r7, #28]
    QSCtr const end     = QS_priv_.end;  // put in a temporary (register)
 8005f0e:	4b2c      	ldr	r3, [pc, #176]	@ (8005fc0 <QS_str_fmt_+0xcc>)
 8005f10:	891b      	ldrh	r3, [r3, #8]
 8005f12:	81fb      	strh	r3, [r7, #14]
    QSCtr used          = QS_priv_.used; // put in a temporary (register)
 8005f14:	4b2a      	ldr	r3, [pc, #168]	@ (8005fc0 <QS_str_fmt_+0xcc>)
 8005f16:	89db      	ldrh	r3, [r3, #14]
 8005f18:	837b      	strh	r3, [r7, #26]

    used += 2U; // account for the format byte and the terminating-0
 8005f1a:	8b7b      	ldrh	r3, [r7, #26]
 8005f1c:	3302      	adds	r3, #2
 8005f1e:	837b      	strh	r3, [r7, #26]
    QS_INSERT_BYTE_((uint8_t)QS_STR_T)
 8005f20:	8bbb      	ldrh	r3, [r7, #28]
 8005f22:	693a      	ldr	r2, [r7, #16]
 8005f24:	4413      	add	r3, r2
 8005f26:	2208      	movs	r2, #8
 8005f28:	701a      	strb	r2, [r3, #0]
 8005f2a:	8bbb      	ldrh	r3, [r7, #28]
 8005f2c:	3301      	adds	r3, #1
 8005f2e:	83bb      	strh	r3, [r7, #28]
 8005f30:	8bba      	ldrh	r2, [r7, #28]
 8005f32:	89fb      	ldrh	r3, [r7, #14]
 8005f34:	429a      	cmp	r2, r3
 8005f36:	d101      	bne.n	8005f3c <QS_str_fmt_+0x48>
 8005f38:	2300      	movs	r3, #0
 8005f3a:	83bb      	strh	r3, [r7, #28]
    chksum += (uint8_t)QS_STR_T;
 8005f3c:	7ffb      	ldrb	r3, [r7, #31]
 8005f3e:	3308      	adds	r3, #8
 8005f40:	77fb      	strb	r3, [r7, #31]

    for (char const *s = str; *s != '\0'; ++s) {
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	617b      	str	r3, [r7, #20]
 8005f46:	e019      	b.n	8005f7c <QS_str_fmt_+0x88>
        QS_INSERT_BYTE_((uint8_t)*s) // ASCII char doesn't need escaping
 8005f48:	8bbb      	ldrh	r3, [r7, #28]
 8005f4a:	693a      	ldr	r2, [r7, #16]
 8005f4c:	4413      	add	r3, r2
 8005f4e:	697a      	ldr	r2, [r7, #20]
 8005f50:	7812      	ldrb	r2, [r2, #0]
 8005f52:	701a      	strb	r2, [r3, #0]
 8005f54:	8bbb      	ldrh	r3, [r7, #28]
 8005f56:	3301      	adds	r3, #1
 8005f58:	83bb      	strh	r3, [r7, #28]
 8005f5a:	8bba      	ldrh	r2, [r7, #28]
 8005f5c:	89fb      	ldrh	r3, [r7, #14]
 8005f5e:	429a      	cmp	r2, r3
 8005f60:	d101      	bne.n	8005f66 <QS_str_fmt_+0x72>
 8005f62:	2300      	movs	r3, #0
 8005f64:	83bb      	strh	r3, [r7, #28]
        chksum += (uint8_t)*s; // update checksum
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	781a      	ldrb	r2, [r3, #0]
 8005f6a:	7ffb      	ldrb	r3, [r7, #31]
 8005f6c:	4413      	add	r3, r2
 8005f6e:	77fb      	strb	r3, [r7, #31]
        ++used;
 8005f70:	8b7b      	ldrh	r3, [r7, #26]
 8005f72:	3301      	adds	r3, #1
 8005f74:	837b      	strh	r3, [r7, #26]
    for (char const *s = str; *s != '\0'; ++s) {
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	3301      	adds	r3, #1
 8005f7a:	617b      	str	r3, [r7, #20]
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	781b      	ldrb	r3, [r3, #0]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d1e1      	bne.n	8005f48 <QS_str_fmt_+0x54>
    }
    QS_INSERT_BYTE_(0U) // zero-terminate the string
 8005f84:	8bbb      	ldrh	r3, [r7, #28]
 8005f86:	693a      	ldr	r2, [r7, #16]
 8005f88:	4413      	add	r3, r2
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	701a      	strb	r2, [r3, #0]
 8005f8e:	8bbb      	ldrh	r3, [r7, #28]
 8005f90:	3301      	adds	r3, #1
 8005f92:	83bb      	strh	r3, [r7, #28]
 8005f94:	8bba      	ldrh	r2, [r7, #28]
 8005f96:	89fb      	ldrh	r3, [r7, #14]
 8005f98:	429a      	cmp	r2, r3
 8005f9a:	d101      	bne.n	8005fa0 <QS_str_fmt_+0xac>
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	83bb      	strh	r3, [r7, #28]

    QS_priv_.head   = head;    // save the head
 8005fa0:	4a07      	ldr	r2, [pc, #28]	@ (8005fc0 <QS_str_fmt_+0xcc>)
 8005fa2:	8bbb      	ldrh	r3, [r7, #28]
 8005fa4:	8153      	strh	r3, [r2, #10]
    QS_priv_.chksum = chksum;  // save the checksum
 8005fa6:	4a06      	ldr	r2, [pc, #24]	@ (8005fc0 <QS_str_fmt_+0xcc>)
 8005fa8:	7ffb      	ldrb	r3, [r7, #31]
 8005faa:	7453      	strb	r3, [r2, #17]
    QS_priv_.used   = used;    // save # of used buffer space
 8005fac:	4a04      	ldr	r2, [pc, #16]	@ (8005fc0 <QS_str_fmt_+0xcc>)
 8005fae:	8b7b      	ldrh	r3, [r7, #26]
 8005fb0:	81d3      	strh	r3, [r2, #14]
}
 8005fb2:	bf00      	nop
 8005fb4:	3724      	adds	r7, #36	@ 0x24
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbc:	4770      	bx	lr
 8005fbe:	bf00      	nop
 8005fc0:	20000aa4 	.word	0x20000aa4

08005fc4 <QS_sig_dict_pre_>:
//............................................................................
void QS_sig_dict_pre_(
    QSignal const sig,
    void const * const obj,
    char const * const name)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b084      	sub	sp, #16
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	4603      	mov	r3, r0
 8005fcc:	60b9      	str	r1, [r7, #8]
 8005fce:	607a      	str	r2, [r7, #4]
 8005fd0:	81fb      	strh	r3, [r7, #14]
    QS_CRIT_STAT
    QS_CRIT_ENTRY();
 8005fd2:	f7fc f9e3 	bl	800239c <QF_crit_entry_>
    QS_MEM_SYS();

    QS_beginRec_((uint_fast8_t)QS_SIG_DICT);
 8005fd6:	203c      	movs	r0, #60	@ 0x3c
 8005fd8:	f7ff fbf6 	bl	80057c8 <QS_beginRec_>
    QS_SIG_PRE_(sig);
 8005fdc:	89fb      	ldrh	r3, [r7, #14]
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f7ff fdfa 	bl	8005bd8 <QS_u16_raw_>
    QS_OBJ_PRE_(obj);
 8005fe4:	68b8      	ldr	r0, [r7, #8]
 8005fe6:	f7ff ff23 	bl	8005e30 <QS_obj_raw_>
    QS_STR_PRE_((*name == '&') ? &name[1] : name);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	781b      	ldrb	r3, [r3, #0]
 8005fee:	2b26      	cmp	r3, #38	@ 0x26
 8005ff0:	d102      	bne.n	8005ff8 <QS_sig_dict_pre_+0x34>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	3301      	adds	r3, #1
 8005ff6:	e000      	b.n	8005ffa <QS_sig_dict_pre_+0x36>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	f7ff ff24 	bl	8005e48 <QS_str_raw_>
    QS_endRec_();
 8006000:	f7ff fc62 	bl	80058c8 <QS_endRec_>

    QS_MEM_APP();
    QS_CRIT_EXIT();
 8006004:	f7fc f9dc 	bl	80023c0 <QF_crit_exit_>
    QS_onFlush();
 8006008:	f7fa fae8 	bl	80005dc <QS_onFlush>
}
 800600c:	bf00      	nop
 800600e:	3710      	adds	r7, #16
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}

08006014 <QS_obj_dict_pre_>:

//............................................................................
void QS_obj_dict_pre_(
    void const * const obj,
    char const * const name)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b082      	sub	sp, #8
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
 800601c:	6039      	str	r1, [r7, #0]
    QS_CRIT_STAT
    QS_CRIT_ENTRY();
 800601e:	f7fc f9bd 	bl	800239c <QF_crit_entry_>
    QS_MEM_SYS();

    QS_beginRec_((uint_fast8_t)QS_OBJ_DICT);
 8006022:	203d      	movs	r0, #61	@ 0x3d
 8006024:	f7ff fbd0 	bl	80057c8 <QS_beginRec_>
    QS_OBJ_PRE_(obj);
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	f7ff ff01 	bl	8005e30 <QS_obj_raw_>
    QS_STR_PRE_((*name == '&') ? &name[1] : name);
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	781b      	ldrb	r3, [r3, #0]
 8006032:	2b26      	cmp	r3, #38	@ 0x26
 8006034:	d102      	bne.n	800603c <QS_obj_dict_pre_+0x28>
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	3301      	adds	r3, #1
 800603a:	e000      	b.n	800603e <QS_obj_dict_pre_+0x2a>
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	4618      	mov	r0, r3
 8006040:	f7ff ff02 	bl	8005e48 <QS_str_raw_>
    QS_endRec_();
 8006044:	f7ff fc40 	bl	80058c8 <QS_endRec_>

    QS_MEM_APP();
    QS_CRIT_EXIT();
 8006048:	f7fc f9ba 	bl	80023c0 <QF_crit_exit_>
    QS_onFlush();
 800604c:	f7fa fac6 	bl	80005dc <QS_onFlush>
}
 8006050:	bf00      	nop
 8006052:	3708      	adds	r7, #8
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}

08006058 <QS_obj_arr_dict_pre_>:
//............................................................................
void QS_obj_arr_dict_pre_(
    void const * const obj,
    uint_fast16_t const idx,
    char const * const name)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b088      	sub	sp, #32
 800605c:	af00      	add	r7, sp, #0
 800605e:	60f8      	str	r0, [r7, #12]
 8006060:	60b9      	str	r1, [r7, #8]
 8006062:	607a      	str	r2, [r7, #4]
    QS_CRIT_STAT
    QS_CRIT_ENTRY();
 8006064:	f7fc f99a 	bl	800239c <QF_crit_entry_>
    Q_REQUIRE_INCRIT(400, idx < 1000U);
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800606e:	d304      	bcc.n	800607a <QS_obj_arr_dict_pre_+0x22>
 8006070:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8006074:	485d      	ldr	r0, [pc, #372]	@ (80061ec <QS_obj_arr_dict_pre_+0x194>)
 8006076:	f7fa fcd9 	bl	8000a2c <Q_onError>
    QS_CRIT_EXIT();
 800607a:	f7fc f9a1 	bl	80023c0 <QF_crit_exit_>

    // format idx into a char buffer as "xxx\0"
    uint8_t idx_str[4];
    uint_fast16_t tmp = idx;
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	61bb      	str	r3, [r7, #24]
    uint8_t i;
    idx_str[3] = 0U; // zero-terminate
 8006082:	2300      	movs	r3, #0
 8006084:	75fb      	strb	r3, [r7, #23]
    idx_str[2] = (uint8_t)((uint8_t)'0' + (tmp % 10U));
 8006086:	69b9      	ldr	r1, [r7, #24]
 8006088:	4b59      	ldr	r3, [pc, #356]	@ (80061f0 <QS_obj_arr_dict_pre_+0x198>)
 800608a:	fba3 2301 	umull	r2, r3, r3, r1
 800608e:	08da      	lsrs	r2, r3, #3
 8006090:	4613      	mov	r3, r2
 8006092:	009b      	lsls	r3, r3, #2
 8006094:	4413      	add	r3, r2
 8006096:	005b      	lsls	r3, r3, #1
 8006098:	1aca      	subs	r2, r1, r3
 800609a:	b2d3      	uxtb	r3, r2
 800609c:	3330      	adds	r3, #48	@ 0x30
 800609e:	b2db      	uxtb	r3, r3
 80060a0:	75bb      	strb	r3, [r7, #22]
    tmp /= 10U;
 80060a2:	69bb      	ldr	r3, [r7, #24]
 80060a4:	4a52      	ldr	r2, [pc, #328]	@ (80061f0 <QS_obj_arr_dict_pre_+0x198>)
 80060a6:	fba2 2303 	umull	r2, r3, r2, r3
 80060aa:	08db      	lsrs	r3, r3, #3
 80060ac:	61bb      	str	r3, [r7, #24]
    idx_str[1] =  (uint8_t)((uint8_t)'0' + (tmp % 10U));
 80060ae:	69b9      	ldr	r1, [r7, #24]
 80060b0:	4b4f      	ldr	r3, [pc, #316]	@ (80061f0 <QS_obj_arr_dict_pre_+0x198>)
 80060b2:	fba3 2301 	umull	r2, r3, r3, r1
 80060b6:	08da      	lsrs	r2, r3, #3
 80060b8:	4613      	mov	r3, r2
 80060ba:	009b      	lsls	r3, r3, #2
 80060bc:	4413      	add	r3, r2
 80060be:	005b      	lsls	r3, r3, #1
 80060c0:	1aca      	subs	r2, r1, r3
 80060c2:	b2d3      	uxtb	r3, r2
 80060c4:	3330      	adds	r3, #48	@ 0x30
 80060c6:	b2db      	uxtb	r3, r3
 80060c8:	757b      	strb	r3, [r7, #21]
    if (idx_str[1] == (uint8_t)'0') {
 80060ca:	7d7b      	ldrb	r3, [r7, #21]
 80060cc:	2b30      	cmp	r3, #48	@ 0x30
 80060ce:	d102      	bne.n	80060d6 <QS_obj_arr_dict_pre_+0x7e>
        i = 2U;
 80060d0:	2302      	movs	r3, #2
 80060d2:	77fb      	strb	r3, [r7, #31]
 80060d4:	e01b      	b.n	800610e <QS_obj_arr_dict_pre_+0xb6>
    }
    else {
        tmp /= 10U;
 80060d6:	69bb      	ldr	r3, [r7, #24]
 80060d8:	4a45      	ldr	r2, [pc, #276]	@ (80061f0 <QS_obj_arr_dict_pre_+0x198>)
 80060da:	fba2 2303 	umull	r2, r3, r2, r3
 80060de:	08db      	lsrs	r3, r3, #3
 80060e0:	61bb      	str	r3, [r7, #24]
        idx_str[0] =  (uint8_t)((uint8_t)'0' + (tmp % 10U));
 80060e2:	69b9      	ldr	r1, [r7, #24]
 80060e4:	4b42      	ldr	r3, [pc, #264]	@ (80061f0 <QS_obj_arr_dict_pre_+0x198>)
 80060e6:	fba3 2301 	umull	r2, r3, r3, r1
 80060ea:	08da      	lsrs	r2, r3, #3
 80060ec:	4613      	mov	r3, r2
 80060ee:	009b      	lsls	r3, r3, #2
 80060f0:	4413      	add	r3, r2
 80060f2:	005b      	lsls	r3, r3, #1
 80060f4:	1aca      	subs	r2, r1, r3
 80060f6:	b2d3      	uxtb	r3, r2
 80060f8:	3330      	adds	r3, #48	@ 0x30
 80060fa:	b2db      	uxtb	r3, r3
 80060fc:	753b      	strb	r3, [r7, #20]
        if (idx_str[0] == (uint8_t)'0') {
 80060fe:	7d3b      	ldrb	r3, [r7, #20]
 8006100:	2b30      	cmp	r3, #48	@ 0x30
 8006102:	d102      	bne.n	800610a <QS_obj_arr_dict_pre_+0xb2>
            i = 1U;
 8006104:	2301      	movs	r3, #1
 8006106:	77fb      	strb	r3, [r7, #31]
 8006108:	e001      	b.n	800610e <QS_obj_arr_dict_pre_+0xb6>
        }
        else {
            i = 0U;
 800610a:	2300      	movs	r3, #0
 800610c:	77fb      	strb	r3, [r7, #31]
        }
    }

    uint8_t j = ((*name == '&') ? 1U : 0U);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	781b      	ldrb	r3, [r3, #0]
 8006112:	2b26      	cmp	r3, #38	@ 0x26
 8006114:	d101      	bne.n	800611a <QS_obj_arr_dict_pre_+0xc2>
 8006116:	2301      	movs	r3, #1
 8006118:	e000      	b.n	800611c <QS_obj_arr_dict_pre_+0xc4>
 800611a:	2300      	movs	r3, #0
 800611c:	77bb      	strb	r3, [r7, #30]

    QS_CRIT_ENTRY();
 800611e:	f7fc f93d 	bl	800239c <QF_crit_entry_>
    QS_MEM_SYS();

    QS_beginRec_((uint_fast8_t)QS_OBJ_DICT);
 8006122:	203d      	movs	r0, #61	@ 0x3d
 8006124:	f7ff fb50 	bl	80057c8 <QS_beginRec_>
    QS_OBJ_PRE_(obj);
 8006128:	68f8      	ldr	r0, [r7, #12]
 800612a:	f7ff fe81 	bl	8005e30 <QS_obj_raw_>
    for (; name[j] != '\0'; ++j) {
 800612e:	e013      	b.n	8006158 <QS_obj_arr_dict_pre_+0x100>
        QS_U8_PRE_(name[j]);
 8006130:	7fbb      	ldrb	r3, [r7, #30]
 8006132:	687a      	ldr	r2, [r7, #4]
 8006134:	4413      	add	r3, r2
 8006136:	781b      	ldrb	r3, [r3, #0]
 8006138:	4618      	mov	r0, r3
 800613a:	f7ff fc3f 	bl	80059bc <QS_u8_raw_>
        if (name[j] == '[') {
 800613e:	7fbb      	ldrb	r3, [r7, #30]
 8006140:	687a      	ldr	r2, [r7, #4]
 8006142:	4413      	add	r3, r2
 8006144:	781b      	ldrb	r3, [r3, #0]
 8006146:	2b5b      	cmp	r3, #91	@ 0x5b
 8006148:	d103      	bne.n	8006152 <QS_obj_arr_dict_pre_+0xfa>
            ++j;
 800614a:	7fbb      	ldrb	r3, [r7, #30]
 800614c:	3301      	adds	r3, #1
 800614e:	77bb      	strb	r3, [r7, #30]
            break;
 8006150:	e008      	b.n	8006164 <QS_obj_arr_dict_pre_+0x10c>
    for (; name[j] != '\0'; ++j) {
 8006152:	7fbb      	ldrb	r3, [r7, #30]
 8006154:	3301      	adds	r3, #1
 8006156:	77bb      	strb	r3, [r7, #30]
 8006158:	7fbb      	ldrb	r3, [r7, #30]
 800615a:	687a      	ldr	r2, [r7, #4]
 800615c:	4413      	add	r3, r2
 800615e:	781b      	ldrb	r3, [r3, #0]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d1e5      	bne.n	8006130 <QS_obj_arr_dict_pre_+0xd8>
        }
    }
    for (; idx_str[i] != 0U; ++i) {
 8006164:	e00a      	b.n	800617c <QS_obj_arr_dict_pre_+0x124>
        QS_U8_PRE_(idx_str[i]);
 8006166:	7ffb      	ldrb	r3, [r7, #31]
 8006168:	3320      	adds	r3, #32
 800616a:	443b      	add	r3, r7
 800616c:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8006170:	4618      	mov	r0, r3
 8006172:	f7ff fc23 	bl	80059bc <QS_u8_raw_>
    for (; idx_str[i] != 0U; ++i) {
 8006176:	7ffb      	ldrb	r3, [r7, #31]
 8006178:	3301      	adds	r3, #1
 800617a:	77fb      	strb	r3, [r7, #31]
 800617c:	7ffb      	ldrb	r3, [r7, #31]
 800617e:	3320      	adds	r3, #32
 8006180:	443b      	add	r3, r7
 8006182:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d1ed      	bne.n	8006166 <QS_obj_arr_dict_pre_+0x10e>
    }
    // skip chars until ']'
    for (; name[j] != '\0'; ++j) {
 800618a:	e008      	b.n	800619e <QS_obj_arr_dict_pre_+0x146>
        if (name[j] == ']') {
 800618c:	7fbb      	ldrb	r3, [r7, #30]
 800618e:	687a      	ldr	r2, [r7, #4]
 8006190:	4413      	add	r3, r2
 8006192:	781b      	ldrb	r3, [r3, #0]
 8006194:	2b5d      	cmp	r3, #93	@ 0x5d
 8006196:	d009      	beq.n	80061ac <QS_obj_arr_dict_pre_+0x154>
    for (; name[j] != '\0'; ++j) {
 8006198:	7fbb      	ldrb	r3, [r7, #30]
 800619a:	3301      	adds	r3, #1
 800619c:	77bb      	strb	r3, [r7, #30]
 800619e:	7fbb      	ldrb	r3, [r7, #30]
 80061a0:	687a      	ldr	r2, [r7, #4]
 80061a2:	4413      	add	r3, r2
 80061a4:	781b      	ldrb	r3, [r3, #0]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d1f0      	bne.n	800618c <QS_obj_arr_dict_pre_+0x134>
 80061aa:	e00b      	b.n	80061c4 <QS_obj_arr_dict_pre_+0x16c>
            break;
 80061ac:	bf00      	nop
        }
    }
    for (; name[j] != '\0'; ++j) {
 80061ae:	e009      	b.n	80061c4 <QS_obj_arr_dict_pre_+0x16c>
        QS_U8_PRE_(name[j]);
 80061b0:	7fbb      	ldrb	r3, [r7, #30]
 80061b2:	687a      	ldr	r2, [r7, #4]
 80061b4:	4413      	add	r3, r2
 80061b6:	781b      	ldrb	r3, [r3, #0]
 80061b8:	4618      	mov	r0, r3
 80061ba:	f7ff fbff 	bl	80059bc <QS_u8_raw_>
    for (; name[j] != '\0'; ++j) {
 80061be:	7fbb      	ldrb	r3, [r7, #30]
 80061c0:	3301      	adds	r3, #1
 80061c2:	77bb      	strb	r3, [r7, #30]
 80061c4:	7fbb      	ldrb	r3, [r7, #30]
 80061c6:	687a      	ldr	r2, [r7, #4]
 80061c8:	4413      	add	r3, r2
 80061ca:	781b      	ldrb	r3, [r3, #0]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d1ef      	bne.n	80061b0 <QS_obj_arr_dict_pre_+0x158>
    }
    QS_U8_PRE_(0U); // zero-terminate
 80061d0:	2000      	movs	r0, #0
 80061d2:	f7ff fbf3 	bl	80059bc <QS_u8_raw_>
    QS_endRec_();
 80061d6:	f7ff fb77 	bl	80058c8 <QS_endRec_>

    QS_MEM_APP();
    QS_CRIT_EXIT();
 80061da:	f7fc f8f1 	bl	80023c0 <QF_crit_exit_>
    QS_onFlush();
 80061de:	f7fa f9fd 	bl	80005dc <QS_onFlush>
}
 80061e2:	bf00      	nop
 80061e4:	3720      	adds	r7, #32
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}
 80061ea:	bf00      	nop
 80061ec:	0800794c 	.word	0x0800794c
 80061f0:	cccccccd 	.word	0xcccccccd

080061f4 <QS_fun_dict_pre_>:

//............................................................................
void QS_fun_dict_pre_(
    QSpyFunPtr const fun,
    char const * const name)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b082      	sub	sp, #8
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
 80061fc:	6039      	str	r1, [r7, #0]
    QS_CRIT_STAT
    QS_CRIT_ENTRY();
 80061fe:	f7fc f8cd 	bl	800239c <QF_crit_entry_>
    QS_MEM_SYS();

    QS_beginRec_((uint_fast8_t)QS_FUN_DICT);
 8006202:	203e      	movs	r0, #62	@ 0x3e
 8006204:	f7ff fae0 	bl	80057c8 <QS_beginRec_>
    QS_FUN_PRE_(fun);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	4618      	mov	r0, r3
 800620c:	f7ff fd98 	bl	8005d40 <QS_u32_raw_>
    QS_STR_PRE_((*name == '&') ? &name[1] : name);
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	781b      	ldrb	r3, [r3, #0]
 8006214:	2b26      	cmp	r3, #38	@ 0x26
 8006216:	d102      	bne.n	800621e <QS_fun_dict_pre_+0x2a>
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	3301      	adds	r3, #1
 800621c:	e000      	b.n	8006220 <QS_fun_dict_pre_+0x2c>
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	4618      	mov	r0, r3
 8006222:	f7ff fe11 	bl	8005e48 <QS_str_raw_>
    QS_endRec_();
 8006226:	f7ff fb4f 	bl	80058c8 <QS_endRec_>

    QS_MEM_APP();
    QS_CRIT_EXIT();
 800622a:	f7fc f8c9 	bl	80023c0 <QF_crit_exit_>
    QS_onFlush();
 800622e:	f7fa f9d5 	bl	80005dc <QS_onFlush>
}
 8006232:	bf00      	nop
 8006234:	3708      	adds	r7, #8
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}

0800623a <QS_usr_dict_pre_>:

//............................................................................
void QS_usr_dict_pre_(
    enum_t const rec,
    char const * const name)
{
 800623a:	b580      	push	{r7, lr}
 800623c:	b082      	sub	sp, #8
 800623e:	af00      	add	r7, sp, #0
 8006240:	6078      	str	r0, [r7, #4]
 8006242:	6039      	str	r1, [r7, #0]
    QS_CRIT_STAT
    QS_CRIT_ENTRY();
 8006244:	f7fc f8aa 	bl	800239c <QF_crit_entry_>
    QS_MEM_SYS();

    QS_beginRec_((uint_fast8_t)QS_USR_DICT);
 8006248:	203f      	movs	r0, #63	@ 0x3f
 800624a:	f7ff fabd 	bl	80057c8 <QS_beginRec_>
    QS_U8_PRE_(rec);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	b2db      	uxtb	r3, r3
 8006252:	4618      	mov	r0, r3
 8006254:	f7ff fbb2 	bl	80059bc <QS_u8_raw_>
    QS_STR_PRE_(name);
 8006258:	6838      	ldr	r0, [r7, #0]
 800625a:	f7ff fdf5 	bl	8005e48 <QS_str_raw_>
    QS_endRec_();
 800625e:	f7ff fb33 	bl	80058c8 <QS_endRec_>

    QS_MEM_APP();
    QS_CRIT_EXIT();
 8006262:	f7fc f8ad 	bl	80023c0 <QF_crit_exit_>
    QS_onFlush();
 8006266:	f7fa f9b9 	bl	80005dc <QS_onFlush>
}
 800626a:	bf00      	nop
 800626c:	3708      	adds	r7, #8
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}
	...

08006274 <QS_assertion_pre_>:
//............................................................................
void QS_assertion_pre_(
    char const * const module,
    int_t const id,
    uint32_t const delay)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b086      	sub	sp, #24
 8006278:	af00      	add	r7, sp, #0
 800627a:	60f8      	str	r0, [r7, #12]
 800627c:	60b9      	str	r1, [r7, #8]
 800627e:	607a      	str	r2, [r7, #4]
    // NOTE: called in a critical section

    QS_beginRec_((uint_fast8_t)QS_ASSERT_FAIL);
 8006280:	2045      	movs	r0, #69	@ 0x45
 8006282:	f7ff faa1 	bl	80057c8 <QS_beginRec_>
        QS_TIME_PRE_();
 8006286:	f7fa f987 	bl	8000598 <QS_onGetTime>
 800628a:	4603      	mov	r3, r0
 800628c:	4618      	mov	r0, r3
 800628e:	f7ff fd57 	bl	8005d40 <QS_u32_raw_>
        QS_U16_PRE_(id);
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	b29b      	uxth	r3, r3
 8006296:	4618      	mov	r0, r3
 8006298:	f7ff fc9e 	bl	8005bd8 <QS_u16_raw_>
        QS_STR_PRE_((module != (char *)0) ? module : "?");
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d001      	beq.n	80062a6 <QS_assertion_pre_+0x32>
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	e000      	b.n	80062a8 <QS_assertion_pre_+0x34>
 80062a6:	4b0b      	ldr	r3, [pc, #44]	@ (80062d4 <QS_assertion_pre_+0x60>)
 80062a8:	4618      	mov	r0, r3
 80062aa:	f7ff fdcd 	bl	8005e48 <QS_str_raw_>
    QS_endRec_();
 80062ae:	f7ff fb0b 	bl	80058c8 <QS_endRec_>
    QS_onFlush();
 80062b2:	f7fa f993 	bl	80005dc <QS_onFlush>

    // busy-wait until all QS data makes it over to the host
    for (uint32_t volatile delay_ctr = delay;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	617b      	str	r3, [r7, #20]
 80062ba:	e002      	b.n	80062c2 <QS_assertion_pre_+0x4e>
         delay_ctr > 0U; --delay_ctr)
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	3b01      	subs	r3, #1
 80062c0:	617b      	str	r3, [r7, #20]
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d1f9      	bne.n	80062bc <QS_assertion_pre_+0x48>
    {}
    QS_onCleanup();
 80062c8:	f7fa f95e 	bl	8000588 <QS_onCleanup>
}
 80062cc:	bf00      	nop
 80062ce:	3718      	adds	r7, #24
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}
 80062d4:	08007880 	.word	0x08007880

080062d8 <QS_target_info_pre_>:

//............................................................................
void QS_target_info_pre_(uint8_t const isReset) {
 80062d8:	b580      	push	{r7, lr}
 80062da:	b084      	sub	sp, #16
 80062dc:	af00      	add	r7, sp, #0
 80062de:	4603      	mov	r3, r0
 80062e0:	71fb      	strb	r3, [r7, #7]
    static union {
        uint16_t u16;
        uint8_t  u8[2];
    } endian_test;

    endian_test.u16 = 0x0102U;
 80062e2:	4bb2      	ldr	r3, [pc, #712]	@ (80065ac <QS_target_info_pre_+0x2d4>)
 80062e4:	f44f 7281 	mov.w	r2, #258	@ 0x102
 80062e8:	801a      	strh	r2, [r3, #0]
    QS_beginRec_((uint_fast8_t)QS_TARGET_INFO);
 80062ea:	2040      	movs	r0, #64	@ 0x40
 80062ec:	f7ff fa6c 	bl	80057c8 <QS_beginRec_>
    QS_U8_PRE_(isReset);
 80062f0:	79fb      	ldrb	r3, [r7, #7]
 80062f2:	4618      	mov	r0, r3
 80062f4:	f7ff fb62 	bl	80059bc <QS_u8_raw_>
    QS_U16_PRE_(((endian_test.u8[0] == 0x01U) // big endian?
 80062f8:	4bac      	ldr	r3, [pc, #688]	@ (80065ac <QS_target_info_pre_+0x2d4>)
 80062fa:	781b      	ldrb	r3, [r3, #0]
 80062fc:	2b01      	cmp	r3, #1
 80062fe:	d102      	bne.n	8006306 <QS_target_info_pre_+0x2e>
 8006300:	f248 23de 	movw	r3, #33502	@ 0x82de
 8006304:	e001      	b.n	800630a <QS_target_info_pre_+0x32>
 8006306:	f240 23de 	movw	r3, #734	@ 0x2de
 800630a:	4618      	mov	r0, r3
 800630c:	f7ff fc64 	bl	8005bd8 <QS_u16_raw_>
                ? (0x8000U | QP_VERSION)
                : QP_VERSION)); // target endianness + version number

    // send the object sizes...
    QS_U8_PRE_(Q_SIGNAL_SIZE | (QF_EVENT_SIZ_SIZE << 4U));
 8006310:	2022      	movs	r0, #34	@ 0x22
 8006312:	f7ff fb53 	bl	80059bc <QS_u8_raw_>

#ifdef QF_EQUEUE_CTR_SIZE
    QS_U8_PRE_(QF_EQUEUE_CTR_SIZE | (QF_TIMEEVT_CTR_SIZE << 4U));
 8006316:	2041      	movs	r0, #65	@ 0x41
 8006318:	f7ff fb50 	bl	80059bc <QS_u8_raw_>
#else
    QS_U8_PRE_(QF_TIMEEVT_CTR_SIZE << 4U);
#endif // QF_EQUEUE_CTR_SIZE

#ifdef QF_MPOOL_CTR_SIZE
    QS_U8_PRE_(QF_MPOOL_SIZ_SIZE | (QF_MPOOL_CTR_SIZE << 4U));
 800631c:	2022      	movs	r0, #34	@ 0x22
 800631e:	f7ff fb4d 	bl	80059bc <QS_u8_raw_>
#else
    QS_U8_PRE_(0U);
#endif // QF_MPOOL_CTR_SIZE

    QS_U8_PRE_(QS_OBJ_PTR_SIZE | (QS_FUN_PTR_SIZE << 4U));
 8006322:	2044      	movs	r0, #68	@ 0x44
 8006324:	f7ff fb4a 	bl	80059bc <QS_u8_raw_>
    QS_U8_PRE_(QS_TIME_SIZE);
 8006328:	2004      	movs	r0, #4
 800632a:	f7ff fb47 	bl	80059bc <QS_u8_raw_>

    // send the limits...
    QS_U8_PRE_(QF_MAX_ACTIVE);
 800632e:	2020      	movs	r0, #32
 8006330:	f7ff fb44 	bl	80059bc <QS_u8_raw_>
    QS_U8_PRE_(QF_MAX_EPOOL | (QF_MAX_TICK_RATE << 4U));
 8006334:	2013      	movs	r0, #19
 8006336:	f7ff fb41 	bl	80059bc <QS_u8_raw_>

    // send the build time in three bytes (sec, min, hour)...
    QS_U8_PRE_((10U * (uint8_t)(TIME[6] - ZERO))
 800633a:	4b9d      	ldr	r3, [pc, #628]	@ (80065b0 <QS_target_info_pre_+0x2d8>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	3306      	adds	r3, #6
 8006340:	781a      	ldrb	r2, [r3, #0]
 8006342:	4b9c      	ldr	r3, [pc, #624]	@ (80065b4 <QS_target_info_pre_+0x2dc>)
 8006344:	781b      	ldrb	r3, [r3, #0]
 8006346:	1ad3      	subs	r3, r2, r3
 8006348:	b2db      	uxtb	r3, r3
 800634a:	461a      	mov	r2, r3
 800634c:	0092      	lsls	r2, r2, #2
 800634e:	4413      	add	r3, r2
 8006350:	005b      	lsls	r3, r3, #1
 8006352:	b2da      	uxtb	r2, r3
 8006354:	4b96      	ldr	r3, [pc, #600]	@ (80065b0 <QS_target_info_pre_+0x2d8>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	3307      	adds	r3, #7
 800635a:	7819      	ldrb	r1, [r3, #0]
 800635c:	4b95      	ldr	r3, [pc, #596]	@ (80065b4 <QS_target_info_pre_+0x2dc>)
 800635e:	781b      	ldrb	r3, [r3, #0]
 8006360:	1acb      	subs	r3, r1, r3
 8006362:	b2db      	uxtb	r3, r3
 8006364:	4413      	add	r3, r2
 8006366:	b2db      	uxtb	r3, r3
 8006368:	4618      	mov	r0, r3
 800636a:	f7ff fb27 	bl	80059bc <QS_u8_raw_>
               + (uint8_t)(TIME[7] - ZERO));
    QS_U8_PRE_((10U * (uint8_t)(TIME[3] - ZERO))
 800636e:	4b90      	ldr	r3, [pc, #576]	@ (80065b0 <QS_target_info_pre_+0x2d8>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	3303      	adds	r3, #3
 8006374:	781a      	ldrb	r2, [r3, #0]
 8006376:	4b8f      	ldr	r3, [pc, #572]	@ (80065b4 <QS_target_info_pre_+0x2dc>)
 8006378:	781b      	ldrb	r3, [r3, #0]
 800637a:	1ad3      	subs	r3, r2, r3
 800637c:	b2db      	uxtb	r3, r3
 800637e:	461a      	mov	r2, r3
 8006380:	0092      	lsls	r2, r2, #2
 8006382:	4413      	add	r3, r2
 8006384:	005b      	lsls	r3, r3, #1
 8006386:	b2da      	uxtb	r2, r3
 8006388:	4b89      	ldr	r3, [pc, #548]	@ (80065b0 <QS_target_info_pre_+0x2d8>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	3304      	adds	r3, #4
 800638e:	7819      	ldrb	r1, [r3, #0]
 8006390:	4b88      	ldr	r3, [pc, #544]	@ (80065b4 <QS_target_info_pre_+0x2dc>)
 8006392:	781b      	ldrb	r3, [r3, #0]
 8006394:	1acb      	subs	r3, r1, r3
 8006396:	b2db      	uxtb	r3, r3
 8006398:	4413      	add	r3, r2
 800639a:	b2db      	uxtb	r3, r3
 800639c:	4618      	mov	r0, r3
 800639e:	f7ff fb0d 	bl	80059bc <QS_u8_raw_>
               + (uint8_t)(TIME[4] - ZERO));
    if (Q_BUILD_TIME[0] == ' ') {
 80063a2:	4b85      	ldr	r3, [pc, #532]	@ (80065b8 <QS_target_info_pre_+0x2e0>)
 80063a4:	781b      	ldrb	r3, [r3, #0]
 80063a6:	2b20      	cmp	r3, #32
 80063a8:	d10b      	bne.n	80063c2 <QS_target_info_pre_+0xea>
        QS_U8_PRE_(TIME[1] - ZERO);
 80063aa:	4b81      	ldr	r3, [pc, #516]	@ (80065b0 <QS_target_info_pre_+0x2d8>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	3301      	adds	r3, #1
 80063b0:	781a      	ldrb	r2, [r3, #0]
 80063b2:	4b80      	ldr	r3, [pc, #512]	@ (80065b4 <QS_target_info_pre_+0x2dc>)
 80063b4:	781b      	ldrb	r3, [r3, #0]
 80063b6:	1ad3      	subs	r3, r2, r3
 80063b8:	b2db      	uxtb	r3, r3
 80063ba:	4618      	mov	r0, r3
 80063bc:	f7ff fafe 	bl	80059bc <QS_u8_raw_>
 80063c0:	e018      	b.n	80063f4 <QS_target_info_pre_+0x11c>
    }
    else {
        QS_U8_PRE_((10U * (uint8_t)(TIME[0] - ZERO))
 80063c2:	4b7b      	ldr	r3, [pc, #492]	@ (80065b0 <QS_target_info_pre_+0x2d8>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	781a      	ldrb	r2, [r3, #0]
 80063c8:	4b7a      	ldr	r3, [pc, #488]	@ (80065b4 <QS_target_info_pre_+0x2dc>)
 80063ca:	781b      	ldrb	r3, [r3, #0]
 80063cc:	1ad3      	subs	r3, r2, r3
 80063ce:	b2db      	uxtb	r3, r3
 80063d0:	461a      	mov	r2, r3
 80063d2:	0092      	lsls	r2, r2, #2
 80063d4:	4413      	add	r3, r2
 80063d6:	005b      	lsls	r3, r3, #1
 80063d8:	b2da      	uxtb	r2, r3
 80063da:	4b75      	ldr	r3, [pc, #468]	@ (80065b0 <QS_target_info_pre_+0x2d8>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	3301      	adds	r3, #1
 80063e0:	7819      	ldrb	r1, [r3, #0]
 80063e2:	4b74      	ldr	r3, [pc, #464]	@ (80065b4 <QS_target_info_pre_+0x2dc>)
 80063e4:	781b      	ldrb	r3, [r3, #0]
 80063e6:	1acb      	subs	r3, r1, r3
 80063e8:	b2db      	uxtb	r3, r3
 80063ea:	4413      	add	r3, r2
 80063ec:	b2db      	uxtb	r3, r3
 80063ee:	4618      	mov	r0, r3
 80063f0:	f7ff fae4 	bl	80059bc <QS_u8_raw_>
                  + (uint8_t)(TIME[1] - ZERO));
    }

    // send the build date in three bytes (day, month, year) ...
    if (Q_BUILD_DATE[4] == ' ') {
 80063f4:	4b71      	ldr	r3, [pc, #452]	@ (80065bc <QS_target_info_pre_+0x2e4>)
 80063f6:	791b      	ldrb	r3, [r3, #4]
 80063f8:	2b20      	cmp	r3, #32
 80063fa:	d10b      	bne.n	8006414 <QS_target_info_pre_+0x13c>
        QS_U8_PRE_(DATE[5] - ZERO);
 80063fc:	4b70      	ldr	r3, [pc, #448]	@ (80065c0 <QS_target_info_pre_+0x2e8>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	3305      	adds	r3, #5
 8006402:	781a      	ldrb	r2, [r3, #0]
 8006404:	4b6b      	ldr	r3, [pc, #428]	@ (80065b4 <QS_target_info_pre_+0x2dc>)
 8006406:	781b      	ldrb	r3, [r3, #0]
 8006408:	1ad3      	subs	r3, r2, r3
 800640a:	b2db      	uxtb	r3, r3
 800640c:	4618      	mov	r0, r3
 800640e:	f7ff fad5 	bl	80059bc <QS_u8_raw_>
 8006412:	e019      	b.n	8006448 <QS_target_info_pre_+0x170>
    }
    else {
        QS_U8_PRE_((10U * (uint8_t)(DATE[4] - ZERO))
 8006414:	4b6a      	ldr	r3, [pc, #424]	@ (80065c0 <QS_target_info_pre_+0x2e8>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	3304      	adds	r3, #4
 800641a:	781a      	ldrb	r2, [r3, #0]
 800641c:	4b65      	ldr	r3, [pc, #404]	@ (80065b4 <QS_target_info_pre_+0x2dc>)
 800641e:	781b      	ldrb	r3, [r3, #0]
 8006420:	1ad3      	subs	r3, r2, r3
 8006422:	b2db      	uxtb	r3, r3
 8006424:	461a      	mov	r2, r3
 8006426:	0092      	lsls	r2, r2, #2
 8006428:	4413      	add	r3, r2
 800642a:	005b      	lsls	r3, r3, #1
 800642c:	b2da      	uxtb	r2, r3
 800642e:	4b64      	ldr	r3, [pc, #400]	@ (80065c0 <QS_target_info_pre_+0x2e8>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	3305      	adds	r3, #5
 8006434:	7819      	ldrb	r1, [r3, #0]
 8006436:	4b5f      	ldr	r3, [pc, #380]	@ (80065b4 <QS_target_info_pre_+0x2dc>)
 8006438:	781b      	ldrb	r3, [r3, #0]
 800643a:	1acb      	subs	r3, r1, r3
 800643c:	b2db      	uxtb	r3, r3
 800643e:	4413      	add	r3, r2
 8006440:	b2db      	uxtb	r3, r3
 8006442:	4618      	mov	r0, r3
 8006444:	f7ff faba 	bl	80059bc <QS_u8_raw_>
                   + (uint8_t)(DATE[5] - ZERO));
    }
    // convert the 3-letter month to a number 1-12 ...
    uint8_t b;
    switch ((int_t)DATE[0] + (int_t)DATE[1] + (int_t)DATE[2]) {
 8006448:	4b5d      	ldr	r3, [pc, #372]	@ (80065c0 <QS_target_info_pre_+0x2e8>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	781b      	ldrb	r3, [r3, #0]
 800644e:	461a      	mov	r2, r3
 8006450:	4b5b      	ldr	r3, [pc, #364]	@ (80065c0 <QS_target_info_pre_+0x2e8>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	3301      	adds	r3, #1
 8006456:	781b      	ldrb	r3, [r3, #0]
 8006458:	4413      	add	r3, r2
 800645a:	4a59      	ldr	r2, [pc, #356]	@ (80065c0 <QS_target_info_pre_+0x2e8>)
 800645c:	6812      	ldr	r2, [r2, #0]
 800645e:	3202      	adds	r2, #2
 8006460:	7812      	ldrb	r2, [r2, #0]
 8006462:	4413      	add	r3, r2
 8006464:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8006468:	2b27      	cmp	r3, #39	@ 0x27
 800646a:	d877      	bhi.n	800655c <QS_target_info_pre_+0x284>
 800646c:	a201      	add	r2, pc, #4	@ (adr r2, 8006474 <QS_target_info_pre_+0x19c>)
 800646e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006472:	bf00      	nop
 8006474:	08006557 	.word	0x08006557
 8006478:	0800651b 	.word	0x0800651b
 800647c:	0800655d 	.word	0x0800655d
 8006480:	0800655d 	.word	0x0800655d
 8006484:	0800655d 	.word	0x0800655d
 8006488:	0800655d 	.word	0x0800655d
 800648c:	0800655d 	.word	0x0800655d
 8006490:	0800655d 	.word	0x0800655d
 8006494:	0800655d 	.word	0x0800655d
 8006498:	0800655d 	.word	0x0800655d
 800649c:	0800655d 	.word	0x0800655d
 80064a0:	0800655d 	.word	0x0800655d
 80064a4:	0800655d 	.word	0x0800655d
 80064a8:	08006515 	.word	0x08006515
 80064ac:	0800655d 	.word	0x0800655d
 80064b0:	0800655d 	.word	0x0800655d
 80064b4:	0800655d 	.word	0x0800655d
 80064b8:	0800653f 	.word	0x0800653f
 80064bc:	0800655d 	.word	0x0800655d
 80064c0:	0800655d 	.word	0x0800655d
 80064c4:	08006521 	.word	0x08006521
 80064c8:	0800655d 	.word	0x0800655d
 80064cc:	0800655d 	.word	0x0800655d
 80064d0:	08006527 	.word	0x08006527
 80064d4:	0800655d 	.word	0x0800655d
 80064d8:	0800655d 	.word	0x0800655d
 80064dc:	0800654b 	.word	0x0800654b
 80064e0:	0800652d 	.word	0x0800652d
 80064e4:	08006545 	.word	0x08006545
 80064e8:	0800655d 	.word	0x0800655d
 80064ec:	0800655d 	.word	0x0800655d
 80064f0:	08006539 	.word	0x08006539
 80064f4:	0800655d 	.word	0x0800655d
 80064f8:	08006533 	.word	0x08006533
 80064fc:	0800655d 	.word	0x0800655d
 8006500:	0800655d 	.word	0x0800655d
 8006504:	0800655d 	.word	0x0800655d
 8006508:	0800655d 	.word	0x0800655d
 800650c:	0800655d 	.word	0x0800655d
 8006510:	08006551 	.word	0x08006551
        case (int_t)'J' + (int_t)'a' + (int_t)'n':
            b = 1U;
 8006514:	2301      	movs	r3, #1
 8006516:	73fb      	strb	r3, [r7, #15]
            break;
 8006518:	e023      	b.n	8006562 <QS_target_info_pre_+0x28a>
        case (int_t)'F' + (int_t)'e' + (int_t)'b':
            b = 2U;
 800651a:	2302      	movs	r3, #2
 800651c:	73fb      	strb	r3, [r7, #15]
            break;
 800651e:	e020      	b.n	8006562 <QS_target_info_pre_+0x28a>
        case (int_t)'M' + (int_t)'a' + (int_t)'r':
            b = 3U;
 8006520:	2303      	movs	r3, #3
 8006522:	73fb      	strb	r3, [r7, #15]
            break;
 8006524:	e01d      	b.n	8006562 <QS_target_info_pre_+0x28a>
        case (int_t)'A' + (int_t)'p' + (int_t)'r':
            b = 4U;
 8006526:	2304      	movs	r3, #4
 8006528:	73fb      	strb	r3, [r7, #15]
            break;
 800652a:	e01a      	b.n	8006562 <QS_target_info_pre_+0x28a>
        case (int_t)'M' + (int_t)'a' + (int_t)'y':
            b = 5U;
 800652c:	2305      	movs	r3, #5
 800652e:	73fb      	strb	r3, [r7, #15]
            break;
 8006530:	e017      	b.n	8006562 <QS_target_info_pre_+0x28a>
        case (int_t)'J' + (int_t)'u' + (int_t)'n':
            b = 6U;
 8006532:	2306      	movs	r3, #6
 8006534:	73fb      	strb	r3, [r7, #15]
            break;
 8006536:	e014      	b.n	8006562 <QS_target_info_pre_+0x28a>
        case (int_t)'J' + (int_t)'u' + (int_t)'l':
            b = 7U;
 8006538:	2307      	movs	r3, #7
 800653a:	73fb      	strb	r3, [r7, #15]
            break;
 800653c:	e011      	b.n	8006562 <QS_target_info_pre_+0x28a>
        case (int_t)'A' + (int_t)'u' + (int_t)'g':
            b = 8U;
 800653e:	2308      	movs	r3, #8
 8006540:	73fb      	strb	r3, [r7, #15]
            break;
 8006542:	e00e      	b.n	8006562 <QS_target_info_pre_+0x28a>
        case (int_t)'S' + (int_t)'e' + (int_t)'p':
            b = 9U;
 8006544:	2309      	movs	r3, #9
 8006546:	73fb      	strb	r3, [r7, #15]
            break;
 8006548:	e00b      	b.n	8006562 <QS_target_info_pre_+0x28a>
        case (int_t)'O' + (int_t)'c' + (int_t)'t':
            b = 10U;
 800654a:	230a      	movs	r3, #10
 800654c:	73fb      	strb	r3, [r7, #15]
            break;
 800654e:	e008      	b.n	8006562 <QS_target_info_pre_+0x28a>
        case (int_t)'N' + (int_t)'o' + (int_t)'v':
            b = 11U;
 8006550:	230b      	movs	r3, #11
 8006552:	73fb      	strb	r3, [r7, #15]
            break;
 8006554:	e005      	b.n	8006562 <QS_target_info_pre_+0x28a>
        case (int_t)'D' + (int_t)'e' + (int_t)'c':
            b = 12U;
 8006556:	230c      	movs	r3, #12
 8006558:	73fb      	strb	r3, [r7, #15]
            break;
 800655a:	e002      	b.n	8006562 <QS_target_info_pre_+0x28a>
        default:
            b = 0U;
 800655c:	2300      	movs	r3, #0
 800655e:	73fb      	strb	r3, [r7, #15]
            break;
 8006560:	bf00      	nop
    }
    QS_U8_PRE_(b); // store the month
 8006562:	7bfb      	ldrb	r3, [r7, #15]
 8006564:	4618      	mov	r0, r3
 8006566:	f7ff fa29 	bl	80059bc <QS_u8_raw_>
    QS_U8_PRE_((10U * (uint8_t)(DATE[9] - ZERO))
 800656a:	4b15      	ldr	r3, [pc, #84]	@ (80065c0 <QS_target_info_pre_+0x2e8>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	3309      	adds	r3, #9
 8006570:	781a      	ldrb	r2, [r3, #0]
 8006572:	4b10      	ldr	r3, [pc, #64]	@ (80065b4 <QS_target_info_pre_+0x2dc>)
 8006574:	781b      	ldrb	r3, [r3, #0]
 8006576:	1ad3      	subs	r3, r2, r3
 8006578:	b2db      	uxtb	r3, r3
 800657a:	461a      	mov	r2, r3
 800657c:	0092      	lsls	r2, r2, #2
 800657e:	4413      	add	r3, r2
 8006580:	005b      	lsls	r3, r3, #1
 8006582:	b2da      	uxtb	r2, r3
 8006584:	4b0e      	ldr	r3, [pc, #56]	@ (80065c0 <QS_target_info_pre_+0x2e8>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	330a      	adds	r3, #10
 800658a:	7819      	ldrb	r1, [r3, #0]
 800658c:	4b09      	ldr	r3, [pc, #36]	@ (80065b4 <QS_target_info_pre_+0x2dc>)
 800658e:	781b      	ldrb	r3, [r3, #0]
 8006590:	1acb      	subs	r3, r1, r3
 8006592:	b2db      	uxtb	r3, r3
 8006594:	4413      	add	r3, r2
 8006596:	b2db      	uxtb	r3, r3
 8006598:	4618      	mov	r0, r3
 800659a:	f7ff fa0f 	bl	80059bc <QS_u8_raw_>
               + (uint8_t)(DATE[10] - ZERO));
    QS_endRec_();
 800659e:	f7ff f993 	bl	80058c8 <QS_endRec_>
}
 80065a2:	bf00      	nop
 80065a4:	3710      	adds	r7, #16
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bd80      	pop	{r7, pc}
 80065aa:	bf00      	nop
 80065ac:	20000ab8 	.word	0x20000ab8
 80065b0:	08007950 	.word	0x08007950
 80065b4:	08007954 	.word	0x08007954
 80065b8:	08007970 	.word	0x08007970
 80065bc:	08007964 	.word	0x08007964
 80065c0:	08007958 	.word	0x08007958

080065c4 <QS_rxInitBuf>:
//${QS::QS-RX::rxInitBuf} ....................................................
//! @static @public @memberof QS
void QS_rxInitBuf(
    uint8_t * const sto,
    uint16_t const stoSize)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b082      	sub	sp, #8
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
 80065cc:	460b      	mov	r3, r1
 80065ce:	807b      	strh	r3, [r7, #2]
    QS_rxPriv_.buf  = &sto[0];
 80065d0:	4a1e      	ldr	r2, [pc, #120]	@ (800664c <QS_rxInitBuf+0x88>)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6213      	str	r3, [r2, #32]
    QS_rxPriv_.end  = (QSCtr)stoSize;
 80065d6:	4a1d      	ldr	r2, [pc, #116]	@ (800664c <QS_rxInitBuf+0x88>)
 80065d8:	887b      	ldrh	r3, [r7, #2]
 80065da:	8493      	strh	r3, [r2, #36]	@ 0x24
    QS_rxPriv_.head = 0U;
 80065dc:	4b1b      	ldr	r3, [pc, #108]	@ (800664c <QS_rxInitBuf+0x88>)
 80065de:	2200      	movs	r2, #0
 80065e0:	84da      	strh	r2, [r3, #38]	@ 0x26
    QS_rxPriv_.tail = 0U;
 80065e2:	4b1a      	ldr	r3, [pc, #104]	@ (800664c <QS_rxInitBuf+0x88>)
 80065e4:	2200      	movs	r2, #0
 80065e6:	851a      	strh	r2, [r3, #40]	@ 0x28

    QS_rxPriv_.currObj[SM_OBJ] = (void *)0;
 80065e8:	4b18      	ldr	r3, [pc, #96]	@ (800664c <QS_rxInitBuf+0x88>)
 80065ea:	2200      	movs	r2, #0
 80065ec:	601a      	str	r2, [r3, #0]
    QS_rxPriv_.currObj[AO_OBJ] = (void *)0;
 80065ee:	4b17      	ldr	r3, [pc, #92]	@ (800664c <QS_rxInitBuf+0x88>)
 80065f0:	2200      	movs	r2, #0
 80065f2:	605a      	str	r2, [r3, #4]
    QS_rxPriv_.currObj[MP_OBJ] = (void *)0;
 80065f4:	4b15      	ldr	r3, [pc, #84]	@ (800664c <QS_rxInitBuf+0x88>)
 80065f6:	2200      	movs	r2, #0
 80065f8:	609a      	str	r2, [r3, #8]
    QS_rxPriv_.currObj[EQ_OBJ] = (void *)0;
 80065fa:	4b14      	ldr	r3, [pc, #80]	@ (800664c <QS_rxInitBuf+0x88>)
 80065fc:	2200      	movs	r2, #0
 80065fe:	60da      	str	r2, [r3, #12]
    QS_rxPriv_.currObj[TE_OBJ] = (void *)0;
 8006600:	4b12      	ldr	r3, [pc, #72]	@ (800664c <QS_rxInitBuf+0x88>)
 8006602:	2200      	movs	r2, #0
 8006604:	611a      	str	r2, [r3, #16]
    QS_rxPriv_.currObj[AP_OBJ] = (void *)0;
 8006606:	4b11      	ldr	r3, [pc, #68]	@ (800664c <QS_rxInitBuf+0x88>)
 8006608:	2200      	movs	r2, #0
 800660a:	615a      	str	r2, [r3, #20]

    QS_RX_TRAN_(WAIT4_SEQ);
 800660c:	4b0f      	ldr	r3, [pc, #60]	@ (800664c <QS_rxInitBuf+0x88>)
 800660e:	2201      	movs	r2, #1
 8006610:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
    QS_rxPriv_.esc    = 0U;
 8006614:	4b0d      	ldr	r3, [pc, #52]	@ (800664c <QS_rxInitBuf+0x88>)
 8006616:	2200      	movs	r2, #0
 8006618:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
    QS_rxPriv_.seq    = 0U;
 800661c:	4b0b      	ldr	r3, [pc, #44]	@ (800664c <QS_rxInitBuf+0x88>)
 800661e:	2200      	movs	r2, #0
 8006620:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    QS_rxPriv_.chksum = 0U;
 8006624:	4b09      	ldr	r3, [pc, #36]	@ (800664c <QS_rxInitBuf+0x88>)
 8006626:	2200      	movs	r2, #0
 8006628:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    QS_beginRec_((uint_fast8_t)QS_OBJ_DICT);
 800662c:	203d      	movs	r0, #61	@ 0x3d
 800662e:	f7ff f8cb 	bl	80057c8 <QS_beginRec_>
        QS_OBJ_PRE_(&QS_rxPriv_);
 8006632:	4806      	ldr	r0, [pc, #24]	@ (800664c <QS_rxInitBuf+0x88>)
 8006634:	f7ff fbfc 	bl	8005e30 <QS_obj_raw_>
        QS_STR_PRE_("QS_RX");
 8006638:	4805      	ldr	r0, [pc, #20]	@ (8006650 <QS_rxInitBuf+0x8c>)
 800663a:	f7ff fc05 	bl	8005e48 <QS_str_raw_>
    QS_endRec_();
 800663e:	f7ff f943 	bl	80058c8 <QS_endRec_>

    #ifdef Q_UTEST
    QS_tstPriv_.tpNum    = 0U;
    QS_tstPriv_.testTime = 0U;
    #endif // Q_UTEST
}
 8006642:	bf00      	nop
 8006644:	3708      	adds	r7, #8
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}
 800664a:	bf00      	nop
 800664c:	20000abc 	.word	0x20000abc
 8006650:	08007884 	.word	0x08007884

08006654 <QS_rxParse>:

//${QS::QS-RX::rxParse} ......................................................
//! @static @public @memberof QS
void QS_rxParse(void) {
 8006654:	b580      	push	{r7, lr}
 8006656:	b082      	sub	sp, #8
 8006658:	af00      	add	r7, sp, #0
    QSCtr tail = QS_rxPriv_.tail;
 800665a:	4b3d      	ldr	r3, [pc, #244]	@ (8006750 <QS_rxParse+0xfc>)
 800665c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800665e:	80fb      	strh	r3, [r7, #6]
    while (QS_rxPriv_.head != tail) { // QS-RX buffer NOT empty?
 8006660:	e06b      	b.n	800673a <QS_rxParse+0xe6>
        uint8_t b = QS_rxPriv_.buf[tail];
 8006662:	4b3b      	ldr	r3, [pc, #236]	@ (8006750 <QS_rxParse+0xfc>)
 8006664:	6a1a      	ldr	r2, [r3, #32]
 8006666:	88fb      	ldrh	r3, [r7, #6]
 8006668:	4413      	add	r3, r2
 800666a:	781b      	ldrb	r3, [r3, #0]
 800666c:	717b      	strb	r3, [r7, #5]

        ++tail;
 800666e:	88fb      	ldrh	r3, [r7, #6]
 8006670:	3301      	adds	r3, #1
 8006672:	80fb      	strh	r3, [r7, #6]
        if (tail == QS_rxPriv_.end) {
 8006674:	4b36      	ldr	r3, [pc, #216]	@ (8006750 <QS_rxParse+0xfc>)
 8006676:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006678:	88fa      	ldrh	r2, [r7, #6]
 800667a:	429a      	cmp	r2, r3
 800667c:	d101      	bne.n	8006682 <QS_rxParse+0x2e>
            tail = 0U;
 800667e:	2300      	movs	r3, #0
 8006680:	80fb      	strh	r3, [r7, #6]
        }
        QS_rxPriv_.tail = tail; // update the tail to a *valid* index
 8006682:	4a33      	ldr	r2, [pc, #204]	@ (8006750 <QS_rxParse+0xfc>)
 8006684:	88fb      	ldrh	r3, [r7, #6]
 8006686:	8513      	strh	r3, [r2, #40]	@ 0x28

        if (QS_rxPriv_.esc != 0U) {  // escaped byte arrived?
 8006688:	4b31      	ldr	r3, [pc, #196]	@ (8006750 <QS_rxParse+0xfc>)
 800668a:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 800668e:	2b00      	cmp	r3, #0
 8006690:	d015      	beq.n	80066be <QS_rxParse+0x6a>
            QS_rxPriv_.esc = 0U;
 8006692:	4b2f      	ldr	r3, [pc, #188]	@ (8006750 <QS_rxParse+0xfc>)
 8006694:	2200      	movs	r2, #0
 8006696:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
            b ^= QS_ESC_XOR;
 800669a:	797b      	ldrb	r3, [r7, #5]
 800669c:	f083 0320 	eor.w	r3, r3, #32
 80066a0:	717b      	strb	r3, [r7, #5]

            QS_rxPriv_.chksum += b;
 80066a2:	4b2b      	ldr	r3, [pc, #172]	@ (8006750 <QS_rxParse+0xfc>)
 80066a4:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 80066a8:	797b      	ldrb	r3, [r7, #5]
 80066aa:	4413      	add	r3, r2
 80066ac:	b2da      	uxtb	r2, r3
 80066ae:	4b28      	ldr	r3, [pc, #160]	@ (8006750 <QS_rxParse+0xfc>)
 80066b0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
            QS_rxParseData_(b);
 80066b4:	797b      	ldrb	r3, [r7, #5]
 80066b6:	4618      	mov	r0, r3
 80066b8:	f000 f84c 	bl	8006754 <QS_rxParseData_>
 80066bc:	e03d      	b.n	800673a <QS_rxParse+0xe6>
        }
        else if (b == QS_ESC) {
 80066be:	797b      	ldrb	r3, [r7, #5]
 80066c0:	2b7d      	cmp	r3, #125	@ 0x7d
 80066c2:	d104      	bne.n	80066ce <QS_rxParse+0x7a>
            QS_rxPriv_.esc = 1U;
 80066c4:	4b22      	ldr	r3, [pc, #136]	@ (8006750 <QS_rxParse+0xfc>)
 80066c6:	2201      	movs	r2, #1
 80066c8:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
 80066cc:	e035      	b.n	800673a <QS_rxParse+0xe6>
        }
        else if (b == QS_FRAME) {
 80066ce:	797b      	ldrb	r3, [r7, #5]
 80066d0:	2b7e      	cmp	r3, #126	@ 0x7e
 80066d2:	d125      	bne.n	8006720 <QS_rxParse+0xcc>
            // get ready for the next frame
            b = QS_rxPriv_.state; // save the current state in b
 80066d4:	4b1e      	ldr	r3, [pc, #120]	@ (8006750 <QS_rxParse+0xfc>)
 80066d6:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80066da:	717b      	strb	r3, [r7, #5]
            QS_rxPriv_.esc = 0U;
 80066dc:	4b1c      	ldr	r3, [pc, #112]	@ (8006750 <QS_rxParse+0xfc>)
 80066de:	2200      	movs	r2, #0
 80066e0:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
            QS_RX_TRAN_(WAIT4_SEQ);
 80066e4:	4b1a      	ldr	r3, [pc, #104]	@ (8006750 <QS_rxParse+0xfc>)
 80066e6:	2201      	movs	r2, #1
 80066e8:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

            if (QS_rxPriv_.chksum == QS_GOOD_CHKSUM) {
 80066ec:	4b18      	ldr	r3, [pc, #96]	@ (8006750 <QS_rxParse+0xfc>)
 80066ee:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80066f2:	2bff      	cmp	r3, #255	@ 0xff
 80066f4:	d108      	bne.n	8006708 <QS_rxParse+0xb4>
                QS_rxPriv_.chksum = 0U;
 80066f6:	4b16      	ldr	r3, [pc, #88]	@ (8006750 <QS_rxParse+0xfc>)
 80066f8:	2200      	movs	r2, #0
 80066fa:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
                QS_rxHandleGoodFrame_(b);
 80066fe:	797b      	ldrb	r3, [r7, #5]
 8006700:	4618      	mov	r0, r3
 8006702:	f000 fc19 	bl	8006f38 <QS_rxHandleGoodFrame_>
 8006706:	e018      	b.n	800673a <QS_rxParse+0xe6>
            }
            else { // bad checksum
                QS_rxPriv_.chksum = 0U;
 8006708:	4b11      	ldr	r3, [pc, #68]	@ (8006750 <QS_rxParse+0xfc>)
 800670a:	2200      	movs	r2, #0
 800670c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
                QS_rxReportError_(0x41);
 8006710:	2041      	movs	r0, #65	@ 0x41
 8006712:	f000 fee7 	bl	80074e4 <QS_rxReportError_>
                QS_rxHandleBadFrame_(b);
 8006716:	797b      	ldrb	r3, [r7, #5]
 8006718:	4618      	mov	r0, r3
 800671a:	f000 fea5 	bl	8007468 <QS_rxHandleBadFrame_>
 800671e:	e00c      	b.n	800673a <QS_rxParse+0xe6>
            }
        }
        else {
            QS_rxPriv_.chksum += b;
 8006720:	4b0b      	ldr	r3, [pc, #44]	@ (8006750 <QS_rxParse+0xfc>)
 8006722:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 8006726:	797b      	ldrb	r3, [r7, #5]
 8006728:	4413      	add	r3, r2
 800672a:	b2da      	uxtb	r2, r3
 800672c:	4b08      	ldr	r3, [pc, #32]	@ (8006750 <QS_rxParse+0xfc>)
 800672e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
            QS_rxParseData_(b);
 8006732:	797b      	ldrb	r3, [r7, #5]
 8006734:	4618      	mov	r0, r3
 8006736:	f000 f80d 	bl	8006754 <QS_rxParseData_>
    while (QS_rxPriv_.head != tail) { // QS-RX buffer NOT empty?
 800673a:	4b05      	ldr	r3, [pc, #20]	@ (8006750 <QS_rxParse+0xfc>)
 800673c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800673e:	b29b      	uxth	r3, r3
 8006740:	88fa      	ldrh	r2, [r7, #6]
 8006742:	429a      	cmp	r2, r3
 8006744:	d18d      	bne.n	8006662 <QS_rxParse+0xe>
        }
    }
}
 8006746:	bf00      	nop
 8006748:	bf00      	nop
 800674a:	3708      	adds	r7, #8
 800674c:	46bd      	mov	sp, r7
 800674e:	bd80      	pop	{r7, pc}
 8006750:	20000abc 	.word	0x20000abc

08006754 <QS_rxParseData_>:
//$enddef${QS::QS-RX} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

//============================================================================
//! @cond INTERNAL

static void QS_rxParseData_(uint8_t const b) {
 8006754:	b590      	push	{r4, r7, lr}
 8006756:	b083      	sub	sp, #12
 8006758:	af00      	add	r7, sp, #0
 800675a:	4603      	mov	r3, r0
 800675c:	71fb      	strb	r3, [r7, #7]
    switch (QS_rxPriv_.state) {
 800675e:	4bb6      	ldr	r3, [pc, #728]	@ (8006a38 <QS_rxParseData_+0x2e4>)
 8006760:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8006764:	2b23      	cmp	r3, #35	@ 0x23
 8006766:	f200 83c4 	bhi.w	8006ef2 <QS_rxParseData_+0x79e>
 800676a:	a201      	add	r2, pc, #4	@ (adr r2, 8006770 <QS_rxParseData_+0x1c>)
 800676c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006770:	08006f03 	.word	0x08006f03
 8006774:	08006801 	.word	0x08006801
 8006778:	08006835 	.word	0x08006835
 800677c:	08006f03 	.word	0x08006f03
 8006780:	08006989 	.word	0x08006989
 8006784:	080069b5 	.word	0x080069b5
 8006788:	080069f7 	.word	0x080069f7
 800678c:	08006a3d 	.word	0x08006a3d
 8006790:	08006f03 	.word	0x08006f03
 8006794:	08006f03 	.word	0x08006f03
 8006798:	08006a7f 	.word	0x08006a7f
 800679c:	08006f03 	.word	0x08006f03
 80067a0:	08006a8f 	.word	0x08006a8f
 80067a4:	08006ad1 	.word	0x08006ad1
 80067a8:	08006b05 	.word	0x08006b05
 80067ac:	08006f03 	.word	0x08006f03
 80067b0:	08006b17 	.word	0x08006b17
 80067b4:	08006b51 	.word	0x08006b51
 80067b8:	08006b95 	.word	0x08006b95
 80067bc:	08006c2d 	.word	0x08006c2d
 80067c0:	08006f03 	.word	0x08006f03
 80067c4:	08006be9 	.word	0x08006be9
 80067c8:	08006f03 	.word	0x08006f03
 80067cc:	08006c91 	.word	0x08006c91
 80067d0:	08006cc5 	.word	0x08006cc5
 80067d4:	08006f03 	.word	0x08006f03
 80067d8:	08006cfd 	.word	0x08006cfd
 80067dc:	08006d39 	.word	0x08006d39
 80067e0:	08006f03 	.word	0x08006f03
 80067e4:	08006d73 	.word	0x08006d73
 80067e8:	08006f03 	.word	0x08006f03
 80067ec:	08006da1 	.word	0x08006da1
 80067f0:	08006dc1 	.word	0x08006dc1
 80067f4:	08006e0d 	.word	0x08006e0d
 80067f8:	08006ec3 	.word	0x08006ec3
 80067fc:	08006f03 	.word	0x08006f03
        case (uint8_t)WAIT4_SEQ: {
            ++QS_rxPriv_.seq;
 8006800:	4b8d      	ldr	r3, [pc, #564]	@ (8006a38 <QS_rxParseData_+0x2e4>)
 8006802:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006806:	3301      	adds	r3, #1
 8006808:	b2da      	uxtb	r2, r3
 800680a:	4b8b      	ldr	r3, [pc, #556]	@ (8006a38 <QS_rxParseData_+0x2e4>)
 800680c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
            if (QS_rxPriv_.seq != b) {
 8006810:	4b89      	ldr	r3, [pc, #548]	@ (8006a38 <QS_rxParseData_+0x2e4>)
 8006812:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006816:	79fa      	ldrb	r2, [r7, #7]
 8006818:	429a      	cmp	r2, r3
 800681a:	d006      	beq.n	800682a <QS_rxParseData_+0xd6>
                QS_rxReportError_(0x42);
 800681c:	2042      	movs	r0, #66	@ 0x42
 800681e:	f000 fe61 	bl	80074e4 <QS_rxReportError_>
                QS_rxPriv_.seq = b; // update the sequence
 8006822:	4a85      	ldr	r2, [pc, #532]	@ (8006a38 <QS_rxParseData_+0x2e4>)
 8006824:	79fb      	ldrb	r3, [r7, #7]
 8006826:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c
            }
            QS_RX_TRAN_(WAIT4_REC);
 800682a:	4b83      	ldr	r3, [pc, #524]	@ (8006a38 <QS_rxParseData_+0x2e4>)
 800682c:	2202      	movs	r2, #2
 800682e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
            break;
 8006832:	e37b      	b.n	8006f2c <QS_rxParseData_+0x7d8>
        }
        case (uint8_t)WAIT4_REC: {
            switch (b) {
 8006834:	79fb      	ldrb	r3, [r7, #7]
 8006836:	2b10      	cmp	r3, #16
 8006838:	f200 809d 	bhi.w	8006976 <QS_rxParseData_+0x222>
 800683c:	a201      	add	r2, pc, #4	@ (adr r2, 8006844 <QS_rxParseData_+0xf0>)
 800683e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006842:	bf00      	nop
 8006844:	08006889 	.word	0x08006889
 8006848:	08006893 	.word	0x08006893
 800684c:	0800689d 	.word	0x0800689d
 8006850:	080068a7 	.word	0x080068a7
 8006854:	080068b1 	.word	0x080068b1
 8006858:	080068e1 	.word	0x080068e1
 800685c:	080068e1 	.word	0x080068e1
 8006860:	08006977 	.word	0x08006977
 8006864:	08006977 	.word	0x08006977
 8006868:	08006977 	.word	0x08006977
 800686c:	08006933 	.word	0x08006933
 8006870:	08006933 	.word	0x08006933
 8006874:	08006947 	.word	0x08006947
 8006878:	08006947 	.word	0x08006947
 800687c:	08006977 	.word	0x08006977
 8006880:	0800695b 	.word	0x0800695b
 8006884:	0800696d 	.word	0x0800696d
                case (uint8_t)QS_RX_INFO:
                    QS_RX_TRAN_(WAIT4_INFO_FRAME);
 8006888:	4b6b      	ldr	r3, [pc, #428]	@ (8006a38 <QS_rxParseData_+0x2e4>)
 800688a:	2203      	movs	r2, #3
 800688c:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
                    break;
 8006890:	e079      	b.n	8006986 <QS_rxParseData_+0x232>
                case (uint8_t)QS_RX_COMMAND:
                    QS_RX_TRAN_(WAIT4_CMD_ID);
 8006892:	4b69      	ldr	r3, [pc, #420]	@ (8006a38 <QS_rxParseData_+0x2e4>)
 8006894:	2204      	movs	r2, #4
 8006896:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
                    break;
 800689a:	e074      	b.n	8006986 <QS_rxParseData_+0x232>
                case (uint8_t)QS_RX_RESET:
                    QS_RX_TRAN_(WAIT4_RESET_FRAME);
 800689c:	4b66      	ldr	r3, [pc, #408]	@ (8006a38 <QS_rxParseData_+0x2e4>)
 800689e:	2209      	movs	r2, #9
 80068a0:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
                    break;
 80068a4:	e06f      	b.n	8006986 <QS_rxParseData_+0x232>
                case (uint8_t)QS_RX_TICK:
                    QS_RX_TRAN_(WAIT4_TICK_RATE);
 80068a6:	4b64      	ldr	r3, [pc, #400]	@ (8006a38 <QS_rxParseData_+0x2e4>)
 80068a8:	220a      	movs	r2, #10
 80068aa:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
                    break;
 80068ae:	e06a      	b.n	8006986 <QS_rxParseData_+0x232>
                case (uint8_t)QS_RX_PEEK:
                    if (QS_rxPriv_.currObj[AP_OBJ] != (void *)0) {
 80068b0:	4b61      	ldr	r3, [pc, #388]	@ (8006a38 <QS_rxParseData_+0x2e4>)
 80068b2:	695b      	ldr	r3, [r3, #20]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d00b      	beq.n	80068d0 <QS_rxParseData_+0x17c>
                        QS_rxPriv_.var.peek.offs = 0U;
 80068b8:	4b5f      	ldr	r3, [pc, #380]	@ (8006a38 <QS_rxParseData_+0x2e4>)
 80068ba:	2200      	movs	r2, #0
 80068bc:	861a      	strh	r2, [r3, #48]	@ 0x30
                        QS_rxPriv_.var.peek.idx  = 0U;
 80068be:	4b5e      	ldr	r3, [pc, #376]	@ (8006a38 <QS_rxParseData_+0x2e4>)
 80068c0:	2200      	movs	r2, #0
 80068c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
                        QS_RX_TRAN_(WAIT4_PEEK_OFFS);
 80068c6:	4b5c      	ldr	r3, [pc, #368]	@ (8006a38 <QS_rxParseData_+0x2e4>)
 80068c8:	220c      	movs	r2, #12
 80068ca:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
                    }
                    else {
                        QS_rxReportError_((int8_t)QS_RX_PEEK);
                        QS_RX_TRAN_(ERROR_STATE);
                    }
                    break;
 80068ce:	e05a      	b.n	8006986 <QS_rxParseData_+0x232>
                        QS_rxReportError_((int8_t)QS_RX_PEEK);
 80068d0:	2004      	movs	r0, #4
 80068d2:	f000 fe07 	bl	80074e4 <QS_rxReportError_>
                        QS_RX_TRAN_(ERROR_STATE);
 80068d6:	4b58      	ldr	r3, [pc, #352]	@ (8006a38 <QS_rxParseData_+0x2e4>)
 80068d8:	2200      	movs	r2, #0
 80068da:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
                    break;
 80068de:	e052      	b.n	8006986 <QS_rxParseData_+0x232>
                case (uint8_t)QS_RX_POKE: // intentionally fall-through
                case (uint8_t)QS_RX_FILL:
                    QS_rxPriv_.var.poke.fill =
 80068e0:	79fb      	ldrb	r3, [r7, #7]
 80068e2:	2b06      	cmp	r3, #6
 80068e4:	d101      	bne.n	80068ea <QS_rxParseData_+0x196>
 80068e6:	2201      	movs	r2, #1
 80068e8:	e000      	b.n	80068ec <QS_rxParseData_+0x198>
 80068ea:	2200      	movs	r2, #0
 80068ec:	4b52      	ldr	r3, [pc, #328]	@ (8006a38 <QS_rxParseData_+0x2e4>)
 80068ee:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
                            ((b == (uint8_t)QS_RX_FILL) ? 1U : 0U);
                    if (QS_rxPriv_.currObj[AP_OBJ] != (void *)0) {
 80068f2:	4b51      	ldr	r3, [pc, #324]	@ (8006a38 <QS_rxParseData_+0x2e4>)
 80068f4:	695b      	ldr	r3, [r3, #20]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d00b      	beq.n	8006912 <QS_rxParseData_+0x1be>
                        QS_rxPriv_.var.poke.offs = 0U;
 80068fa:	4b4f      	ldr	r3, [pc, #316]	@ (8006a38 <QS_rxParseData_+0x2e4>)
 80068fc:	2200      	movs	r2, #0
 80068fe:	869a      	strh	r2, [r3, #52]	@ 0x34
                        QS_rxPriv_.var.poke.idx  = 0U;
 8006900:	4b4d      	ldr	r3, [pc, #308]	@ (8006a38 <QS_rxParseData_+0x2e4>)
 8006902:	2200      	movs	r2, #0
 8006904:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
                        QS_RX_TRAN_(WAIT4_POKE_OFFS);
 8006908:	4b4b      	ldr	r3, [pc, #300]	@ (8006a38 <QS_rxParseData_+0x2e4>)
 800690a:	2210      	movs	r2, #16
 800690c:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
                        QS_rxReportError_((QS_rxPriv_.var.poke.fill != 0U)
                                           ? (int8_t)QS_RX_FILL
                                           : (int8_t)QS_RX_POKE);
                        QS_RX_TRAN_(ERROR_STATE);
                    }
                    break;
 8006910:	e039      	b.n	8006986 <QS_rxParseData_+0x232>
                        QS_rxReportError_((QS_rxPriv_.var.poke.fill != 0U)
 8006912:	4b49      	ldr	r3, [pc, #292]	@ (8006a38 <QS_rxParseData_+0x2e4>)
 8006914:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8006918:	2b00      	cmp	r3, #0
 800691a:	d001      	beq.n	8006920 <QS_rxParseData_+0x1cc>
 800691c:	2306      	movs	r3, #6
 800691e:	e000      	b.n	8006922 <QS_rxParseData_+0x1ce>
 8006920:	2305      	movs	r3, #5
 8006922:	4618      	mov	r0, r3
 8006924:	f000 fdde 	bl	80074e4 <QS_rxReportError_>
                        QS_RX_TRAN_(ERROR_STATE);
 8006928:	4b43      	ldr	r3, [pc, #268]	@ (8006a38 <QS_rxParseData_+0x2e4>)
 800692a:	2200      	movs	r2, #0
 800692c:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
                    break;
 8006930:	e029      	b.n	8006986 <QS_rxParseData_+0x232>
                case (uint8_t)QS_RX_GLB_FILTER: // intentionally fall-through
                case (uint8_t)QS_RX_LOC_FILTER:
                    QS_rxPriv_.var.flt.recId = (int8_t)b;
 8006932:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8006936:	4b40      	ldr	r3, [pc, #256]	@ (8006a38 <QS_rxParseData_+0x2e4>)
 8006938:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
                    QS_RX_TRAN_(WAIT4_FILTER_LEN);
 800693c:	4b3e      	ldr	r3, [pc, #248]	@ (8006a38 <QS_rxParseData_+0x2e4>)
 800693e:	2217      	movs	r2, #23
 8006940:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
                    break;
 8006944:	e01f      	b.n	8006986 <QS_rxParseData_+0x232>
                case (uint8_t)QS_RX_AO_FILTER: // intentionally fall-through
                case (uint8_t)QS_RX_CURR_OBJ:
                    QS_rxPriv_.var.obj.recId = (int8_t)b;
 8006946:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800694a:	4b3b      	ldr	r3, [pc, #236]	@ (8006a38 <QS_rxParseData_+0x2e4>)
 800694c:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
                    QS_RX_TRAN_(WAIT4_OBJ_KIND);
 8006950:	4b39      	ldr	r3, [pc, #228]	@ (8006a38 <QS_rxParseData_+0x2e4>)
 8006952:	221a      	movs	r2, #26
 8006954:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
                    break;
 8006958:	e015      	b.n	8006986 <QS_rxParseData_+0x232>
                case (uint8_t)QS_RX_QUERY_CURR:
                    QS_rxPriv_.var.obj.recId = (int8_t)QS_RX_QUERY_CURR;
 800695a:	4b37      	ldr	r3, [pc, #220]	@ (8006a38 <QS_rxParseData_+0x2e4>)
 800695c:	220f      	movs	r2, #15
 800695e:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
                    QS_RX_TRAN_(WAIT4_QUERY_KIND);
 8006962:	4b35      	ldr	r3, [pc, #212]	@ (8006a38 <QS_rxParseData_+0x2e4>)
 8006964:	221d      	movs	r2, #29
 8006966:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
                    break;
 800696a:	e00c      	b.n	8006986 <QS_rxParseData_+0x232>
                case (uint8_t)QS_RX_EVENT:
                    QS_RX_TRAN_(WAIT4_EVT_PRIO);
 800696c:	4b32      	ldr	r3, [pc, #200]	@ (8006a38 <QS_rxParseData_+0x2e4>)
 800696e:	221f      	movs	r2, #31
 8006970:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
                    break;
 8006974:	e007      	b.n	8006986 <QS_rxParseData_+0x232>
                    }
                    break;
#endif // Q_UTEST

                default:
                    QS_rxReportError_(0x43);
 8006976:	2043      	movs	r0, #67	@ 0x43
 8006978:	f000 fdb4 	bl	80074e4 <QS_rxReportError_>
                    QS_RX_TRAN_(ERROR_STATE);
 800697c:	4b2e      	ldr	r3, [pc, #184]	@ (8006a38 <QS_rxParseData_+0x2e4>)
 800697e:	2200      	movs	r2, #0
 8006980:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
                    break;
 8006984:	bf00      	nop
            }
            break;
 8006986:	e2d1      	b.n	8006f2c <QS_rxParseData_+0x7d8>
        case (uint8_t)WAIT4_INFO_FRAME: {
            // keep ignoring the data until a frame is collected
            break;
        }
        case (uint8_t)WAIT4_CMD_ID: {
            QS_rxPriv_.var.cmd.cmdId  = b;
 8006988:	4a2b      	ldr	r2, [pc, #172]	@ (8006a38 <QS_rxParseData_+0x2e4>)
 800698a:	79fb      	ldrb	r3, [r7, #7]
 800698c:	f882 303d 	strb.w	r3, [r2, #61]	@ 0x3d
            QS_rxPriv_.var.cmd.idx    = 0U;
 8006990:	4b29      	ldr	r3, [pc, #164]	@ (8006a38 <QS_rxParseData_+0x2e4>)
 8006992:	2200      	movs	r2, #0
 8006994:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
            QS_rxPriv_.var.cmd.param1 = 0U;
 8006998:	4b27      	ldr	r3, [pc, #156]	@ (8006a38 <QS_rxParseData_+0x2e4>)
 800699a:	2200      	movs	r2, #0
 800699c:	631a      	str	r2, [r3, #48]	@ 0x30
            QS_rxPriv_.var.cmd.param2 = 0U;
 800699e:	4b26      	ldr	r3, [pc, #152]	@ (8006a38 <QS_rxParseData_+0x2e4>)
 80069a0:	2200      	movs	r2, #0
 80069a2:	635a      	str	r2, [r3, #52]	@ 0x34
            QS_rxPriv_.var.cmd.param3 = 0U;
 80069a4:	4b24      	ldr	r3, [pc, #144]	@ (8006a38 <QS_rxParseData_+0x2e4>)
 80069a6:	2200      	movs	r2, #0
 80069a8:	639a      	str	r2, [r3, #56]	@ 0x38
            QS_RX_TRAN_(WAIT4_CMD_PARAM1);
 80069aa:	4b23      	ldr	r3, [pc, #140]	@ (8006a38 <QS_rxParseData_+0x2e4>)
 80069ac:	2205      	movs	r2, #5
 80069ae:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
            break;
 80069b2:	e2bb      	b.n	8006f2c <QS_rxParseData_+0x7d8>
        }
        case (uint8_t)WAIT4_CMD_PARAM1: {
            QS_rxPriv_.var.cmd.param1 |= ((uint32_t)b << QS_rxPriv_.var.cmd.idx);
 80069b4:	4b20      	ldr	r3, [pc, #128]	@ (8006a38 <QS_rxParseData_+0x2e4>)
 80069b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80069b8:	79fb      	ldrb	r3, [r7, #7]
 80069ba:	491f      	ldr	r1, [pc, #124]	@ (8006a38 <QS_rxParseData_+0x2e4>)
 80069bc:	f891 103c 	ldrb.w	r1, [r1, #60]	@ 0x3c
 80069c0:	408b      	lsls	r3, r1
 80069c2:	4313      	orrs	r3, r2
 80069c4:	4a1c      	ldr	r2, [pc, #112]	@ (8006a38 <QS_rxParseData_+0x2e4>)
 80069c6:	6313      	str	r3, [r2, #48]	@ 0x30
            QS_rxPriv_.var.cmd.idx    += 8U;
 80069c8:	4b1b      	ldr	r3, [pc, #108]	@ (8006a38 <QS_rxParseData_+0x2e4>)
 80069ca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80069ce:	3308      	adds	r3, #8
 80069d0:	b2da      	uxtb	r2, r3
 80069d2:	4b19      	ldr	r3, [pc, #100]	@ (8006a38 <QS_rxParseData_+0x2e4>)
 80069d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
            if (QS_rxPriv_.var.cmd.idx == (8U * 4U)) {
 80069d8:	4b17      	ldr	r3, [pc, #92]	@ (8006a38 <QS_rxParseData_+0x2e4>)
 80069da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80069de:	2b20      	cmp	r3, #32
 80069e0:	f040 8291 	bne.w	8006f06 <QS_rxParseData_+0x7b2>
                QS_rxPriv_.var.cmd.idx = 0U;
 80069e4:	4b14      	ldr	r3, [pc, #80]	@ (8006a38 <QS_rxParseData_+0x2e4>)
 80069e6:	2200      	movs	r2, #0
 80069e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
                QS_RX_TRAN_(WAIT4_CMD_PARAM2);
 80069ec:	4b12      	ldr	r3, [pc, #72]	@ (8006a38 <QS_rxParseData_+0x2e4>)
 80069ee:	2206      	movs	r2, #6
 80069f0:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
            }
            break;
 80069f4:	e287      	b.n	8006f06 <QS_rxParseData_+0x7b2>
        }
        case (uint8_t)WAIT4_CMD_PARAM2: {
            QS_rxPriv_.var.cmd.param2 |= ((uint32_t)b << QS_rxPriv_.var.cmd.idx);
 80069f6:	4b10      	ldr	r3, [pc, #64]	@ (8006a38 <QS_rxParseData_+0x2e4>)
 80069f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80069fa:	79fb      	ldrb	r3, [r7, #7]
 80069fc:	490e      	ldr	r1, [pc, #56]	@ (8006a38 <QS_rxParseData_+0x2e4>)
 80069fe:	f891 103c 	ldrb.w	r1, [r1, #60]	@ 0x3c
 8006a02:	408b      	lsls	r3, r1
 8006a04:	4313      	orrs	r3, r2
 8006a06:	4a0c      	ldr	r2, [pc, #48]	@ (8006a38 <QS_rxParseData_+0x2e4>)
 8006a08:	6353      	str	r3, [r2, #52]	@ 0x34
            QS_rxPriv_.var.cmd.idx    += 8U;
 8006a0a:	4b0b      	ldr	r3, [pc, #44]	@ (8006a38 <QS_rxParseData_+0x2e4>)
 8006a0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a10:	3308      	adds	r3, #8
 8006a12:	b2da      	uxtb	r2, r3
 8006a14:	4b08      	ldr	r3, [pc, #32]	@ (8006a38 <QS_rxParseData_+0x2e4>)
 8006a16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
            if (QS_rxPriv_.var.cmd.idx == (8U * 4U)) {
 8006a1a:	4b07      	ldr	r3, [pc, #28]	@ (8006a38 <QS_rxParseData_+0x2e4>)
 8006a1c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a20:	2b20      	cmp	r3, #32
 8006a22:	f040 8272 	bne.w	8006f0a <QS_rxParseData_+0x7b6>
                QS_rxPriv_.var.cmd.idx = 0U;
 8006a26:	4b04      	ldr	r3, [pc, #16]	@ (8006a38 <QS_rxParseData_+0x2e4>)
 8006a28:	2200      	movs	r2, #0
 8006a2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
                QS_RX_TRAN_(WAIT4_CMD_PARAM3);
 8006a2e:	4b02      	ldr	r3, [pc, #8]	@ (8006a38 <QS_rxParseData_+0x2e4>)
 8006a30:	2207      	movs	r2, #7
 8006a32:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
            }
            break;
 8006a36:	e268      	b.n	8006f0a <QS_rxParseData_+0x7b6>
 8006a38:	20000abc 	.word	0x20000abc
        }
        case (uint8_t)WAIT4_CMD_PARAM3: {
            QS_rxPriv_.var.cmd.param3 |= ((uint32_t)b << QS_rxPriv_.var.cmd.idx);
 8006a3c:	4ba0      	ldr	r3, [pc, #640]	@ (8006cc0 <QS_rxParseData_+0x56c>)
 8006a3e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006a40:	79fb      	ldrb	r3, [r7, #7]
 8006a42:	499f      	ldr	r1, [pc, #636]	@ (8006cc0 <QS_rxParseData_+0x56c>)
 8006a44:	f891 103c 	ldrb.w	r1, [r1, #60]	@ 0x3c
 8006a48:	408b      	lsls	r3, r1
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	4a9c      	ldr	r2, [pc, #624]	@ (8006cc0 <QS_rxParseData_+0x56c>)
 8006a4e:	6393      	str	r3, [r2, #56]	@ 0x38
            QS_rxPriv_.var.cmd.idx    += 8U;
 8006a50:	4b9b      	ldr	r3, [pc, #620]	@ (8006cc0 <QS_rxParseData_+0x56c>)
 8006a52:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a56:	3308      	adds	r3, #8
 8006a58:	b2da      	uxtb	r2, r3
 8006a5a:	4b99      	ldr	r3, [pc, #612]	@ (8006cc0 <QS_rxParseData_+0x56c>)
 8006a5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
            if (QS_rxPriv_.var.cmd.idx == (8U * 4U)) {
 8006a60:	4b97      	ldr	r3, [pc, #604]	@ (8006cc0 <QS_rxParseData_+0x56c>)
 8006a62:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a66:	2b20      	cmp	r3, #32
 8006a68:	f040 8251 	bne.w	8006f0e <QS_rxParseData_+0x7ba>
                QS_rxPriv_.var.cmd.idx = 0U;
 8006a6c:	4b94      	ldr	r3, [pc, #592]	@ (8006cc0 <QS_rxParseData_+0x56c>)
 8006a6e:	2200      	movs	r2, #0
 8006a70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
                QS_RX_TRAN_(WAIT4_CMD_FRAME);
 8006a74:	4b92      	ldr	r3, [pc, #584]	@ (8006cc0 <QS_rxParseData_+0x56c>)
 8006a76:	2208      	movs	r2, #8
 8006a78:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
            }
            break;
 8006a7c:	e247      	b.n	8006f0e <QS_rxParseData_+0x7ba>
        case (uint8_t)WAIT4_RESET_FRAME: {
            // keep ignoring the data until a frame is collected
            break;
        }
        case (uint8_t)WAIT4_TICK_RATE: {
            QS_rxPriv_.var.tick.rate = (uint_fast8_t)b;
 8006a7e:	79fb      	ldrb	r3, [r7, #7]
 8006a80:	4a8f      	ldr	r2, [pc, #572]	@ (8006cc0 <QS_rxParseData_+0x56c>)
 8006a82:	6313      	str	r3, [r2, #48]	@ 0x30
            QS_RX_TRAN_(WAIT4_TICK_FRAME);
 8006a84:	4b8e      	ldr	r3, [pc, #568]	@ (8006cc0 <QS_rxParseData_+0x56c>)
 8006a86:	220b      	movs	r2, #11
 8006a88:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
            break;
 8006a8c:	e24e      	b.n	8006f2c <QS_rxParseData_+0x7d8>
        case (uint8_t)WAIT4_TICK_FRAME: {
            // keep ignoring the data until a frame is collected
            break;
        }
        case (uint8_t)WAIT4_PEEK_OFFS: {
            if (QS_rxPriv_.var.peek.idx == 0U) {
 8006a8e:	4b8c      	ldr	r3, [pc, #560]	@ (8006cc0 <QS_rxParseData_+0x56c>)
 8006a90:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d10c      	bne.n	8006ab2 <QS_rxParseData_+0x35e>
                QS_rxPriv_.var.peek.offs = (uint16_t)b;
 8006a98:	79fb      	ldrb	r3, [r7, #7]
 8006a9a:	b29a      	uxth	r2, r3
 8006a9c:	4b88      	ldr	r3, [pc, #544]	@ (8006cc0 <QS_rxParseData_+0x56c>)
 8006a9e:	861a      	strh	r2, [r3, #48]	@ 0x30
                QS_rxPriv_.var.peek.idx += 8U;
 8006aa0:	4b87      	ldr	r3, [pc, #540]	@ (8006cc0 <QS_rxParseData_+0x56c>)
 8006aa2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006aa6:	3308      	adds	r3, #8
 8006aa8:	b2da      	uxtb	r2, r3
 8006aaa:	4b85      	ldr	r3, [pc, #532]	@ (8006cc0 <QS_rxParseData_+0x56c>)
 8006aac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
            }
            else {
                QS_rxPriv_.var.peek.offs |= (uint16_t)((uint16_t)b << 8U);
                QS_RX_TRAN_(WAIT4_PEEK_SIZE);
            }
            break;
 8006ab0:	e23c      	b.n	8006f2c <QS_rxParseData_+0x7d8>
                QS_rxPriv_.var.peek.offs |= (uint16_t)((uint16_t)b << 8U);
 8006ab2:	4b83      	ldr	r3, [pc, #524]	@ (8006cc0 <QS_rxParseData_+0x56c>)
 8006ab4:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
 8006ab6:	79fb      	ldrb	r3, [r7, #7]
 8006ab8:	b29b      	uxth	r3, r3
 8006aba:	021b      	lsls	r3, r3, #8
 8006abc:	b29b      	uxth	r3, r3
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	b29a      	uxth	r2, r3
 8006ac2:	4b7f      	ldr	r3, [pc, #508]	@ (8006cc0 <QS_rxParseData_+0x56c>)
 8006ac4:	861a      	strh	r2, [r3, #48]	@ 0x30
                QS_RX_TRAN_(WAIT4_PEEK_SIZE);
 8006ac6:	4b7e      	ldr	r3, [pc, #504]	@ (8006cc0 <QS_rxParseData_+0x56c>)
 8006ac8:	220d      	movs	r2, #13
 8006aca:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
            break;
 8006ace:	e22d      	b.n	8006f2c <QS_rxParseData_+0x7d8>
        }
        case (uint8_t)WAIT4_PEEK_SIZE: {
            if ((b == 1U) || (b == 2U) || (b == 4U)) {
 8006ad0:	79fb      	ldrb	r3, [r7, #7]
 8006ad2:	2b01      	cmp	r3, #1
 8006ad4:	d005      	beq.n	8006ae2 <QS_rxParseData_+0x38e>
 8006ad6:	79fb      	ldrb	r3, [r7, #7]
 8006ad8:	2b02      	cmp	r3, #2
 8006ada:	d002      	beq.n	8006ae2 <QS_rxParseData_+0x38e>
 8006adc:	79fb      	ldrb	r3, [r7, #7]
 8006ade:	2b04      	cmp	r3, #4
 8006ae0:	d108      	bne.n	8006af4 <QS_rxParseData_+0x3a0>
                QS_rxPriv_.var.peek.size = b;
 8006ae2:	4a77      	ldr	r2, [pc, #476]	@ (8006cc0 <QS_rxParseData_+0x56c>)
 8006ae4:	79fb      	ldrb	r3, [r7, #7]
 8006ae6:	f882 3032 	strb.w	r3, [r2, #50]	@ 0x32
                QS_RX_TRAN_(WAIT4_PEEK_NUM);
 8006aea:	4b75      	ldr	r3, [pc, #468]	@ (8006cc0 <QS_rxParseData_+0x56c>)
 8006aec:	220e      	movs	r2, #14
 8006aee:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
            }
            else {
                QS_rxReportError_((int8_t)QS_RX_PEEK);
                QS_RX_TRAN_(ERROR_STATE);
            }
            break;
 8006af2:	e21b      	b.n	8006f2c <QS_rxParseData_+0x7d8>
                QS_rxReportError_((int8_t)QS_RX_PEEK);
 8006af4:	2004      	movs	r0, #4
 8006af6:	f000 fcf5 	bl	80074e4 <QS_rxReportError_>
                QS_RX_TRAN_(ERROR_STATE);
 8006afa:	4b71      	ldr	r3, [pc, #452]	@ (8006cc0 <QS_rxParseData_+0x56c>)
 8006afc:	2200      	movs	r2, #0
 8006afe:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
            break;
 8006b02:	e213      	b.n	8006f2c <QS_rxParseData_+0x7d8>
        }
        case (uint8_t)WAIT4_PEEK_NUM: {
            QS_rxPriv_.var.peek.num = b;
 8006b04:	4a6e      	ldr	r2, [pc, #440]	@ (8006cc0 <QS_rxParseData_+0x56c>)
 8006b06:	79fb      	ldrb	r3, [r7, #7]
 8006b08:	f882 3033 	strb.w	r3, [r2, #51]	@ 0x33
            QS_RX_TRAN_(WAIT4_PEEK_FRAME);
 8006b0c:	4b6c      	ldr	r3, [pc, #432]	@ (8006cc0 <QS_rxParseData_+0x56c>)
 8006b0e:	220f      	movs	r2, #15
 8006b10:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
            break;
 8006b14:	e20a      	b.n	8006f2c <QS_rxParseData_+0x7d8>
        case (uint8_t)WAIT4_PEEK_FRAME: {
            // keep ignoring the data until a frame is collected
            break;
        }
        case (uint8_t)WAIT4_POKE_OFFS: {
            if (QS_rxPriv_.var.poke.idx == 0U) {
 8006b16:	4b6a      	ldr	r3, [pc, #424]	@ (8006cc0 <QS_rxParseData_+0x56c>)
 8006b18:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d108      	bne.n	8006b32 <QS_rxParseData_+0x3de>
                QS_rxPriv_.var.poke.offs = (uint16_t)b;
 8006b20:	79fb      	ldrb	r3, [r7, #7]
 8006b22:	b29a      	uxth	r2, r3
 8006b24:	4b66      	ldr	r3, [pc, #408]	@ (8006cc0 <QS_rxParseData_+0x56c>)
 8006b26:	869a      	strh	r2, [r3, #52]	@ 0x34
                QS_rxPriv_.var.poke.idx  = 1U;
 8006b28:	4b65      	ldr	r3, [pc, #404]	@ (8006cc0 <QS_rxParseData_+0x56c>)
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            }
            else {
                QS_rxPriv_.var.poke.offs |= (uint16_t)((uint16_t)b << 8U);
                QS_RX_TRAN_(WAIT4_POKE_SIZE);
            }
            break;
 8006b30:	e1fc      	b.n	8006f2c <QS_rxParseData_+0x7d8>
                QS_rxPriv_.var.poke.offs |= (uint16_t)((uint16_t)b << 8U);
 8006b32:	4b63      	ldr	r3, [pc, #396]	@ (8006cc0 <QS_rxParseData_+0x56c>)
 8006b34:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
 8006b36:	79fb      	ldrb	r3, [r7, #7]
 8006b38:	b29b      	uxth	r3, r3
 8006b3a:	021b      	lsls	r3, r3, #8
 8006b3c:	b29b      	uxth	r3, r3
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	b29a      	uxth	r2, r3
 8006b42:	4b5f      	ldr	r3, [pc, #380]	@ (8006cc0 <QS_rxParseData_+0x56c>)
 8006b44:	869a      	strh	r2, [r3, #52]	@ 0x34
                QS_RX_TRAN_(WAIT4_POKE_SIZE);
 8006b46:	4b5e      	ldr	r3, [pc, #376]	@ (8006cc0 <QS_rxParseData_+0x56c>)
 8006b48:	2211      	movs	r2, #17
 8006b4a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
            break;
 8006b4e:	e1ed      	b.n	8006f2c <QS_rxParseData_+0x7d8>
        }
        case (uint8_t)WAIT4_POKE_SIZE: {
            if ((b == 1U) || (b == 2U) || (b == 4U)) {
 8006b50:	79fb      	ldrb	r3, [r7, #7]
 8006b52:	2b01      	cmp	r3, #1
 8006b54:	d005      	beq.n	8006b62 <QS_rxParseData_+0x40e>
 8006b56:	79fb      	ldrb	r3, [r7, #7]
 8006b58:	2b02      	cmp	r3, #2
 8006b5a:	d002      	beq.n	8006b62 <QS_rxParseData_+0x40e>
 8006b5c:	79fb      	ldrb	r3, [r7, #7]
 8006b5e:	2b04      	cmp	r3, #4
 8006b60:	d108      	bne.n	8006b74 <QS_rxParseData_+0x420>
                QS_rxPriv_.var.poke.size = b;
 8006b62:	4a57      	ldr	r2, [pc, #348]	@ (8006cc0 <QS_rxParseData_+0x56c>)
 8006b64:	79fb      	ldrb	r3, [r7, #7]
 8006b66:	f882 3036 	strb.w	r3, [r2, #54]	@ 0x36
                QS_RX_TRAN_(WAIT4_POKE_NUM);
 8006b6a:	4b55      	ldr	r3, [pc, #340]	@ (8006cc0 <QS_rxParseData_+0x56c>)
 8006b6c:	2212      	movs	r2, #18
 8006b6e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
                QS_rxReportError_((QS_rxPriv_.var.poke.fill != 0U)
                                  ? (int8_t)QS_RX_FILL
                                  : (int8_t)QS_RX_POKE);
                QS_RX_TRAN_(ERROR_STATE);
            }
            break;
 8006b72:	e1db      	b.n	8006f2c <QS_rxParseData_+0x7d8>
                QS_rxReportError_((QS_rxPriv_.var.poke.fill != 0U)
 8006b74:	4b52      	ldr	r3, [pc, #328]	@ (8006cc0 <QS_rxParseData_+0x56c>)
 8006b76:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d001      	beq.n	8006b82 <QS_rxParseData_+0x42e>
 8006b7e:	2306      	movs	r3, #6
 8006b80:	e000      	b.n	8006b84 <QS_rxParseData_+0x430>
 8006b82:	2305      	movs	r3, #5
 8006b84:	4618      	mov	r0, r3
 8006b86:	f000 fcad 	bl	80074e4 <QS_rxReportError_>
                QS_RX_TRAN_(ERROR_STATE);
 8006b8a:	4b4d      	ldr	r3, [pc, #308]	@ (8006cc0 <QS_rxParseData_+0x56c>)
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
            break;
 8006b92:	e1cb      	b.n	8006f2c <QS_rxParseData_+0x7d8>
        }
        case (uint8_t)WAIT4_POKE_NUM: {
            if (b > 0U) {
 8006b94:	79fb      	ldrb	r3, [r7, #7]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d016      	beq.n	8006bc8 <QS_rxParseData_+0x474>
                QS_rxPriv_.var.poke.num  = b;
 8006b9a:	4a49      	ldr	r2, [pc, #292]	@ (8006cc0 <QS_rxParseData_+0x56c>)
 8006b9c:	79fb      	ldrb	r3, [r7, #7]
 8006b9e:	f882 3037 	strb.w	r3, [r2, #55]	@ 0x37
                QS_rxPriv_.var.poke.data = 0U;
 8006ba2:	4b47      	ldr	r3, [pc, #284]	@ (8006cc0 <QS_rxParseData_+0x56c>)
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	631a      	str	r2, [r3, #48]	@ 0x30
                QS_rxPriv_.var.poke.idx  = 0U;
 8006ba8:	4b45      	ldr	r3, [pc, #276]	@ (8006cc0 <QS_rxParseData_+0x56c>)
 8006baa:	2200      	movs	r2, #0
 8006bac:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
                QS_RX_TRAN_((QS_rxPriv_.var.poke.fill != 0U)
 8006bb0:	4b43      	ldr	r3, [pc, #268]	@ (8006cc0 <QS_rxParseData_+0x56c>)
 8006bb2:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d001      	beq.n	8006bbe <QS_rxParseData_+0x46a>
 8006bba:	2215      	movs	r2, #21
 8006bbc:	e000      	b.n	8006bc0 <QS_rxParseData_+0x46c>
 8006bbe:	2213      	movs	r2, #19
 8006bc0:	4b3f      	ldr	r3, [pc, #252]	@ (8006cc0 <QS_rxParseData_+0x56c>)
 8006bc2:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
                QS_rxReportError_((QS_rxPriv_.var.poke.fill != 0U)
                                  ? (int8_t)QS_RX_FILL
                                  : (int8_t)QS_RX_POKE);
                QS_RX_TRAN_(ERROR_STATE);
            }
            break;
 8006bc6:	e1b1      	b.n	8006f2c <QS_rxParseData_+0x7d8>
                QS_rxReportError_((QS_rxPriv_.var.poke.fill != 0U)
 8006bc8:	4b3d      	ldr	r3, [pc, #244]	@ (8006cc0 <QS_rxParseData_+0x56c>)
 8006bca:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d001      	beq.n	8006bd6 <QS_rxParseData_+0x482>
 8006bd2:	2306      	movs	r3, #6
 8006bd4:	e000      	b.n	8006bd8 <QS_rxParseData_+0x484>
 8006bd6:	2305      	movs	r3, #5
 8006bd8:	4618      	mov	r0, r3
 8006bda:	f000 fc83 	bl	80074e4 <QS_rxReportError_>
                QS_RX_TRAN_(ERROR_STATE);
 8006bde:	4b38      	ldr	r3, [pc, #224]	@ (8006cc0 <QS_rxParseData_+0x56c>)
 8006be0:	2200      	movs	r2, #0
 8006be2:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
            break;
 8006be6:	e1a1      	b.n	8006f2c <QS_rxParseData_+0x7d8>
        }
        case (uint8_t)WAIT4_FILL_DATA: {
            QS_rxPriv_.var.poke.data |= ((uint32_t)b << QS_rxPriv_.var.poke.idx);
 8006be8:	4b35      	ldr	r3, [pc, #212]	@ (8006cc0 <QS_rxParseData_+0x56c>)
 8006bea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006bec:	79fb      	ldrb	r3, [r7, #7]
 8006bee:	4934      	ldr	r1, [pc, #208]	@ (8006cc0 <QS_rxParseData_+0x56c>)
 8006bf0:	f891 1038 	ldrb.w	r1, [r1, #56]	@ 0x38
 8006bf4:	408b      	lsls	r3, r1
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	4a31      	ldr	r2, [pc, #196]	@ (8006cc0 <QS_rxParseData_+0x56c>)
 8006bfa:	6313      	str	r3, [r2, #48]	@ 0x30
            QS_rxPriv_.var.poke.idx += 8U;
 8006bfc:	4b30      	ldr	r3, [pc, #192]	@ (8006cc0 <QS_rxParseData_+0x56c>)
 8006bfe:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006c02:	3308      	adds	r3, #8
 8006c04:	b2da      	uxtb	r2, r3
 8006c06:	4b2e      	ldr	r3, [pc, #184]	@ (8006cc0 <QS_rxParseData_+0x56c>)
 8006c08:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            if ((uint8_t)(QS_rxPriv_.var.poke.idx >> 3U) == QS_rxPriv_.var.poke.size) {
 8006c0c:	4b2c      	ldr	r3, [pc, #176]	@ (8006cc0 <QS_rxParseData_+0x56c>)
 8006c0e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006c12:	08db      	lsrs	r3, r3, #3
 8006c14:	b2da      	uxtb	r2, r3
 8006c16:	4b2a      	ldr	r3, [pc, #168]	@ (8006cc0 <QS_rxParseData_+0x56c>)
 8006c18:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8006c1c:	429a      	cmp	r2, r3
 8006c1e:	f040 8178 	bne.w	8006f12 <QS_rxParseData_+0x7be>
                QS_RX_TRAN_(WAIT4_FILL_FRAME);
 8006c22:	4b27      	ldr	r3, [pc, #156]	@ (8006cc0 <QS_rxParseData_+0x56c>)
 8006c24:	2216      	movs	r2, #22
 8006c26:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
            }
            break;
 8006c2a:	e172      	b.n	8006f12 <QS_rxParseData_+0x7be>
        }
        case (uint8_t)WAIT4_POKE_DATA: {
            QS_rxPriv_.var.poke.data |= ((uint32_t)b << QS_rxPriv_.var.poke.idx);
 8006c2c:	4b24      	ldr	r3, [pc, #144]	@ (8006cc0 <QS_rxParseData_+0x56c>)
 8006c2e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006c30:	79fb      	ldrb	r3, [r7, #7]
 8006c32:	4923      	ldr	r1, [pc, #140]	@ (8006cc0 <QS_rxParseData_+0x56c>)
 8006c34:	f891 1038 	ldrb.w	r1, [r1, #56]	@ 0x38
 8006c38:	408b      	lsls	r3, r1
 8006c3a:	4313      	orrs	r3, r2
 8006c3c:	4a20      	ldr	r2, [pc, #128]	@ (8006cc0 <QS_rxParseData_+0x56c>)
 8006c3e:	6313      	str	r3, [r2, #48]	@ 0x30
            QS_rxPriv_.var.poke.idx += 8U;
 8006c40:	4b1f      	ldr	r3, [pc, #124]	@ (8006cc0 <QS_rxParseData_+0x56c>)
 8006c42:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006c46:	3308      	adds	r3, #8
 8006c48:	b2da      	uxtb	r2, r3
 8006c4a:	4b1d      	ldr	r3, [pc, #116]	@ (8006cc0 <QS_rxParseData_+0x56c>)
 8006c4c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            if ((uint8_t)(QS_rxPriv_.var.poke.idx >> 3U) == QS_rxPriv_.var.poke.size) {
 8006c50:	4b1b      	ldr	r3, [pc, #108]	@ (8006cc0 <QS_rxParseData_+0x56c>)
 8006c52:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006c56:	08db      	lsrs	r3, r3, #3
 8006c58:	b2da      	uxtb	r2, r3
 8006c5a:	4b19      	ldr	r3, [pc, #100]	@ (8006cc0 <QS_rxParseData_+0x56c>)
 8006c5c:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8006c60:	429a      	cmp	r2, r3
 8006c62:	f040 8158 	bne.w	8006f16 <QS_rxParseData_+0x7c2>
                QS_rxPoke_();
 8006c66:	f000 fd21 	bl	80076ac <QS_rxPoke_>
                --QS_rxPriv_.var.poke.num;
 8006c6a:	4b15      	ldr	r3, [pc, #84]	@ (8006cc0 <QS_rxParseData_+0x56c>)
 8006c6c:	f893 3037 	ldrb.w	r3, [r3, #55]	@ 0x37
 8006c70:	3b01      	subs	r3, #1
 8006c72:	b2da      	uxtb	r2, r3
 8006c74:	4b12      	ldr	r3, [pc, #72]	@ (8006cc0 <QS_rxParseData_+0x56c>)
 8006c76:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37
                if (QS_rxPriv_.var.poke.num == 0U) {
 8006c7a:	4b11      	ldr	r3, [pc, #68]	@ (8006cc0 <QS_rxParseData_+0x56c>)
 8006c7c:	f893 3037 	ldrb.w	r3, [r3, #55]	@ 0x37
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	f040 8148 	bne.w	8006f16 <QS_rxParseData_+0x7c2>
                    QS_RX_TRAN_(WAIT4_POKE_FRAME);
 8006c86:	4b0e      	ldr	r3, [pc, #56]	@ (8006cc0 <QS_rxParseData_+0x56c>)
 8006c88:	2214      	movs	r2, #20
 8006c8a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
                }
            }
            break;
 8006c8e:	e142      	b.n	8006f16 <QS_rxParseData_+0x7c2>
        case WAIT4_POKE_FRAME: {
            // keep ignoring the data until a frame is collected
            break;
        }
        case (uint8_t)WAIT4_FILTER_LEN: {
            if (b == sizeof(QS_rxPriv_.var.flt.data)) {
 8006c90:	79fb      	ldrb	r3, [r7, #7]
 8006c92:	2b10      	cmp	r3, #16
 8006c94:	d108      	bne.n	8006ca8 <QS_rxParseData_+0x554>
                QS_rxPriv_.var.flt.idx = 0U;
 8006c96:	4b0a      	ldr	r3, [pc, #40]	@ (8006cc0 <QS_rxParseData_+0x56c>)
 8006c98:	2200      	movs	r2, #0
 8006c9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                QS_RX_TRAN_(WAIT4_FILTER_DATA);
 8006c9e:	4b08      	ldr	r3, [pc, #32]	@ (8006cc0 <QS_rxParseData_+0x56c>)
 8006ca0:	2218      	movs	r2, #24
 8006ca2:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
            }
            else {
                QS_rxReportError_(QS_rxPriv_.var.flt.recId);
                QS_RX_TRAN_(ERROR_STATE);
            }
            break;
 8006ca6:	e141      	b.n	8006f2c <QS_rxParseData_+0x7d8>
                QS_rxReportError_(QS_rxPriv_.var.flt.recId);
 8006ca8:	4b05      	ldr	r3, [pc, #20]	@ (8006cc0 <QS_rxParseData_+0x56c>)
 8006caa:	f993 3041 	ldrsb.w	r3, [r3, #65]	@ 0x41
 8006cae:	4618      	mov	r0, r3
 8006cb0:	f000 fc18 	bl	80074e4 <QS_rxReportError_>
                QS_RX_TRAN_(ERROR_STATE);
 8006cb4:	4b02      	ldr	r3, [pc, #8]	@ (8006cc0 <QS_rxParseData_+0x56c>)
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
            break;
 8006cbc:	e136      	b.n	8006f2c <QS_rxParseData_+0x7d8>
 8006cbe:	bf00      	nop
 8006cc0:	20000abc 	.word	0x20000abc
        }
        case (uint8_t)WAIT4_FILTER_DATA: {
            QS_rxPriv_.var.flt.data[QS_rxPriv_.var.flt.idx] = b;
 8006cc4:	4b9b      	ldr	r3, [pc, #620]	@ (8006f34 <QS_rxParseData_+0x7e0>)
 8006cc6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006cca:	461a      	mov	r2, r3
 8006ccc:	4b99      	ldr	r3, [pc, #612]	@ (8006f34 <QS_rxParseData_+0x7e0>)
 8006cce:	4413      	add	r3, r2
 8006cd0:	79fa      	ldrb	r2, [r7, #7]
 8006cd2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
            ++QS_rxPriv_.var.flt.idx;
 8006cd6:	4b97      	ldr	r3, [pc, #604]	@ (8006f34 <QS_rxParseData_+0x7e0>)
 8006cd8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006cdc:	3301      	adds	r3, #1
 8006cde:	b2da      	uxtb	r2, r3
 8006ce0:	4b94      	ldr	r3, [pc, #592]	@ (8006f34 <QS_rxParseData_+0x7e0>)
 8006ce2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
            if (QS_rxPriv_.var.flt.idx == sizeof(QS_rxPriv_.var.flt.data)) {
 8006ce6:	4b93      	ldr	r3, [pc, #588]	@ (8006f34 <QS_rxParseData_+0x7e0>)
 8006ce8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006cec:	2b10      	cmp	r3, #16
 8006cee:	f040 8114 	bne.w	8006f1a <QS_rxParseData_+0x7c6>
                QS_RX_TRAN_(WAIT4_FILTER_FRAME);
 8006cf2:	4b90      	ldr	r3, [pc, #576]	@ (8006f34 <QS_rxParseData_+0x7e0>)
 8006cf4:	2219      	movs	r2, #25
 8006cf6:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
            }
            break;
 8006cfa:	e10e      	b.n	8006f1a <QS_rxParseData_+0x7c6>
        case (uint8_t)WAIT4_FILTER_FRAME: {
            // keep ignoring the data until a frame is collected
            break;
        }
        case (uint8_t)WAIT4_OBJ_KIND: {
            if (b <= (uint8_t)SM_AO_OBJ) {
 8006cfc:	79fb      	ldrb	r3, [r7, #7]
 8006cfe:	2b06      	cmp	r3, #6
 8006d00:	d80f      	bhi.n	8006d22 <QS_rxParseData_+0x5ce>
                QS_rxPriv_.var.obj.kind = b;
 8006d02:	4a8c      	ldr	r2, [pc, #560]	@ (8006f34 <QS_rxParseData_+0x7e0>)
 8006d04:	79fb      	ldrb	r3, [r7, #7]
 8006d06:	f882 3035 	strb.w	r3, [r2, #53]	@ 0x35
                QS_rxPriv_.var.obj.addr = 0U;
 8006d0a:	4b8a      	ldr	r3, [pc, #552]	@ (8006f34 <QS_rxParseData_+0x7e0>)
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	631a      	str	r2, [r3, #48]	@ 0x30
                QS_rxPriv_.var.obj.idx  = 0U;
 8006d10:	4b88      	ldr	r3, [pc, #544]	@ (8006f34 <QS_rxParseData_+0x7e0>)
 8006d12:	2200      	movs	r2, #0
 8006d14:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
                QS_RX_TRAN_(WAIT4_OBJ_ADDR);
 8006d18:	4b86      	ldr	r3, [pc, #536]	@ (8006f34 <QS_rxParseData_+0x7e0>)
 8006d1a:	221b      	movs	r2, #27
 8006d1c:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
            }
            else {
                QS_rxReportError_(QS_rxPriv_.var.obj.recId);
                QS_RX_TRAN_(ERROR_STATE);
            }
            break;
 8006d20:	e104      	b.n	8006f2c <QS_rxParseData_+0x7d8>
                QS_rxReportError_(QS_rxPriv_.var.obj.recId);
 8006d22:	4b84      	ldr	r3, [pc, #528]	@ (8006f34 <QS_rxParseData_+0x7e0>)
 8006d24:	f993 3036 	ldrsb.w	r3, [r3, #54]	@ 0x36
 8006d28:	4618      	mov	r0, r3
 8006d2a:	f000 fbdb 	bl	80074e4 <QS_rxReportError_>
                QS_RX_TRAN_(ERROR_STATE);
 8006d2e:	4b81      	ldr	r3, [pc, #516]	@ (8006f34 <QS_rxParseData_+0x7e0>)
 8006d30:	2200      	movs	r2, #0
 8006d32:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
            break;
 8006d36:	e0f9      	b.n	8006f2c <QS_rxParseData_+0x7d8>
        }
        case (uint8_t)WAIT4_OBJ_ADDR: {
            QS_rxPriv_.var.obj.addr |= ((QSObj)b << QS_rxPriv_.var.obj.idx);
 8006d38:	4b7e      	ldr	r3, [pc, #504]	@ (8006f34 <QS_rxParseData_+0x7e0>)
 8006d3a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006d3c:	79fb      	ldrb	r3, [r7, #7]
 8006d3e:	497d      	ldr	r1, [pc, #500]	@ (8006f34 <QS_rxParseData_+0x7e0>)
 8006d40:	f891 1034 	ldrb.w	r1, [r1, #52]	@ 0x34
 8006d44:	408b      	lsls	r3, r1
 8006d46:	4313      	orrs	r3, r2
 8006d48:	4a7a      	ldr	r2, [pc, #488]	@ (8006f34 <QS_rxParseData_+0x7e0>)
 8006d4a:	6313      	str	r3, [r2, #48]	@ 0x30
            QS_rxPriv_.var.obj.idx += 8U;
 8006d4c:	4b79      	ldr	r3, [pc, #484]	@ (8006f34 <QS_rxParseData_+0x7e0>)
 8006d4e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006d52:	3308      	adds	r3, #8
 8006d54:	b2da      	uxtb	r2, r3
 8006d56:	4b77      	ldr	r3, [pc, #476]	@ (8006f34 <QS_rxParseData_+0x7e0>)
 8006d58:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
            if (QS_rxPriv_.var.obj.idx == (uint8_t)(8U * QS_OBJ_PTR_SIZE)) {
 8006d5c:	4b75      	ldr	r3, [pc, #468]	@ (8006f34 <QS_rxParseData_+0x7e0>)
 8006d5e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006d62:	2b20      	cmp	r3, #32
 8006d64:	f040 80db 	bne.w	8006f1e <QS_rxParseData_+0x7ca>
                QS_RX_TRAN_(WAIT4_OBJ_FRAME);
 8006d68:	4b72      	ldr	r3, [pc, #456]	@ (8006f34 <QS_rxParseData_+0x7e0>)
 8006d6a:	221c      	movs	r2, #28
 8006d6c:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
            }
            break;
 8006d70:	e0d5      	b.n	8006f1e <QS_rxParseData_+0x7ca>
        case (uint8_t)WAIT4_OBJ_FRAME: {
            // keep ignoring the data until a frame is collected
            break;
        }
        case (uint8_t)WAIT4_QUERY_KIND: {
            if (b < (uint8_t)MAX_OBJ) {
 8006d72:	79fb      	ldrb	r3, [r7, #7]
 8006d74:	2b05      	cmp	r3, #5
 8006d76:	d808      	bhi.n	8006d8a <QS_rxParseData_+0x636>
                QS_rxPriv_.var.obj.kind = b;
 8006d78:	4a6e      	ldr	r2, [pc, #440]	@ (8006f34 <QS_rxParseData_+0x7e0>)
 8006d7a:	79fb      	ldrb	r3, [r7, #7]
 8006d7c:	f882 3035 	strb.w	r3, [r2, #53]	@ 0x35
                QS_RX_TRAN_(WAIT4_QUERY_FRAME);
 8006d80:	4b6c      	ldr	r3, [pc, #432]	@ (8006f34 <QS_rxParseData_+0x7e0>)
 8006d82:	221e      	movs	r2, #30
 8006d84:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
            }
            else {
                QS_rxReportError_(QS_rxPriv_.var.obj.recId);
                QS_RX_TRAN_(ERROR_STATE);
            }
            break;
 8006d88:	e0d0      	b.n	8006f2c <QS_rxParseData_+0x7d8>
                QS_rxReportError_(QS_rxPriv_.var.obj.recId);
 8006d8a:	4b6a      	ldr	r3, [pc, #424]	@ (8006f34 <QS_rxParseData_+0x7e0>)
 8006d8c:	f993 3036 	ldrsb.w	r3, [r3, #54]	@ 0x36
 8006d90:	4618      	mov	r0, r3
 8006d92:	f000 fba7 	bl	80074e4 <QS_rxReportError_>
                QS_RX_TRAN_(ERROR_STATE);
 8006d96:	4b67      	ldr	r3, [pc, #412]	@ (8006f34 <QS_rxParseData_+0x7e0>)
 8006d98:	2200      	movs	r2, #0
 8006d9a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
            break;
 8006d9e:	e0c5      	b.n	8006f2c <QS_rxParseData_+0x7d8>
        case (uint8_t)WAIT4_QUERY_FRAME: {
            // keep ignoring the data until a frame is collected
            break;
        }
        case (uint8_t)WAIT4_EVT_PRIO: {
            QS_rxPriv_.var.evt.prio = b;
 8006da0:	4a64      	ldr	r2, [pc, #400]	@ (8006f34 <QS_rxParseData_+0x7e0>)
 8006da2:	79fb      	ldrb	r3, [r7, #7]
 8006da4:	f882 303c 	strb.w	r3, [r2, #60]	@ 0x3c
            QS_rxPriv_.var.evt.sig  = 0U;
 8006da8:	4b62      	ldr	r3, [pc, #392]	@ (8006f34 <QS_rxParseData_+0x7e0>)
 8006daa:	2200      	movs	r2, #0
 8006dac:	871a      	strh	r2, [r3, #56]	@ 0x38
            QS_rxPriv_.var.evt.idx  = 0U;
 8006dae:	4b61      	ldr	r3, [pc, #388]	@ (8006f34 <QS_rxParseData_+0x7e0>)
 8006db0:	2200      	movs	r2, #0
 8006db2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
            QS_RX_TRAN_(WAIT4_EVT_SIG);
 8006db6:	4b5f      	ldr	r3, [pc, #380]	@ (8006f34 <QS_rxParseData_+0x7e0>)
 8006db8:	2220      	movs	r2, #32
 8006dba:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
            break;
 8006dbe:	e0b5      	b.n	8006f2c <QS_rxParseData_+0x7d8>
        }
        case (uint8_t)WAIT4_EVT_SIG: {
            QS_rxPriv_.var.evt.sig |= (QSignal)((uint32_t)b << QS_rxPriv_.var.evt.idx);
 8006dc0:	4b5c      	ldr	r3, [pc, #368]	@ (8006f34 <QS_rxParseData_+0x7e0>)
 8006dc2:	8f1a      	ldrh	r2, [r3, #56]	@ 0x38
 8006dc4:	79fb      	ldrb	r3, [r7, #7]
 8006dc6:	495b      	ldr	r1, [pc, #364]	@ (8006f34 <QS_rxParseData_+0x7e0>)
 8006dc8:	f891 103d 	ldrb.w	r1, [r1, #61]	@ 0x3d
 8006dcc:	408b      	lsls	r3, r1
 8006dce:	b29b      	uxth	r3, r3
 8006dd0:	4313      	orrs	r3, r2
 8006dd2:	b29a      	uxth	r2, r3
 8006dd4:	4b57      	ldr	r3, [pc, #348]	@ (8006f34 <QS_rxParseData_+0x7e0>)
 8006dd6:	871a      	strh	r2, [r3, #56]	@ 0x38
            QS_rxPriv_.var.evt.idx += 8U;
 8006dd8:	4b56      	ldr	r3, [pc, #344]	@ (8006f34 <QS_rxParseData_+0x7e0>)
 8006dda:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006dde:	3308      	adds	r3, #8
 8006de0:	b2da      	uxtb	r2, r3
 8006de2:	4b54      	ldr	r3, [pc, #336]	@ (8006f34 <QS_rxParseData_+0x7e0>)
 8006de4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
            if (QS_rxPriv_.var.evt.idx == (uint8_t)(8U * Q_SIGNAL_SIZE)) {
 8006de8:	4b52      	ldr	r3, [pc, #328]	@ (8006f34 <QS_rxParseData_+0x7e0>)
 8006dea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006dee:	2b10      	cmp	r3, #16
 8006df0:	f040 8097 	bne.w	8006f22 <QS_rxParseData_+0x7ce>
                QS_rxPriv_.var.evt.len = 0U;
 8006df4:	4b4f      	ldr	r3, [pc, #316]	@ (8006f34 <QS_rxParseData_+0x7e0>)
 8006df6:	2200      	movs	r2, #0
 8006df8:	875a      	strh	r2, [r3, #58]	@ 0x3a
                QS_rxPriv_.var.evt.idx = 0U;
 8006dfa:	4b4e      	ldr	r3, [pc, #312]	@ (8006f34 <QS_rxParseData_+0x7e0>)
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
                QS_RX_TRAN_(WAIT4_EVT_LEN);
 8006e02:	4b4c      	ldr	r3, [pc, #304]	@ (8006f34 <QS_rxParseData_+0x7e0>)
 8006e04:	2221      	movs	r2, #33	@ 0x21
 8006e06:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
            }
            break;
 8006e0a:	e08a      	b.n	8006f22 <QS_rxParseData_+0x7ce>
        }
        case (uint8_t)WAIT4_EVT_LEN: {
            QS_rxPriv_.var.evt.len |= (uint16_t)((uint32_t)b << QS_rxPriv_.var.evt.idx);
 8006e0c:	4b49      	ldr	r3, [pc, #292]	@ (8006f34 <QS_rxParseData_+0x7e0>)
 8006e0e:	8f5a      	ldrh	r2, [r3, #58]	@ 0x3a
 8006e10:	79fb      	ldrb	r3, [r7, #7]
 8006e12:	4948      	ldr	r1, [pc, #288]	@ (8006f34 <QS_rxParseData_+0x7e0>)
 8006e14:	f891 103d 	ldrb.w	r1, [r1, #61]	@ 0x3d
 8006e18:	408b      	lsls	r3, r1
 8006e1a:	b29b      	uxth	r3, r3
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	b29a      	uxth	r2, r3
 8006e20:	4b44      	ldr	r3, [pc, #272]	@ (8006f34 <QS_rxParseData_+0x7e0>)
 8006e22:	875a      	strh	r2, [r3, #58]	@ 0x3a
            QS_rxPriv_.var.evt.idx += 8U;
 8006e24:	4b43      	ldr	r3, [pc, #268]	@ (8006f34 <QS_rxParseData_+0x7e0>)
 8006e26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e2a:	3308      	adds	r3, #8
 8006e2c:	b2da      	uxtb	r2, r3
 8006e2e:	4b41      	ldr	r3, [pc, #260]	@ (8006f34 <QS_rxParseData_+0x7e0>)
 8006e30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
            if (QS_rxPriv_.var.evt.idx == (8U * 2U)) {
 8006e34:	4b3f      	ldr	r3, [pc, #252]	@ (8006f34 <QS_rxParseData_+0x7e0>)
 8006e36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e3a:	2b10      	cmp	r3, #16
 8006e3c:	d173      	bne.n	8006f26 <QS_rxParseData_+0x7d2>
                if ((QS_rxPriv_.var.evt.len + sizeof(QEvt))
 8006e3e:	4b3d      	ldr	r3, [pc, #244]	@ (8006f34 <QS_rxParseData_+0x7e0>)
 8006e40:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8006e42:	1d1c      	adds	r4, r3, #4
                    <= QF_poolGetMaxBlockSize())
 8006e44:	f7fc fd08 	bl	8003858 <QF_poolGetMaxBlockSize>
 8006e48:	4603      	mov	r3, r0
                if ((QS_rxPriv_.var.evt.len + sizeof(QEvt))
 8006e4a:	429c      	cmp	r4, r3
 8006e4c:	d831      	bhi.n	8006eb2 <QS_rxParseData_+0x75e>
                {
                    // report Ack before generating any other QS records
                    QS_rxReportAck_((int8_t)QS_RX_EVENT);
 8006e4e:	2010      	movs	r0, #16
 8006e50:	f000 fb32 	bl	80074b8 <QS_rxReportAck_>

                    QS_rxPriv_.var.evt.e = QF_newX_(
                        ((uint_fast16_t)QS_rxPriv_.var.evt.len + sizeof(QEvt)),
 8006e54:	4b37      	ldr	r3, [pc, #220]	@ (8006f34 <QS_rxParseData_+0x7e0>)
 8006e56:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
                    QS_rxPriv_.var.evt.e = QF_newX_(
 8006e58:	3304      	adds	r3, #4
                        0U, // margin
                        (enum_t)QS_rxPriv_.var.evt.sig);
 8006e5a:	4a36      	ldr	r2, [pc, #216]	@ (8006f34 <QS_rxParseData_+0x7e0>)
 8006e5c:	8f12      	ldrh	r2, [r2, #56]	@ 0x38
                    QS_rxPriv_.var.evt.e = QF_newX_(
 8006e5e:	2100      	movs	r1, #0
 8006e60:	4618      	mov	r0, r3
 8006e62:	f7fc fd13 	bl	800388c <QF_newX_>
 8006e66:	4603      	mov	r3, r0
 8006e68:	4a32      	ldr	r2, [pc, #200]	@ (8006f34 <QS_rxParseData_+0x7e0>)
 8006e6a:	6313      	str	r3, [r2, #48]	@ 0x30
                    if (QS_rxPriv_.var.evt.e != (QEvt *)0) { // evt allocated?
 8006e6c:	4b31      	ldr	r3, [pc, #196]	@ (8006f34 <QS_rxParseData_+0x7e0>)
 8006e6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d016      	beq.n	8006ea2 <QS_rxParseData_+0x74e>
                        QS_rxPriv_.var.evt.p = (uint8_t *)QS_rxPriv_.var.evt.e;
 8006e74:	4b2f      	ldr	r3, [pc, #188]	@ (8006f34 <QS_rxParseData_+0x7e0>)
 8006e76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e78:	4a2e      	ldr	r2, [pc, #184]	@ (8006f34 <QS_rxParseData_+0x7e0>)
 8006e7a:	6353      	str	r3, [r2, #52]	@ 0x34
                        QS_rxPriv_.var.evt.p = &QS_rxPriv_.var.evt.p[sizeof(QEvt)];
 8006e7c:	4b2d      	ldr	r3, [pc, #180]	@ (8006f34 <QS_rxParseData_+0x7e0>)
 8006e7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e80:	3304      	adds	r3, #4
 8006e82:	4a2c      	ldr	r2, [pc, #176]	@ (8006f34 <QS_rxParseData_+0x7e0>)
 8006e84:	6353      	str	r3, [r2, #52]	@ 0x34
                        if (QS_rxPriv_.var.evt.len > 0U) {
 8006e86:	4b2b      	ldr	r3, [pc, #172]	@ (8006f34 <QS_rxParseData_+0x7e0>)
 8006e88:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d004      	beq.n	8006e98 <QS_rxParseData_+0x744>
                            QS_RX_TRAN_(WAIT4_EVT_PAR);
 8006e8e:	4b29      	ldr	r3, [pc, #164]	@ (8006f34 <QS_rxParseData_+0x7e0>)
 8006e90:	2222      	movs	r2, #34	@ 0x22
 8006e92:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
                else {
                    QS_rxReportError_((int8_t)QS_RX_EVENT);
                    QS_RX_TRAN_(ERROR_STATE);
                }
            }
            break;
 8006e96:	e046      	b.n	8006f26 <QS_rxParseData_+0x7d2>
                            QS_RX_TRAN_(WAIT4_EVT_FRAME);
 8006e98:	4b26      	ldr	r3, [pc, #152]	@ (8006f34 <QS_rxParseData_+0x7e0>)
 8006e9a:	2223      	movs	r2, #35	@ 0x23
 8006e9c:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
            break;
 8006ea0:	e041      	b.n	8006f26 <QS_rxParseData_+0x7d2>
                        QS_rxReportError_((int8_t)QS_RX_EVENT);
 8006ea2:	2010      	movs	r0, #16
 8006ea4:	f000 fb1e 	bl	80074e4 <QS_rxReportError_>
                        QS_RX_TRAN_(ERROR_STATE);
 8006ea8:	4b22      	ldr	r3, [pc, #136]	@ (8006f34 <QS_rxParseData_+0x7e0>)
 8006eaa:	2200      	movs	r2, #0
 8006eac:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
            break;
 8006eb0:	e039      	b.n	8006f26 <QS_rxParseData_+0x7d2>
                    QS_rxReportError_((int8_t)QS_RX_EVENT);
 8006eb2:	2010      	movs	r0, #16
 8006eb4:	f000 fb16 	bl	80074e4 <QS_rxReportError_>
                    QS_RX_TRAN_(ERROR_STATE);
 8006eb8:	4b1e      	ldr	r3, [pc, #120]	@ (8006f34 <QS_rxParseData_+0x7e0>)
 8006eba:	2200      	movs	r2, #0
 8006ebc:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
            break;
 8006ec0:	e031      	b.n	8006f26 <QS_rxParseData_+0x7d2>
        }
        case (uint8_t)WAIT4_EVT_PAR: { // event parameters
            *QS_rxPriv_.var.evt.p = b;
 8006ec2:	4b1c      	ldr	r3, [pc, #112]	@ (8006f34 <QS_rxParseData_+0x7e0>)
 8006ec4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ec6:	79fa      	ldrb	r2, [r7, #7]
 8006ec8:	701a      	strb	r2, [r3, #0]
            ++QS_rxPriv_.var.evt.p;
 8006eca:	4b1a      	ldr	r3, [pc, #104]	@ (8006f34 <QS_rxParseData_+0x7e0>)
 8006ecc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ece:	3301      	adds	r3, #1
 8006ed0:	4a18      	ldr	r2, [pc, #96]	@ (8006f34 <QS_rxParseData_+0x7e0>)
 8006ed2:	6353      	str	r3, [r2, #52]	@ 0x34
            --QS_rxPriv_.var.evt.len;
 8006ed4:	4b17      	ldr	r3, [pc, #92]	@ (8006f34 <QS_rxParseData_+0x7e0>)
 8006ed6:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8006ed8:	3b01      	subs	r3, #1
 8006eda:	b29a      	uxth	r2, r3
 8006edc:	4b15      	ldr	r3, [pc, #84]	@ (8006f34 <QS_rxParseData_+0x7e0>)
 8006ede:	875a      	strh	r2, [r3, #58]	@ 0x3a
            if (QS_rxPriv_.var.evt.len == 0U) {
 8006ee0:	4b14      	ldr	r3, [pc, #80]	@ (8006f34 <QS_rxParseData_+0x7e0>)
 8006ee2:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d120      	bne.n	8006f2a <QS_rxParseData_+0x7d6>
                QS_RX_TRAN_(WAIT4_EVT_FRAME);
 8006ee8:	4b12      	ldr	r3, [pc, #72]	@ (8006f34 <QS_rxParseData_+0x7e0>)
 8006eea:	2223      	movs	r2, #35	@ 0x23
 8006eec:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
            }
            break;
 8006ef0:	e01b      	b.n	8006f2a <QS_rxParseData_+0x7d6>
        case (uint8_t)ERROR_STATE: {
            // keep ignoring the data until a good frame is collected
            break;
        }
        default: {  // unexpected or unimplemented state
            QS_rxReportError_(0x45);
 8006ef2:	2045      	movs	r0, #69	@ 0x45
 8006ef4:	f000 faf6 	bl	80074e4 <QS_rxReportError_>
            QS_RX_TRAN_(ERROR_STATE);
 8006ef8:	4b0e      	ldr	r3, [pc, #56]	@ (8006f34 <QS_rxParseData_+0x7e0>)
 8006efa:	2200      	movs	r2, #0
 8006efc:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
            break;
 8006f00:	e014      	b.n	8006f2c <QS_rxParseData_+0x7d8>
            break;
 8006f02:	bf00      	nop
 8006f04:	e012      	b.n	8006f2c <QS_rxParseData_+0x7d8>
            break;
 8006f06:	bf00      	nop
 8006f08:	e010      	b.n	8006f2c <QS_rxParseData_+0x7d8>
            break;
 8006f0a:	bf00      	nop
 8006f0c:	e00e      	b.n	8006f2c <QS_rxParseData_+0x7d8>
            break;
 8006f0e:	bf00      	nop
 8006f10:	e00c      	b.n	8006f2c <QS_rxParseData_+0x7d8>
            break;
 8006f12:	bf00      	nop
 8006f14:	e00a      	b.n	8006f2c <QS_rxParseData_+0x7d8>
            break;
 8006f16:	bf00      	nop
 8006f18:	e008      	b.n	8006f2c <QS_rxParseData_+0x7d8>
            break;
 8006f1a:	bf00      	nop
 8006f1c:	e006      	b.n	8006f2c <QS_rxParseData_+0x7d8>
            break;
 8006f1e:	bf00      	nop
 8006f20:	e004      	b.n	8006f2c <QS_rxParseData_+0x7d8>
            break;
 8006f22:	bf00      	nop
 8006f24:	e002      	b.n	8006f2c <QS_rxParseData_+0x7d8>
            break;
 8006f26:	bf00      	nop
 8006f28:	e000      	b.n	8006f2c <QS_rxParseData_+0x7d8>
            break;
 8006f2a:	bf00      	nop
        }
    }
}
 8006f2c:	bf00      	nop
 8006f2e:	370c      	adds	r7, #12
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd90      	pop	{r4, r7, pc}
 8006f34:	20000abc 	.word	0x20000abc

08006f38 <QS_rxHandleGoodFrame_>:

//............................................................................
static void QS_rxHandleGoodFrame_(uint8_t const state) {
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b088      	sub	sp, #32
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	4603      	mov	r3, r0
 8006f40:	71fb      	strb	r3, [r7, #7]
    uint8_t i;
    uint8_t *ptr;
    QS_CRIT_STAT

    switch (state) {
 8006f42:	79fb      	ldrb	r3, [r7, #7]
 8006f44:	2b23      	cmp	r3, #35	@ 0x23
 8006f46:	f200 8282 	bhi.w	800744e <QS_rxHandleGoodFrame_+0x516>
 8006f4a:	a201      	add	r2, pc, #4	@ (adr r2, 8006f50 <QS_rxHandleGoodFrame_+0x18>)
 8006f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f50:	08007457 	.word	0x08007457
 8006f54:	0800744f 	.word	0x0800744f
 8006f58:	0800744f 	.word	0x0800744f
 8006f5c:	08006fe1 	.word	0x08006fe1
 8006f60:	0800744f 	.word	0x0800744f
 8006f64:	08006ff7 	.word	0x08006ff7
 8006f68:	08006ff7 	.word	0x08006ff7
 8006f6c:	08006ff7 	.word	0x08006ff7
 8006f70:	08006ff7 	.word	0x08006ff7
 8006f74:	08006ff1 	.word	0x08006ff1
 8006f78:	0800744f 	.word	0x0800744f
 8006f7c:	0800701b 	.word	0x0800701b
 8006f80:	0800744f 	.word	0x0800744f
 8006f84:	0800744f 	.word	0x0800744f
 8006f88:	0800744f 	.word	0x0800744f
 8006f8c:	08007035 	.word	0x08007035
 8006f90:	0800744f 	.word	0x0800744f
 8006f94:	0800744f 	.word	0x0800744f
 8006f98:	0800744f 	.word	0x0800744f
 8006f9c:	080070ef 	.word	0x080070ef
 8006fa0:	080070f7 	.word	0x080070f7
 8006fa4:	0800744f 	.word	0x0800744f
 8006fa8:	080070ff 	.word	0x080070ff
 8006fac:	0800744f 	.word	0x0800744f
 8006fb0:	0800744f 	.word	0x0800744f
 8006fb4:	0800717d 	.word	0x0800717d
 8006fb8:	0800744f 	.word	0x0800744f
 8006fbc:	0800744f 	.word	0x0800744f
 8006fc0:	0800723d 	.word	0x0800723d
 8006fc4:	0800744f 	.word	0x0800744f
 8006fc8:	080072ff 	.word	0x080072ff
 8006fcc:	0800744f 	.word	0x0800744f
 8006fd0:	0800744f 	.word	0x0800744f
 8006fd4:	0800744f 	.word	0x0800744f
 8006fd8:	0800744f 	.word	0x0800744f
 8006fdc:	0800730d 	.word	0x0800730d
        case WAIT4_INFO_FRAME: {
            // no need to report Ack or Done
            QS_CRIT_ENTRY();
 8006fe0:	f7fb f9dc 	bl	800239c <QF_crit_entry_>
            QS_MEM_SYS();
            QS_target_info_pre_(0U); // send only Target info
 8006fe4:	2000      	movs	r0, #0
 8006fe6:	f7ff f977 	bl	80062d8 <QS_target_info_pre_>
            QS_MEM_APP();
            QS_CRIT_EXIT();
 8006fea:	f7fb f9e9 	bl	80023c0 <QF_crit_exit_>
            break;
 8006fee:	e233      	b.n	8007458 <QS_rxHandleGoodFrame_+0x520>
        }
        case WAIT4_RESET_FRAME: {
            // no need to report Ack or Done, because Target resets
            QS_onReset(); // reset the Target
 8006ff0:	f7f9 fb12 	bl	8000618 <QS_onReset>
            break;
 8006ff4:	e230      	b.n	8007458 <QS_rxHandleGoodFrame_+0x520>
        }
        case WAIT4_CMD_PARAM1: // intentionally fall-through
        case WAIT4_CMD_PARAM2: // intentionally fall-through
        case WAIT4_CMD_PARAM3: // intentionally fall-through
        case WAIT4_CMD_FRAME: {
            QS_rxReportAck_((int8_t)QS_RX_COMMAND);
 8006ff6:	2001      	movs	r0, #1
 8006ff8:	f000 fa5e 	bl	80074b8 <QS_rxReportAck_>
            QS_onCommand(QS_rxPriv_.var.cmd.cmdId, QS_rxPriv_.var.cmd.param1,
 8006ffc:	4ba4      	ldr	r3, [pc, #656]	@ (8007290 <QS_rxHandleGoodFrame_+0x358>)
 8006ffe:	f893 003d 	ldrb.w	r0, [r3, #61]	@ 0x3d
 8007002:	4ba3      	ldr	r3, [pc, #652]	@ (8007290 <QS_rxHandleGoodFrame_+0x358>)
 8007004:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8007006:	4ba2      	ldr	r3, [pc, #648]	@ (8007290 <QS_rxHandleGoodFrame_+0x358>)
 8007008:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800700a:	4ba1      	ldr	r3, [pc, #644]	@ (8007290 <QS_rxHandleGoodFrame_+0x358>)
 800700c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800700e:	f7f9 fb07 	bl	8000620 <QS_onCommand>
#ifdef Q_UTEST
    #if Q_UTEST != 0
            QS_processTestEvts_(); // process all events produced
    #endif  // Q_UTEST != 0
#endif  // Q_UTEST
            QS_rxReportDone_((int8_t)QS_RX_COMMAND);
 8007012:	2001      	movs	r0, #1
 8007014:	f000 fa7f 	bl	8007516 <QS_rxReportDone_>
            break;
 8007018:	e21e      	b.n	8007458 <QS_rxHandleGoodFrame_+0x520>
        }
        case WAIT4_TICK_FRAME: {
            QS_rxReportAck_((int8_t)QS_RX_TICK);
 800701a:	2003      	movs	r0, #3
 800701c:	f000 fa4c 	bl	80074b8 <QS_rxReportAck_>
            QTimeEvt_tick1_((uint_fast8_t)QS_rxPriv_.var.tick.rate, &QS_rxPriv_);
    #if Q_UTEST != 0
            QS_processTestEvts_(); // process all events produced
    #endif  // Q_UTEST != 0
#else
            QTimeEvt_tick_((uint_fast8_t)QS_rxPriv_.var.tick.rate, &QS_rxPriv_);
 8007020:	4b9b      	ldr	r3, [pc, #620]	@ (8007290 <QS_rxHandleGoodFrame_+0x358>)
 8007022:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007024:	499a      	ldr	r1, [pc, #616]	@ (8007290 <QS_rxHandleGoodFrame_+0x358>)
 8007026:	4618      	mov	r0, r3
 8007028:	f7fd faba 	bl	80045a0 <QTimeEvt_tick_>
#endif  // Q_UTEST
            QS_rxReportDone_((int8_t)QS_RX_TICK);
 800702c:	2003      	movs	r0, #3
 800702e:	f000 fa72 	bl	8007516 <QS_rxReportDone_>
            break;
 8007032:	e211      	b.n	8007458 <QS_rxHandleGoodFrame_+0x520>
        }
        case WAIT4_PEEK_FRAME: {
            // no need to report Ack or Done
            QS_CRIT_ENTRY();
 8007034:	f7fb f9b2 	bl	800239c <QF_crit_entry_>
            QS_MEM_SYS();
            QS_beginRec_((uint_fast8_t)QS_PEEK_DATA);
 8007038:	2044      	movs	r0, #68	@ 0x44
 800703a:	f7fe fbc5 	bl	80057c8 <QS_beginRec_>
                ptr = (uint8_t *)QS_rxPriv_.currObj[AP_OBJ];
 800703e:	4b94      	ldr	r3, [pc, #592]	@ (8007290 <QS_rxHandleGoodFrame_+0x358>)
 8007040:	695b      	ldr	r3, [r3, #20]
 8007042:	60fb      	str	r3, [r7, #12]
                ptr = &ptr[QS_rxPriv_.var.peek.offs];
 8007044:	4b92      	ldr	r3, [pc, #584]	@ (8007290 <QS_rxHandleGoodFrame_+0x358>)
 8007046:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8007048:	461a      	mov	r2, r3
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	4413      	add	r3, r2
 800704e:	60fb      	str	r3, [r7, #12]
                QS_TIME_PRE_();                  // timestamp
 8007050:	f7f9 faa2 	bl	8000598 <QS_onGetTime>
 8007054:	4603      	mov	r3, r0
 8007056:	4618      	mov	r0, r3
 8007058:	f7fe fe72 	bl	8005d40 <QS_u32_raw_>
                QS_U16_PRE_(QS_rxPriv_.var.peek.offs); // data offset
 800705c:	4b8c      	ldr	r3, [pc, #560]	@ (8007290 <QS_rxHandleGoodFrame_+0x358>)
 800705e:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8007060:	4618      	mov	r0, r3
 8007062:	f7fe fdb9 	bl	8005bd8 <QS_u16_raw_>
                QS_U8_PRE_(QS_rxPriv_.var.peek.size);  // data size
 8007066:	4b8a      	ldr	r3, [pc, #552]	@ (8007290 <QS_rxHandleGoodFrame_+0x358>)
 8007068:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800706c:	4618      	mov	r0, r3
 800706e:	f7fe fca5 	bl	80059bc <QS_u8_raw_>
                QS_U8_PRE_(QS_rxPriv_.var.peek.num);   // # data items
 8007072:	4b87      	ldr	r3, [pc, #540]	@ (8007290 <QS_rxHandleGoodFrame_+0x358>)
 8007074:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8007078:	4618      	mov	r0, r3
 800707a:	f7fe fc9f 	bl	80059bc <QS_u8_raw_>
                for (i = 0U; i < QS_rxPriv_.var.peek.num; ++i) {
 800707e:	2300      	movs	r3, #0
 8007080:	77fb      	strb	r3, [r7, #31]
 8007082:	e029      	b.n	80070d8 <QS_rxHandleGoodFrame_+0x1a0>
                    switch (QS_rxPriv_.var.peek.size) {
 8007084:	4b82      	ldr	r3, [pc, #520]	@ (8007290 <QS_rxHandleGoodFrame_+0x358>)
 8007086:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800708a:	2b04      	cmp	r3, #4
 800708c:	d017      	beq.n	80070be <QS_rxHandleGoodFrame_+0x186>
 800708e:	2b04      	cmp	r3, #4
 8007090:	dc1e      	bgt.n	80070d0 <QS_rxHandleGoodFrame_+0x198>
 8007092:	2b01      	cmp	r3, #1
 8007094:	d002      	beq.n	800709c <QS_rxHandleGoodFrame_+0x164>
 8007096:	2b02      	cmp	r3, #2
 8007098:	d008      	beq.n	80070ac <QS_rxHandleGoodFrame_+0x174>
                        case 4:
                            QS_U32_PRE_(((uint32_t *)ptr)[i]);
                            break;
                        default:
                            // intentionally empty
                            break;
 800709a:	e019      	b.n	80070d0 <QS_rxHandleGoodFrame_+0x198>
                            QS_U8_PRE_(ptr[i]);
 800709c:	7ffb      	ldrb	r3, [r7, #31]
 800709e:	68fa      	ldr	r2, [r7, #12]
 80070a0:	4413      	add	r3, r2
 80070a2:	781b      	ldrb	r3, [r3, #0]
 80070a4:	4618      	mov	r0, r3
 80070a6:	f7fe fc89 	bl	80059bc <QS_u8_raw_>
                            break;
 80070aa:	e012      	b.n	80070d2 <QS_rxHandleGoodFrame_+0x19a>
                            QS_U16_PRE_(((uint16_t *)ptr)[i]);
 80070ac:	7ffb      	ldrb	r3, [r7, #31]
 80070ae:	005b      	lsls	r3, r3, #1
 80070b0:	68fa      	ldr	r2, [r7, #12]
 80070b2:	4413      	add	r3, r2
 80070b4:	881b      	ldrh	r3, [r3, #0]
 80070b6:	4618      	mov	r0, r3
 80070b8:	f7fe fd8e 	bl	8005bd8 <QS_u16_raw_>
                            break;
 80070bc:	e009      	b.n	80070d2 <QS_rxHandleGoodFrame_+0x19a>
                            QS_U32_PRE_(((uint32_t *)ptr)[i]);
 80070be:	7ffb      	ldrb	r3, [r7, #31]
 80070c0:	009b      	lsls	r3, r3, #2
 80070c2:	68fa      	ldr	r2, [r7, #12]
 80070c4:	4413      	add	r3, r2
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4618      	mov	r0, r3
 80070ca:	f7fe fe39 	bl	8005d40 <QS_u32_raw_>
                            break;
 80070ce:	e000      	b.n	80070d2 <QS_rxHandleGoodFrame_+0x19a>
                            break;
 80070d0:	bf00      	nop
                for (i = 0U; i < QS_rxPriv_.var.peek.num; ++i) {
 80070d2:	7ffb      	ldrb	r3, [r7, #31]
 80070d4:	3301      	adds	r3, #1
 80070d6:	77fb      	strb	r3, [r7, #31]
 80070d8:	4b6d      	ldr	r3, [pc, #436]	@ (8007290 <QS_rxHandleGoodFrame_+0x358>)
 80070da:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80070de:	7ffa      	ldrb	r2, [r7, #31]
 80070e0:	429a      	cmp	r2, r3
 80070e2:	d3cf      	bcc.n	8007084 <QS_rxHandleGoodFrame_+0x14c>
                    }
                }
            QS_endRec_();
 80070e4:	f7fe fbf0 	bl	80058c8 <QS_endRec_>
            QS_MEM_APP();
            QS_CRIT_EXIT();
 80070e8:	f7fb f96a 	bl	80023c0 <QF_crit_exit_>

            QS_REC_DONE(); // user callback (if defined)
            break;
 80070ec:	e1b4      	b.n	8007458 <QS_rxHandleGoodFrame_+0x520>
        }
        case WAIT4_POKE_DATA: {
            // received less than expected poke data items
            QS_rxReportError_((int8_t)QS_RX_POKE);
 80070ee:	2005      	movs	r0, #5
 80070f0:	f000 f9f8 	bl	80074e4 <QS_rxReportError_>
            break;
 80070f4:	e1b0      	b.n	8007458 <QS_rxHandleGoodFrame_+0x520>
        }
        case WAIT4_POKE_FRAME: {
            QS_rxReportAck_((int8_t)QS_RX_POKE);
 80070f6:	2005      	movs	r0, #5
 80070f8:	f000 f9de 	bl	80074b8 <QS_rxReportAck_>
            // no need to report done
            break;
 80070fc:	e1ac      	b.n	8007458 <QS_rxHandleGoodFrame_+0x520>
        }
        case WAIT4_FILL_FRAME: {
            QS_rxReportAck_((int8_t)QS_RX_FILL);
 80070fe:	2006      	movs	r0, #6
 8007100:	f000 f9da 	bl	80074b8 <QS_rxReportAck_>
            ptr = (uint8_t *)QS_rxPriv_.currObj[AP_OBJ];
 8007104:	4b62      	ldr	r3, [pc, #392]	@ (8007290 <QS_rxHandleGoodFrame_+0x358>)
 8007106:	695b      	ldr	r3, [r3, #20]
 8007108:	60fb      	str	r3, [r7, #12]
            ptr = &ptr[QS_rxPriv_.var.poke.offs];
 800710a:	4b61      	ldr	r3, [pc, #388]	@ (8007290 <QS_rxHandleGoodFrame_+0x358>)
 800710c:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 800710e:	461a      	mov	r2, r3
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	4413      	add	r3, r2
 8007114:	60fb      	str	r3, [r7, #12]
            for (i = 0U; i < QS_rxPriv_.var.poke.num; ++i) {
 8007116:	2300      	movs	r3, #0
 8007118:	77fb      	strb	r3, [r7, #31]
 800711a:	e028      	b.n	800716e <QS_rxHandleGoodFrame_+0x236>
                switch (QS_rxPriv_.var.poke.size) {
 800711c:	4b5c      	ldr	r3, [pc, #368]	@ (8007290 <QS_rxHandleGoodFrame_+0x358>)
 800711e:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8007122:	2b04      	cmp	r3, #4
 8007124:	d017      	beq.n	8007156 <QS_rxHandleGoodFrame_+0x21e>
 8007126:	2b04      	cmp	r3, #4
 8007128:	dc1d      	bgt.n	8007166 <QS_rxHandleGoodFrame_+0x22e>
 800712a:	2b01      	cmp	r3, #1
 800712c:	d002      	beq.n	8007134 <QS_rxHandleGoodFrame_+0x1fc>
 800712e:	2b02      	cmp	r3, #2
 8007130:	d008      	beq.n	8007144 <QS_rxHandleGoodFrame_+0x20c>
                    case 4:
                        ((uint32_t *)ptr)[i] = QS_rxPriv_.var.poke.data;
                        break;
                    default:
                        // intentionally empty
                        break;
 8007132:	e018      	b.n	8007166 <QS_rxHandleGoodFrame_+0x22e>
                        ptr[i] = (uint8_t)QS_rxPriv_.var.poke.data;
 8007134:	4b56      	ldr	r3, [pc, #344]	@ (8007290 <QS_rxHandleGoodFrame_+0x358>)
 8007136:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8007138:	7ffb      	ldrb	r3, [r7, #31]
 800713a:	68fa      	ldr	r2, [r7, #12]
 800713c:	4413      	add	r3, r2
 800713e:	b2ca      	uxtb	r2, r1
 8007140:	701a      	strb	r2, [r3, #0]
                        break;
 8007142:	e011      	b.n	8007168 <QS_rxHandleGoodFrame_+0x230>
                            = (uint16_t)QS_rxPriv_.var.poke.data;
 8007144:	4b52      	ldr	r3, [pc, #328]	@ (8007290 <QS_rxHandleGoodFrame_+0x358>)
 8007146:	6b19      	ldr	r1, [r3, #48]	@ 0x30
                        ((uint16_t *)ptr)[i]
 8007148:	7ffb      	ldrb	r3, [r7, #31]
 800714a:	005b      	lsls	r3, r3, #1
 800714c:	68fa      	ldr	r2, [r7, #12]
 800714e:	4413      	add	r3, r2
                            = (uint16_t)QS_rxPriv_.var.poke.data;
 8007150:	b28a      	uxth	r2, r1
 8007152:	801a      	strh	r2, [r3, #0]
                        break;
 8007154:	e008      	b.n	8007168 <QS_rxHandleGoodFrame_+0x230>
                        ((uint32_t *)ptr)[i] = QS_rxPriv_.var.poke.data;
 8007156:	7ffb      	ldrb	r3, [r7, #31]
 8007158:	009b      	lsls	r3, r3, #2
 800715a:	68fa      	ldr	r2, [r7, #12]
 800715c:	4413      	add	r3, r2
 800715e:	4a4c      	ldr	r2, [pc, #304]	@ (8007290 <QS_rxHandleGoodFrame_+0x358>)
 8007160:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007162:	601a      	str	r2, [r3, #0]
                        break;
 8007164:	e000      	b.n	8007168 <QS_rxHandleGoodFrame_+0x230>
                        break;
 8007166:	bf00      	nop
            for (i = 0U; i < QS_rxPriv_.var.poke.num; ++i) {
 8007168:	7ffb      	ldrb	r3, [r7, #31]
 800716a:	3301      	adds	r3, #1
 800716c:	77fb      	strb	r3, [r7, #31]
 800716e:	4b48      	ldr	r3, [pc, #288]	@ (8007290 <QS_rxHandleGoodFrame_+0x358>)
 8007170:	f893 3037 	ldrb.w	r3, [r3, #55]	@ 0x37
 8007174:	7ffa      	ldrb	r2, [r7, #31]
 8007176:	429a      	cmp	r2, r3
 8007178:	d3d0      	bcc.n	800711c <QS_rxHandleGoodFrame_+0x1e4>
                }
            }
            break;
 800717a:	e16d      	b.n	8007458 <QS_rxHandleGoodFrame_+0x520>
        }
        case WAIT4_FILTER_FRAME: {
            QS_rxReportAck_(QS_rxPriv_.var.flt.recId);
 800717c:	4b44      	ldr	r3, [pc, #272]	@ (8007290 <QS_rxHandleGoodFrame_+0x358>)
 800717e:	f993 3041 	ldrsb.w	r3, [r3, #65]	@ 0x41
 8007182:	4618      	mov	r0, r3
 8007184:	f000 f998 	bl	80074b8 <QS_rxReportAck_>

            // apply the received filters
            if (QS_rxPriv_.var.flt.recId == (int8_t)QS_RX_GLB_FILTER) {
 8007188:	4b41      	ldr	r3, [pc, #260]	@ (8007290 <QS_rxHandleGoodFrame_+0x358>)
 800718a:	f993 3041 	ldrsb.w	r3, [r3, #65]	@ 0x41
 800718e:	2b0a      	cmp	r3, #10
 8007190:	d12d      	bne.n	80071ee <QS_rxHandleGoodFrame_+0x2b6>
                for (i = 0U; i < Q_DIM(QS_filt_.glb); ++i) {
 8007192:	2300      	movs	r3, #0
 8007194:	77fb      	strb	r3, [r7, #31]
 8007196:	e00a      	b.n	80071ae <QS_rxHandleGoodFrame_+0x276>
                    QS_filt_.glb[i] = QS_rxPriv_.var.flt.data[i];
 8007198:	7ffa      	ldrb	r2, [r7, #31]
 800719a:	7ffb      	ldrb	r3, [r7, #31]
 800719c:	493c      	ldr	r1, [pc, #240]	@ (8007290 <QS_rxHandleGoodFrame_+0x358>)
 800719e:	440a      	add	r2, r1
 80071a0:	f892 1030 	ldrb.w	r1, [r2, #48]	@ 0x30
 80071a4:	4a3b      	ldr	r2, [pc, #236]	@ (8007294 <QS_rxHandleGoodFrame_+0x35c>)
 80071a6:	54d1      	strb	r1, [r2, r3]
                for (i = 0U; i < Q_DIM(QS_filt_.glb); ++i) {
 80071a8:	7ffb      	ldrb	r3, [r7, #31]
 80071aa:	3301      	adds	r3, #1
 80071ac:	77fb      	strb	r3, [r7, #31]
 80071ae:	7ffb      	ldrb	r3, [r7, #31]
 80071b0:	2b0f      	cmp	r3, #15
 80071b2:	d9f1      	bls.n	8007198 <QS_rxHandleGoodFrame_+0x260>
                }
                // leave the "not maskable" filters enabled,
                // see qs.h, Miscellaneous QS records (not maskable)
                QS_filt_.glb[0] |= 0x01U;
 80071b4:	4b37      	ldr	r3, [pc, #220]	@ (8007294 <QS_rxHandleGoodFrame_+0x35c>)
 80071b6:	781b      	ldrb	r3, [r3, #0]
 80071b8:	f043 0301 	orr.w	r3, r3, #1
 80071bc:	b2da      	uxtb	r2, r3
 80071be:	4b35      	ldr	r3, [pc, #212]	@ (8007294 <QS_rxHandleGoodFrame_+0x35c>)
 80071c0:	701a      	strb	r2, [r3, #0]
                QS_filt_.glb[7] |= 0xFCU;
 80071c2:	4b34      	ldr	r3, [pc, #208]	@ (8007294 <QS_rxHandleGoodFrame_+0x35c>)
 80071c4:	79db      	ldrb	r3, [r3, #7]
 80071c6:	f063 0303 	orn	r3, r3, #3
 80071ca:	b2da      	uxtb	r2, r3
 80071cc:	4b31      	ldr	r3, [pc, #196]	@ (8007294 <QS_rxHandleGoodFrame_+0x35c>)
 80071ce:	71da      	strb	r2, [r3, #7]
                QS_filt_.glb[8] |= 0x7FU;
 80071d0:	4b30      	ldr	r3, [pc, #192]	@ (8007294 <QS_rxHandleGoodFrame_+0x35c>)
 80071d2:	7a1b      	ldrb	r3, [r3, #8]
 80071d4:	f043 037f 	orr.w	r3, r3, #127	@ 0x7f
 80071d8:	b2da      	uxtb	r2, r3
 80071da:	4b2e      	ldr	r3, [pc, #184]	@ (8007294 <QS_rxHandleGoodFrame_+0x35c>)
 80071dc:	721a      	strb	r2, [r3, #8]

                // never enable the last 3 records (0x7D, 0x7E, 0x7F)
                QS_filt_.glb[15] &= 0x1FU;
 80071de:	4b2d      	ldr	r3, [pc, #180]	@ (8007294 <QS_rxHandleGoodFrame_+0x35c>)
 80071e0:	7bdb      	ldrb	r3, [r3, #15]
 80071e2:	f003 031f 	and.w	r3, r3, #31
 80071e6:	b2da      	uxtb	r2, r3
 80071e8:	4b2a      	ldr	r3, [pc, #168]	@ (8007294 <QS_rxHandleGoodFrame_+0x35c>)
 80071ea:	73da      	strb	r2, [r3, #15]
            }
            else {
                QS_rxReportError_(QS_rxPriv_.var.flt.recId);
            }
            // no need to report Done
            break;
 80071ec:	e134      	b.n	8007458 <QS_rxHandleGoodFrame_+0x520>
            else if (QS_rxPriv_.var.flt.recId == (int8_t)QS_RX_LOC_FILTER) {
 80071ee:	4b28      	ldr	r3, [pc, #160]	@ (8007290 <QS_rxHandleGoodFrame_+0x358>)
 80071f0:	f993 3041 	ldrsb.w	r3, [r3, #65]	@ 0x41
 80071f4:	2b0b      	cmp	r3, #11
 80071f6:	d11a      	bne.n	800722e <QS_rxHandleGoodFrame_+0x2f6>
                for (i = 0U; i < Q_DIM(QS_filt_.loc); ++i) {
 80071f8:	2300      	movs	r3, #0
 80071fa:	77fb      	strb	r3, [r7, #31]
 80071fc:	e00c      	b.n	8007218 <QS_rxHandleGoodFrame_+0x2e0>
                    QS_filt_.loc[i] = QS_rxPriv_.var.flt.data[i];
 80071fe:	7ffa      	ldrb	r2, [r7, #31]
 8007200:	7ffb      	ldrb	r3, [r7, #31]
 8007202:	4923      	ldr	r1, [pc, #140]	@ (8007290 <QS_rxHandleGoodFrame_+0x358>)
 8007204:	440a      	add	r2, r1
 8007206:	f892 1030 	ldrb.w	r1, [r2, #48]	@ 0x30
 800720a:	4a22      	ldr	r2, [pc, #136]	@ (8007294 <QS_rxHandleGoodFrame_+0x35c>)
 800720c:	4413      	add	r3, r2
 800720e:	460a      	mov	r2, r1
 8007210:	741a      	strb	r2, [r3, #16]
                for (i = 0U; i < Q_DIM(QS_filt_.loc); ++i) {
 8007212:	7ffb      	ldrb	r3, [r7, #31]
 8007214:	3301      	adds	r3, #1
 8007216:	77fb      	strb	r3, [r7, #31]
 8007218:	7ffb      	ldrb	r3, [r7, #31]
 800721a:	2b0f      	cmp	r3, #15
 800721c:	d9ef      	bls.n	80071fe <QS_rxHandleGoodFrame_+0x2c6>
                QS_filt_.loc[0] |= 0x01U;
 800721e:	4b1d      	ldr	r3, [pc, #116]	@ (8007294 <QS_rxHandleGoodFrame_+0x35c>)
 8007220:	7c1b      	ldrb	r3, [r3, #16]
 8007222:	f043 0301 	orr.w	r3, r3, #1
 8007226:	b2da      	uxtb	r2, r3
 8007228:	4b1a      	ldr	r3, [pc, #104]	@ (8007294 <QS_rxHandleGoodFrame_+0x35c>)
 800722a:	741a      	strb	r2, [r3, #16]
            break;
 800722c:	e114      	b.n	8007458 <QS_rxHandleGoodFrame_+0x520>
                QS_rxReportError_(QS_rxPriv_.var.flt.recId);
 800722e:	4b18      	ldr	r3, [pc, #96]	@ (8007290 <QS_rxHandleGoodFrame_+0x358>)
 8007230:	f993 3041 	ldrsb.w	r3, [r3, #65]	@ 0x41
 8007234:	4618      	mov	r0, r3
 8007236:	f000 f955 	bl	80074e4 <QS_rxReportError_>
            break;
 800723a:	e10d      	b.n	8007458 <QS_rxHandleGoodFrame_+0x520>
        }
        case WAIT4_OBJ_FRAME: {
            i = QS_rxPriv_.var.obj.kind;
 800723c:	4b14      	ldr	r3, [pc, #80]	@ (8007290 <QS_rxHandleGoodFrame_+0x358>)
 800723e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007242:	77fb      	strb	r3, [r7, #31]
            if (i < (uint8_t)MAX_OBJ) {
 8007244:	7ffb      	ldrb	r3, [r7, #31]
 8007246:	2b05      	cmp	r3, #5
 8007248:	d839      	bhi.n	80072be <QS_rxHandleGoodFrame_+0x386>
                if (QS_rxPriv_.var.obj.recId == (int8_t)QS_RX_CURR_OBJ) {
 800724a:	4b11      	ldr	r3, [pc, #68]	@ (8007290 <QS_rxHandleGoodFrame_+0x358>)
 800724c:	f993 3036 	ldrsb.w	r3, [r3, #54]	@ 0x36
 8007250:	2b0d      	cmp	r3, #13
 8007252:	d10a      	bne.n	800726a <QS_rxHandleGoodFrame_+0x332>
                    QS_rxPriv_.currObj[i] = (void *)QS_rxPriv_.var.obj.addr;
 8007254:	4b0e      	ldr	r3, [pc, #56]	@ (8007290 <QS_rxHandleGoodFrame_+0x358>)
 8007256:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007258:	7ffb      	ldrb	r3, [r7, #31]
 800725a:	4611      	mov	r1, r2
 800725c:	4a0c      	ldr	r2, [pc, #48]	@ (8007290 <QS_rxHandleGoodFrame_+0x358>)
 800725e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    QS_rxReportAck_((int8_t)QS_RX_CURR_OBJ);
 8007262:	200d      	movs	r0, #13
 8007264:	f000 f928 	bl	80074b8 <QS_rxReportAck_>
                QS_rxReportAck_(QS_rxPriv_.var.obj.recId);
            }
            else {
                QS_rxReportError_(QS_rxPriv_.var.obj.recId);
            }
            break;
 8007268:	e0f6      	b.n	8007458 <QS_rxHandleGoodFrame_+0x520>
                else if (QS_rxPriv_.var.obj.recId == (int8_t)QS_RX_AO_FILTER) {
 800726a:	4b09      	ldr	r3, [pc, #36]	@ (8007290 <QS_rxHandleGoodFrame_+0x358>)
 800726c:	f993 3036 	ldrsb.w	r3, [r3, #54]	@ 0x36
 8007270:	2b0c      	cmp	r3, #12
 8007272:	d11d      	bne.n	80072b0 <QS_rxHandleGoodFrame_+0x378>
                    if (QS_rxPriv_.var.obj.addr != 0U) {
 8007274:	4b06      	ldr	r3, [pc, #24]	@ (8007290 <QS_rxHandleGoodFrame_+0x358>)
 8007276:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007278:	2b00      	cmp	r3, #0
 800727a:	d015      	beq.n	80072a8 <QS_rxHandleGoodFrame_+0x370>
                           (int_fast16_t)((QActive *)QS_rxPriv_.var.obj.addr)->prio;
 800727c:	4b04      	ldr	r3, [pc, #16]	@ (8007290 <QS_rxHandleGoodFrame_+0x358>)
 800727e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007280:	7b1b      	ldrb	r3, [r3, #12]
                        int_fast16_t const filter =
 8007282:	613b      	str	r3, [r7, #16]
                        QS_locFilter_((i == 0U) ? filter :-filter);
 8007284:	7ffb      	ldrb	r3, [r7, #31]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d006      	beq.n	8007298 <QS_rxHandleGoodFrame_+0x360>
 800728a:	693b      	ldr	r3, [r7, #16]
 800728c:	425b      	negs	r3, r3
 800728e:	e004      	b.n	800729a <QS_rxHandleGoodFrame_+0x362>
 8007290:	20000abc 	.word	0x20000abc
 8007294:	20000a84 	.word	0x20000a84
 8007298:	693b      	ldr	r3, [r7, #16]
 800729a:	4618      	mov	r0, r3
 800729c:	f7fe f9b0 	bl	8005600 <QS_locFilter_>
                        QS_rxReportAck_((int8_t)QS_RX_AO_FILTER);
 80072a0:	200c      	movs	r0, #12
 80072a2:	f000 f909 	bl	80074b8 <QS_rxReportAck_>
            break;
 80072a6:	e0d7      	b.n	8007458 <QS_rxHandleGoodFrame_+0x520>
                        QS_rxReportError_((int8_t)QS_RX_AO_FILTER);
 80072a8:	200c      	movs	r0, #12
 80072aa:	f000 f91b 	bl	80074e4 <QS_rxReportError_>
            break;
 80072ae:	e0d3      	b.n	8007458 <QS_rxHandleGoodFrame_+0x520>
                    QS_rxReportError_(QS_rxPriv_.var.obj.recId);
 80072b0:	4b6b      	ldr	r3, [pc, #428]	@ (8007460 <QS_rxHandleGoodFrame_+0x528>)
 80072b2:	f993 3036 	ldrsb.w	r3, [r3, #54]	@ 0x36
 80072b6:	4618      	mov	r0, r3
 80072b8:	f000 f914 	bl	80074e4 <QS_rxReportError_>
            break;
 80072bc:	e0cc      	b.n	8007458 <QS_rxHandleGoodFrame_+0x520>
            else if (i == (uint8_t)SM_AO_OBJ) {
 80072be:	7ffb      	ldrb	r3, [r7, #31]
 80072c0:	2b06      	cmp	r3, #6
 80072c2:	d115      	bne.n	80072f0 <QS_rxHandleGoodFrame_+0x3b8>
                if (QS_rxPriv_.var.obj.recId == (int8_t)QS_RX_CURR_OBJ) {
 80072c4:	4b66      	ldr	r3, [pc, #408]	@ (8007460 <QS_rxHandleGoodFrame_+0x528>)
 80072c6:	f993 3036 	ldrsb.w	r3, [r3, #54]	@ 0x36
 80072ca:	2b0d      	cmp	r3, #13
 80072cc:	d109      	bne.n	80072e2 <QS_rxHandleGoodFrame_+0x3aa>
                    QS_rxPriv_.currObj[SM_OBJ] = (void *)QS_rxPriv_.var.obj.addr;
 80072ce:	4b64      	ldr	r3, [pc, #400]	@ (8007460 <QS_rxHandleGoodFrame_+0x528>)
 80072d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072d2:	461a      	mov	r2, r3
 80072d4:	4b62      	ldr	r3, [pc, #392]	@ (8007460 <QS_rxHandleGoodFrame_+0x528>)
 80072d6:	601a      	str	r2, [r3, #0]
                    QS_rxPriv_.currObj[AO_OBJ] = (void *)QS_rxPriv_.var.obj.addr;
 80072d8:	4b61      	ldr	r3, [pc, #388]	@ (8007460 <QS_rxHandleGoodFrame_+0x528>)
 80072da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072dc:	461a      	mov	r2, r3
 80072de:	4b60      	ldr	r3, [pc, #384]	@ (8007460 <QS_rxHandleGoodFrame_+0x528>)
 80072e0:	605a      	str	r2, [r3, #4]
                QS_rxReportAck_(QS_rxPriv_.var.obj.recId);
 80072e2:	4b5f      	ldr	r3, [pc, #380]	@ (8007460 <QS_rxHandleGoodFrame_+0x528>)
 80072e4:	f993 3036 	ldrsb.w	r3, [r3, #54]	@ 0x36
 80072e8:	4618      	mov	r0, r3
 80072ea:	f000 f8e5 	bl	80074b8 <QS_rxReportAck_>
            break;
 80072ee:	e0b3      	b.n	8007458 <QS_rxHandleGoodFrame_+0x520>
                QS_rxReportError_(QS_rxPriv_.var.obj.recId);
 80072f0:	4b5b      	ldr	r3, [pc, #364]	@ (8007460 <QS_rxHandleGoodFrame_+0x528>)
 80072f2:	f993 3036 	ldrsb.w	r3, [r3, #54]	@ 0x36
 80072f6:	4618      	mov	r0, r3
 80072f8:	f000 f8f4 	bl	80074e4 <QS_rxReportError_>
            break;
 80072fc:	e0ac      	b.n	8007458 <QS_rxHandleGoodFrame_+0x520>
        }
        case WAIT4_QUERY_FRAME: {
            QS_queryCurrObj(QS_rxPriv_.var.obj.kind);
 80072fe:	4b58      	ldr	r3, [pc, #352]	@ (8007460 <QS_rxHandleGoodFrame_+0x528>)
 8007300:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007304:	4618      	mov	r0, r3
 8007306:	f000 f923 	bl	8007550 <QS_queryCurrObj>
            break;
 800730a:	e0a5      	b.n	8007458 <QS_rxHandleGoodFrame_+0x520>
        case WAIT4_EVT_FRAME: {
            // NOTE: Ack was already reported in the WAIT4_EVT_LEN state
#ifdef Q_UTEST
            QS_onTestEvt(QS_rxPriv_.var.evt.e); // adjust the event, if needed
#endif // Q_UTEST
            i = 0U; // use 'i' as status, 0 == success,no-recycle
 800730c:	2300      	movs	r3, #0
 800730e:	77fb      	strb	r3, [r7, #31]

            if (QS_rxPriv_.var.evt.prio == 0U) { // publish
 8007310:	4b53      	ldr	r3, [pc, #332]	@ (8007460 <QS_rxHandleGoodFrame_+0x528>)
 8007312:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007316:	2b00      	cmp	r3, #0
 8007318:	d107      	bne.n	800732a <QS_rxHandleGoodFrame_+0x3f2>
                QActive_publish_(QS_rxPriv_.var.evt.e, &QS_rxPriv_, 0U);
 800731a:	4b51      	ldr	r3, [pc, #324]	@ (8007460 <QS_rxHandleGoodFrame_+0x528>)
 800731c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800731e:	2200      	movs	r2, #0
 8007320:	494f      	ldr	r1, [pc, #316]	@ (8007460 <QS_rxHandleGoodFrame_+0x528>)
 8007322:	4618      	mov	r0, r3
 8007324:	f7fc fe96 	bl	8004054 <QActive_publish_>
 8007328:	e07b      	b.n	8007422 <QS_rxHandleGoodFrame_+0x4ea>
            }
            else if (QS_rxPriv_.var.evt.prio < QF_MAX_ACTIVE) {
 800732a:	4b4d      	ldr	r3, [pc, #308]	@ (8007460 <QS_rxHandleGoodFrame_+0x528>)
 800732c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007330:	2b1f      	cmp	r3, #31
 8007332:	d815      	bhi.n	8007360 <QS_rxHandleGoodFrame_+0x428>
                if (!QACTIVE_POST_X(QActive_registry_[QS_rxPriv_.var.evt.prio],
 8007334:	4b4a      	ldr	r3, [pc, #296]	@ (8007460 <QS_rxHandleGoodFrame_+0x528>)
 8007336:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800733a:	461a      	mov	r2, r3
 800733c:	4b49      	ldr	r3, [pc, #292]	@ (8007464 <QS_rxHandleGoodFrame_+0x52c>)
 800733e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8007342:	4b47      	ldr	r3, [pc, #284]	@ (8007460 <QS_rxHandleGoodFrame_+0x528>)
 8007344:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8007346:	4b46      	ldr	r3, [pc, #280]	@ (8007460 <QS_rxHandleGoodFrame_+0x528>)
 8007348:	2200      	movs	r2, #0
 800734a:	f7fb fffb 	bl	8003344 <QActive_post_>
 800734e:	4603      	mov	r3, r0
 8007350:	f083 0301 	eor.w	r3, r3, #1
 8007354:	b2db      	uxtb	r3, r3
 8007356:	2b00      	cmp	r3, #0
 8007358:	d063      	beq.n	8007422 <QS_rxHandleGoodFrame_+0x4ea>
                               QS_rxPriv_.var.evt.e,
                               0U, // margin
                               &QS_rxPriv_))
                {
                    // failed QACTIVE_POST() recycles the event
                    i = 0x80U; // failure status, no recycle
 800735a:	2380      	movs	r3, #128	@ 0x80
 800735c:	77fb      	strb	r3, [r7, #31]
 800735e:	e060      	b.n	8007422 <QS_rxHandleGoodFrame_+0x4ea>
                }
            }
            else if (QS_rxPriv_.var.evt.prio == 255U) { // special prio
 8007360:	4b3f      	ldr	r3, [pc, #252]	@ (8007460 <QS_rxHandleGoodFrame_+0x528>)
 8007362:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007366:	2bff      	cmp	r3, #255	@ 0xff
 8007368:	d11b      	bne.n	80073a2 <QS_rxHandleGoodFrame_+0x46a>
                // dispatch to the current SM object
                if (QS_rxPriv_.currObj[SM_OBJ] != (void *)0) {
 800736a:	4b3d      	ldr	r3, [pc, #244]	@ (8007460 <QS_rxHandleGoodFrame_+0x528>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d014      	beq.n	800739c <QS_rxHandleGoodFrame_+0x464>
                    // increment the ref-ctr to simulate the situation
                    // when the event is just retrieved from a queue.
                    // This is expected for the following QF_gc() call.
                    ++QS_rxPriv_.var.evt.e->refCtr_;
 8007372:	4b3b      	ldr	r3, [pc, #236]	@ (8007460 <QS_rxHandleGoodFrame_+0x528>)
 8007374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007376:	789a      	ldrb	r2, [r3, #2]
 8007378:	b2d2      	uxtb	r2, r2
 800737a:	3201      	adds	r2, #1
 800737c:	b2d2      	uxtb	r2, r2
 800737e:	709a      	strb	r2, [r3, #2]

                    QAsm * const sm = (QAsm *)QS_rxPriv_.currObj[SM_OBJ];
 8007380:	4b37      	ldr	r3, [pc, #220]	@ (8007460 <QS_rxHandleGoodFrame_+0x528>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	617b      	str	r3, [r7, #20]
                    (*sm->vptr->dispatch)(sm, QS_rxPriv_.var.evt.e, 0U);
 8007386:	697b      	ldr	r3, [r7, #20]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	685b      	ldr	r3, [r3, #4]
 800738c:	4a34      	ldr	r2, [pc, #208]	@ (8007460 <QS_rxHandleGoodFrame_+0x528>)
 800738e:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8007390:	2200      	movs	r2, #0
 8007392:	6978      	ldr	r0, [r7, #20]
 8007394:	4798      	blx	r3
                    i = 0x01U;  // success status, recycle needed
 8007396:	2301      	movs	r3, #1
 8007398:	77fb      	strb	r3, [r7, #31]
 800739a:	e042      	b.n	8007422 <QS_rxHandleGoodFrame_+0x4ea>
                }
                else {
                    i = 0x81U;  // failure status, recycle needed
 800739c:	2381      	movs	r3, #129	@ 0x81
 800739e:	77fb      	strb	r3, [r7, #31]
 80073a0:	e03f      	b.n	8007422 <QS_rxHandleGoodFrame_+0x4ea>
                }
            }
            else if (QS_rxPriv_.var.evt.prio == 254U) { // special prio
 80073a2:	4b2f      	ldr	r3, [pc, #188]	@ (8007460 <QS_rxHandleGoodFrame_+0x528>)
 80073a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80073a8:	2bfe      	cmp	r3, #254	@ 0xfe
 80073aa:	d11b      	bne.n	80073e4 <QS_rxHandleGoodFrame_+0x4ac>
                // init the current SM object"
                if (QS_rxPriv_.currObj[SM_OBJ] != (void *)0) {
 80073ac:	4b2c      	ldr	r3, [pc, #176]	@ (8007460 <QS_rxHandleGoodFrame_+0x528>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d014      	beq.n	80073de <QS_rxHandleGoodFrame_+0x4a6>
                    // increment the ref-ctr to simulate the situation
                    // when the event is just retrieved from a queue.
                    // This is expected for the following QF_gc() call.
                    ++QS_rxPriv_.var.evt.e->refCtr_;
 80073b4:	4b2a      	ldr	r3, [pc, #168]	@ (8007460 <QS_rxHandleGoodFrame_+0x528>)
 80073b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073b8:	789a      	ldrb	r2, [r3, #2]
 80073ba:	b2d2      	uxtb	r2, r2
 80073bc:	3201      	adds	r2, #1
 80073be:	b2d2      	uxtb	r2, r2
 80073c0:	709a      	strb	r2, [r3, #2]

                    QAsm * const sm = (QAsm *)QS_rxPriv_.currObj[SM_OBJ];
 80073c2:	4b27      	ldr	r3, [pc, #156]	@ (8007460 <QS_rxHandleGoodFrame_+0x528>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	61bb      	str	r3, [r7, #24]
                    (*sm->vptr->init)(sm, QS_rxPriv_.var.evt.e, 0U);
 80073c8:	69bb      	ldr	r3, [r7, #24]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	4a24      	ldr	r2, [pc, #144]	@ (8007460 <QS_rxHandleGoodFrame_+0x528>)
 80073d0:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 80073d2:	2200      	movs	r2, #0
 80073d4:	69b8      	ldr	r0, [r7, #24]
 80073d6:	4798      	blx	r3
                    i = 0x01U;  // success status, recycle needed
 80073d8:	2301      	movs	r3, #1
 80073da:	77fb      	strb	r3, [r7, #31]
 80073dc:	e021      	b.n	8007422 <QS_rxHandleGoodFrame_+0x4ea>
                }
                else {
                    i = 0x81U;  // failure status, recycle needed
 80073de:	2381      	movs	r3, #129	@ 0x81
 80073e0:	77fb      	strb	r3, [r7, #31]
 80073e2:	e01e      	b.n	8007422 <QS_rxHandleGoodFrame_+0x4ea>
                }
            }
            else if (QS_rxPriv_.var.evt.prio == 253U) { // special prio
 80073e4:	4b1e      	ldr	r3, [pc, #120]	@ (8007460 <QS_rxHandleGoodFrame_+0x528>)
 80073e6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80073ea:	2bfd      	cmp	r3, #253	@ 0xfd
 80073ec:	d117      	bne.n	800741e <QS_rxHandleGoodFrame_+0x4e6>
                // post to the current AO
                if (QS_rxPriv_.currObj[AO_OBJ] != (void *)0) {
 80073ee:	4b1c      	ldr	r3, [pc, #112]	@ (8007460 <QS_rxHandleGoodFrame_+0x528>)
 80073f0:	685b      	ldr	r3, [r3, #4]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d010      	beq.n	8007418 <QS_rxHandleGoodFrame_+0x4e0>
                    if (!QACTIVE_POST_X(
 80073f6:	4b1a      	ldr	r3, [pc, #104]	@ (8007460 <QS_rxHandleGoodFrame_+0x528>)
 80073f8:	6858      	ldr	r0, [r3, #4]
 80073fa:	4b19      	ldr	r3, [pc, #100]	@ (8007460 <QS_rxHandleGoodFrame_+0x528>)
 80073fc:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80073fe:	4b18      	ldr	r3, [pc, #96]	@ (8007460 <QS_rxHandleGoodFrame_+0x528>)
 8007400:	2200      	movs	r2, #0
 8007402:	f7fb ff9f 	bl	8003344 <QActive_post_>
 8007406:	4603      	mov	r3, r0
 8007408:	f083 0301 	eor.w	r3, r3, #1
 800740c:	b2db      	uxtb	r3, r3
 800740e:	2b00      	cmp	r3, #0
 8007410:	d007      	beq.n	8007422 <QS_rxHandleGoodFrame_+0x4ea>
                            QS_rxPriv_.var.evt.e,
                            0U, // margin
                            &QS_rxPriv_))
                    {
                        // failed QACTIVE_POST() recycles the event
                        i = 0x80U;  // failure status, no recycle
 8007412:	2380      	movs	r3, #128	@ 0x80
 8007414:	77fb      	strb	r3, [r7, #31]
 8007416:	e004      	b.n	8007422 <QS_rxHandleGoodFrame_+0x4ea>
                    }
                }
                else {
                    i = 0x81U;  // failure status, recycle needed
 8007418:	2381      	movs	r3, #129	@ 0x81
 800741a:	77fb      	strb	r3, [r7, #31]
 800741c:	e001      	b.n	8007422 <QS_rxHandleGoodFrame_+0x4ea>
                }
            }
            else {
                i = 0x81U;  // failure status, recycle needed
 800741e:	2381      	movs	r3, #129	@ 0x81
 8007420:	77fb      	strb	r3, [r7, #31]
            }

#if (QF_MAX_EPOOL > 0U)
            if ((i & 0x01U) != 0U) { // recycle needed?
 8007422:	7ffb      	ldrb	r3, [r7, #31]
 8007424:	f003 0301 	and.w	r3, r3, #1
 8007428:	2b00      	cmp	r3, #0
 800742a:	d004      	beq.n	8007436 <QS_rxHandleGoodFrame_+0x4fe>
                QF_gc(QS_rxPriv_.var.evt.e);
 800742c:	4b0c      	ldr	r3, [pc, #48]	@ (8007460 <QS_rxHandleGoodFrame_+0x528>)
 800742e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007430:	4618      	mov	r0, r3
 8007432:	f7fc faf7 	bl	8003a24 <QF_gc>
            }
#endif
            if ((i & 0x80U) != 0U) { // failure?
 8007436:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800743a:	2b00      	cmp	r3, #0
 800743c:	da03      	bge.n	8007446 <QS_rxHandleGoodFrame_+0x50e>
                QS_rxReportError_((int8_t)QS_RX_EVENT);
 800743e:	2010      	movs	r0, #16
 8007440:	f000 f850 	bl	80074e4 <QS_rxReportError_>
                QS_processTestEvts_(); // process all events produced
    #endif  // Q_UTEST != 0
#endif  // Q_UTEST
                QS_rxReportDone_((int8_t)QS_RX_EVENT);
            }
            break;
 8007444:	e008      	b.n	8007458 <QS_rxHandleGoodFrame_+0x520>
                QS_rxReportDone_((int8_t)QS_RX_EVENT);
 8007446:	2010      	movs	r0, #16
 8007448:	f000 f865 	bl	8007516 <QS_rxReportDone_>
            break;
 800744c:	e004      	b.n	8007458 <QS_rxHandleGoodFrame_+0x520>
        case ERROR_STATE: {
            // keep ignoring all bytes until new frame
            break;
        }
        default: {
            QS_rxReportError_(0x47);
 800744e:	2047      	movs	r0, #71	@ 0x47
 8007450:	f000 f848 	bl	80074e4 <QS_rxReportError_>
            break;
 8007454:	e000      	b.n	8007458 <QS_rxHandleGoodFrame_+0x520>
            break;
 8007456:	bf00      	nop
        }
    }
}
 8007458:	bf00      	nop
 800745a:	3720      	adds	r7, #32
 800745c:	46bd      	mov	sp, r7
 800745e:	bd80      	pop	{r7, pc}
 8007460:	20000abc 	.word	0x20000abc
 8007464:	20000978 	.word	0x20000978

08007468 <QS_rxHandleBadFrame_>:

//............................................................................
static void QS_rxHandleBadFrame_(uint8_t const state) {
 8007468:	b580      	push	{r7, lr}
 800746a:	b082      	sub	sp, #8
 800746c:	af00      	add	r7, sp, #0
 800746e:	4603      	mov	r3, r0
 8007470:	71fb      	strb	r3, [r7, #7]
    QS_rxReportError_(0x50); // report error for all bad frames
 8007472:	2050      	movs	r0, #80	@ 0x50
 8007474:	f000 f836 	bl	80074e4 <QS_rxReportError_>

    switch (state) {
 8007478:	79fb      	ldrb	r3, [r7, #7]
 800747a:	2b23      	cmp	r3, #35	@ 0x23
 800747c:	d112      	bne.n	80074a4 <QS_rxHandleBadFrame_+0x3c>
        case WAIT4_EVT_FRAME: {
            QS_CRIT_STAT
            QS_CRIT_ENTRY();
 800747e:	f7fa ff8d 	bl	800239c <QF_crit_entry_>
            Q_ASSERT_INCRIT(910, QS_rxPriv_.var.evt.e != (QEvt *)0);
 8007482:	4b0b      	ldr	r3, [pc, #44]	@ (80074b0 <QS_rxHandleBadFrame_+0x48>)
 8007484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007486:	2b00      	cmp	r3, #0
 8007488:	d104      	bne.n	8007494 <QS_rxHandleBadFrame_+0x2c>
 800748a:	f240 318e 	movw	r1, #910	@ 0x38e
 800748e:	4809      	ldr	r0, [pc, #36]	@ (80074b4 <QS_rxHandleBadFrame_+0x4c>)
 8007490:	f7f9 facc 	bl	8000a2c <Q_onError>
            QS_CRIT_EXIT();
 8007494:	f7fa ff94 	bl	80023c0 <QF_crit_exit_>
#if (QF_MAX_EPOOL > 0U)
            QF_gc(QS_rxPriv_.var.evt.e); // don't leak allocated evt
 8007498:	4b05      	ldr	r3, [pc, #20]	@ (80074b0 <QS_rxHandleBadFrame_+0x48>)
 800749a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800749c:	4618      	mov	r0, r3
 800749e:	f7fc fac1 	bl	8003a24 <QF_gc>
#endif
            break;
 80074a2:	e000      	b.n	80074a6 <QS_rxHandleBadFrame_+0x3e>
        }
        default: {
            // intentionally empty
            break;
 80074a4:	bf00      	nop
        }
    }
}
 80074a6:	bf00      	nop
 80074a8:	3708      	adds	r7, #8
 80074aa:	46bd      	mov	sp, r7
 80074ac:	bd80      	pop	{r7, pc}
 80074ae:	bf00      	nop
 80074b0:	20000abc 	.word	0x20000abc
 80074b4:	0800795c 	.word	0x0800795c

080074b8 <QS_rxReportAck_>:

//............................................................................
static void QS_rxReportAck_(int8_t const recId) {
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b082      	sub	sp, #8
 80074bc:	af00      	add	r7, sp, #0
 80074be:	4603      	mov	r3, r0
 80074c0:	71fb      	strb	r3, [r7, #7]
    QS_CRIT_STAT
    QS_CRIT_ENTRY();
 80074c2:	f7fa ff6b 	bl	800239c <QF_crit_entry_>
    QS_MEM_SYS();
    QS_beginRec_((uint_fast8_t)QS_RX_STATUS);
 80074c6:	2042      	movs	r0, #66	@ 0x42
 80074c8:	f7fe f97e 	bl	80057c8 <QS_beginRec_>
        QS_U8_PRE_(recId); // record ID
 80074cc:	79fb      	ldrb	r3, [r7, #7]
 80074ce:	4618      	mov	r0, r3
 80074d0:	f7fe fa74 	bl	80059bc <QS_u8_raw_>
    QS_endRec_();
 80074d4:	f7fe f9f8 	bl	80058c8 <QS_endRec_>
    QS_MEM_APP();
    QS_CRIT_EXIT();
 80074d8:	f7fa ff72 	bl	80023c0 <QF_crit_exit_>
    QS_REC_DONE(); // user callback (if defined)
}
 80074dc:	bf00      	nop
 80074de:	3708      	adds	r7, #8
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bd80      	pop	{r7, pc}

080074e4 <QS_rxReportError_>:

//............................................................................
static void QS_rxReportError_(int8_t const code) {
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b082      	sub	sp, #8
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	4603      	mov	r3, r0
 80074ec:	71fb      	strb	r3, [r7, #7]
    QS_CRIT_STAT
    QS_CRIT_ENTRY();
 80074ee:	f7fa ff55 	bl	800239c <QF_crit_entry_>
    QS_MEM_SYS();
    QS_beginRec_((uint_fast8_t)QS_RX_STATUS);
 80074f2:	2042      	movs	r0, #66	@ 0x42
 80074f4:	f7fe f968 	bl	80057c8 <QS_beginRec_>
        QS_U8_PRE_(0x80U | (uint8_t)code); // error code
 80074f8:	79fb      	ldrb	r3, [r7, #7]
 80074fa:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80074fe:	b2db      	uxtb	r3, r3
 8007500:	4618      	mov	r0, r3
 8007502:	f7fe fa5b 	bl	80059bc <QS_u8_raw_>
    QS_endRec_();
 8007506:	f7fe f9df 	bl	80058c8 <QS_endRec_>
    QS_MEM_APP();
    QS_CRIT_EXIT();
 800750a:	f7fa ff59 	bl	80023c0 <QF_crit_exit_>
    QS_REC_DONE(); // user callback (if defined)
}
 800750e:	bf00      	nop
 8007510:	3708      	adds	r7, #8
 8007512:	46bd      	mov	sp, r7
 8007514:	bd80      	pop	{r7, pc}

08007516 <QS_rxReportDone_>:

//............................................................................
static void QS_rxReportDone_(int8_t const recId) {
 8007516:	b580      	push	{r7, lr}
 8007518:	b082      	sub	sp, #8
 800751a:	af00      	add	r7, sp, #0
 800751c:	4603      	mov	r3, r0
 800751e:	71fb      	strb	r3, [r7, #7]
    QS_CRIT_STAT
    QS_CRIT_ENTRY();
 8007520:	f7fa ff3c 	bl	800239c <QF_crit_entry_>
    QS_MEM_SYS();
    QS_beginRec_((uint_fast8_t)QS_TARGET_DONE);
 8007524:	2041      	movs	r0, #65	@ 0x41
 8007526:	f7fe f94f 	bl	80057c8 <QS_beginRec_>
        QS_TIME_PRE_();    // timestamp
 800752a:	f7f9 f835 	bl	8000598 <QS_onGetTime>
 800752e:	4603      	mov	r3, r0
 8007530:	4618      	mov	r0, r3
 8007532:	f7fe fc05 	bl	8005d40 <QS_u32_raw_>
        QS_U8_PRE_(recId); // record ID
 8007536:	79fb      	ldrb	r3, [r7, #7]
 8007538:	4618      	mov	r0, r3
 800753a:	f7fe fa3f 	bl	80059bc <QS_u8_raw_>
    QS_endRec_();
 800753e:	f7fe f9c3 	bl	80058c8 <QS_endRec_>
    QS_MEM_APP();
    QS_CRIT_EXIT();
 8007542:	f7fa ff3d 	bl	80023c0 <QF_crit_exit_>
    QS_REC_DONE(); // user callback (if defined)
}
 8007546:	bf00      	nop
 8007548:	3708      	adds	r7, #8
 800754a:	46bd      	mov	sp, r7
 800754c:	bd80      	pop	{r7, pc}
	...

08007550 <QS_queryCurrObj>:

//............................................................................
static void QS_queryCurrObj(uint8_t const obj_kind) {
 8007550:	b580      	push	{r7, lr}
 8007552:	b082      	sub	sp, #8
 8007554:	af00      	add	r7, sp, #0
 8007556:	4603      	mov	r3, r0
 8007558:	71fb      	strb	r3, [r7, #7]
    QS_CRIT_STAT
    QS_CRIT_ENTRY();
 800755a:	f7fa ff1f 	bl	800239c <QF_crit_entry_>
    Q_REQUIRE_INCRIT(800, obj_kind < Q_DIM(QS_rxPriv_.currObj));
 800755e:	79fb      	ldrb	r3, [r7, #7]
 8007560:	2b07      	cmp	r3, #7
 8007562:	d904      	bls.n	800756e <QS_queryCurrObj+0x1e>
 8007564:	f44f 7148 	mov.w	r1, #800	@ 0x320
 8007568:	484e      	ldr	r0, [pc, #312]	@ (80076a4 <QS_queryCurrObj+0x154>)
 800756a:	f7f9 fa5f 	bl	8000a2c <Q_onError>
    QS_CRIT_EXIT();
 800756e:	f7fa ff27 	bl	80023c0 <QF_crit_exit_>

    if (QS_rxPriv_.currObj[obj_kind] != (void *)0) {
 8007572:	79fb      	ldrb	r3, [r7, #7]
 8007574:	4a4c      	ldr	r2, [pc, #304]	@ (80076a8 <QS_queryCurrObj+0x158>)
 8007576:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800757a:	2b00      	cmp	r3, #0
 800757c:	f000 808b 	beq.w	8007696 <QS_queryCurrObj+0x146>
        QS_CRIT_ENTRY();
 8007580:	f7fa ff0c 	bl	800239c <QF_crit_entry_>
        QS_MEM_SYS();
        QS_beginRec_((uint_fast8_t)QS_QUERY_DATA);
 8007584:	2043      	movs	r0, #67	@ 0x43
 8007586:	f7fe f91f 	bl	80057c8 <QS_beginRec_>
            QS_TIME_PRE_();       // timestamp
 800758a:	f7f9 f805 	bl	8000598 <QS_onGetTime>
 800758e:	4603      	mov	r3, r0
 8007590:	4618      	mov	r0, r3
 8007592:	f7fe fbd5 	bl	8005d40 <QS_u32_raw_>
            QS_U8_PRE_(obj_kind); // object kind
 8007596:	79fb      	ldrb	r3, [r7, #7]
 8007598:	4618      	mov	r0, r3
 800759a:	f7fe fa0f 	bl	80059bc <QS_u8_raw_>
            QS_OBJ_PRE_(QS_rxPriv_.currObj[obj_kind]);
 800759e:	79fb      	ldrb	r3, [r7, #7]
 80075a0:	4a41      	ldr	r2, [pc, #260]	@ (80076a8 <QS_queryCurrObj+0x158>)
 80075a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80075a6:	4618      	mov	r0, r3
 80075a8:	f7fe fc42 	bl	8005e30 <QS_obj_raw_>
            switch (obj_kind) {
 80075ac:	79fb      	ldrb	r3, [r7, #7]
 80075ae:	2b04      	cmp	r3, #4
 80075b0:	d86b      	bhi.n	800768a <QS_queryCurrObj+0x13a>
 80075b2:	a201      	add	r2, pc, #4	@ (adr r2, 80075b8 <QS_queryCurrObj+0x68>)
 80075b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075b8:	080075cd 	.word	0x080075cd
 80075bc:	080075cd 	.word	0x080075cd
 80075c0:	080075ef 	.word	0x080075ef
 80075c4:	08007613 	.word	0x08007613
 80075c8:	08007637 	.word	0x08007637
                case (uint8_t)SM_OBJ: // intentionally fall through
                case (uint8_t)AO_OBJ:
                    QS_FUN_PRE_((*((QAsm *)QS_rxPriv_.currObj[obj_kind])->vptr
 80075cc:	79fb      	ldrb	r3, [r7, #7]
 80075ce:	4a36      	ldr	r2, [pc, #216]	@ (80076a8 <QS_queryCurrObj+0x158>)
 80075d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	68db      	ldr	r3, [r3, #12]
 80075d8:	79fa      	ldrb	r2, [r7, #7]
 80075da:	4933      	ldr	r1, [pc, #204]	@ (80076a8 <QS_queryCurrObj+0x158>)
 80075dc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80075e0:	4610      	mov	r0, r2
 80075e2:	4798      	blx	r3
 80075e4:	4603      	mov	r3, r0
 80075e6:	4618      	mov	r0, r3
 80075e8:	f7fe fbaa 	bl	8005d40 <QS_u32_raw_>
                                ->getStateHandler)(
                                     ((QAsm *)QS_rxPriv_.currObj[obj_kind])));
                    break;
 80075ec:	e04e      	b.n	800768c <QS_queryCurrObj+0x13c>
                case (uint8_t)MP_OBJ:
                    QS_MPC_PRE_(((QMPool *)QS_rxPriv_.currObj[obj_kind])
 80075ee:	79fb      	ldrb	r3, [r7, #7]
 80075f0:	4a2d      	ldr	r2, [pc, #180]	@ (80076a8 <QS_queryCurrObj+0x158>)
 80075f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80075f6:	8a1b      	ldrh	r3, [r3, #16]
 80075f8:	b29b      	uxth	r3, r3
 80075fa:	4618      	mov	r0, r3
 80075fc:	f7fe faec 	bl	8005bd8 <QS_u16_raw_>
                                ->nFree);
                    QS_MPC_PRE_(((QMPool *)QS_rxPriv_.currObj[obj_kind])
 8007600:	79fb      	ldrb	r3, [r7, #7]
 8007602:	4a29      	ldr	r2, [pc, #164]	@ (80076a8 <QS_queryCurrObj+0x158>)
 8007604:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007608:	8a5b      	ldrh	r3, [r3, #18]
 800760a:	4618      	mov	r0, r3
 800760c:	f7fe fae4 	bl	8005bd8 <QS_u16_raw_>
                                ->nMin);
                    break;
 8007610:	e03c      	b.n	800768c <QS_queryCurrObj+0x13c>
                case (uint8_t)EQ_OBJ:
                    QS_EQC_PRE_(((QEQueue *)QS_rxPriv_.currObj[obj_kind])
 8007612:	79fb      	ldrb	r3, [r7, #7]
 8007614:	4a24      	ldr	r2, [pc, #144]	@ (80076a8 <QS_queryCurrObj+0x158>)
 8007616:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800761a:	7adb      	ldrb	r3, [r3, #11]
 800761c:	b2db      	uxtb	r3, r3
 800761e:	4618      	mov	r0, r3
 8007620:	f7fe f9cc 	bl	80059bc <QS_u8_raw_>
                                ->nFree);
                    QS_EQC_PRE_(((QEQueue *)QS_rxPriv_.currObj[obj_kind])
 8007624:	79fb      	ldrb	r3, [r7, #7]
 8007626:	4a20      	ldr	r2, [pc, #128]	@ (80076a8 <QS_queryCurrObj+0x158>)
 8007628:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800762c:	7b1b      	ldrb	r3, [r3, #12]
 800762e:	4618      	mov	r0, r3
 8007630:	f7fe f9c4 	bl	80059bc <QS_u8_raw_>
                                ->nMin);
                    break;
 8007634:	e02a      	b.n	800768c <QS_queryCurrObj+0x13c>
                case (uint8_t)TE_OBJ:
                    QS_OBJ_PRE_(((QTimeEvt *)QS_rxPriv_.currObj[obj_kind])
 8007636:	79fb      	ldrb	r3, [r7, #7]
 8007638:	4a1b      	ldr	r2, [pc, #108]	@ (80076a8 <QS_queryCurrObj+0x158>)
 800763a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800763e:	689b      	ldr	r3, [r3, #8]
 8007640:	4618      	mov	r0, r3
 8007642:	f7fe fbf5 	bl	8005e30 <QS_obj_raw_>
                                ->act);
                    QS_TEC_PRE_(((QTimeEvt *)QS_rxPriv_.currObj[obj_kind])
 8007646:	79fb      	ldrb	r3, [r7, #7]
 8007648:	4a17      	ldr	r2, [pc, #92]	@ (80076a8 <QS_queryCurrObj+0x158>)
 800764a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800764e:	68db      	ldr	r3, [r3, #12]
 8007650:	4618      	mov	r0, r3
 8007652:	f7fe fb75 	bl	8005d40 <QS_u32_raw_>
                                ->ctr);
                    QS_TEC_PRE_(((QTimeEvt *)QS_rxPriv_.currObj[obj_kind])
 8007656:	79fb      	ldrb	r3, [r7, #7]
 8007658:	4a13      	ldr	r2, [pc, #76]	@ (80076a8 <QS_queryCurrObj+0x158>)
 800765a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800765e:	691b      	ldr	r3, [r3, #16]
 8007660:	4618      	mov	r0, r3
 8007662:	f7fe fb6d 	bl	8005d40 <QS_u32_raw_>
                                ->interval);
                    QS_SIG_PRE_(((QTimeEvt *)QS_rxPriv_.currObj[obj_kind])
 8007666:	79fb      	ldrb	r3, [r7, #7]
 8007668:	4a0f      	ldr	r2, [pc, #60]	@ (80076a8 <QS_queryCurrObj+0x158>)
 800766a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800766e:	881b      	ldrh	r3, [r3, #0]
 8007670:	4618      	mov	r0, r3
 8007672:	f7fe fab1 	bl	8005bd8 <QS_u16_raw_>
                                ->super.sig);
                    QS_U8_PRE_ (((QTimeEvt *)QS_rxPriv_.currObj[obj_kind])
 8007676:	79fb      	ldrb	r3, [r7, #7]
 8007678:	4a0b      	ldr	r2, [pc, #44]	@ (80076a8 <QS_queryCurrObj+0x158>)
 800767a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800767e:	789b      	ldrb	r3, [r3, #2]
 8007680:	b2db      	uxtb	r3, r3
 8007682:	4618      	mov	r0, r3
 8007684:	f7fe f99a 	bl	80059bc <QS_u8_raw_>
                                ->super.refCtr_);
                    break;
 8007688:	e000      	b.n	800768c <QS_queryCurrObj+0x13c>
                default:
                    // intentionally empty
                    break;
 800768a:	bf00      	nop
            }
        QS_endRec_();
 800768c:	f7fe f91c 	bl	80058c8 <QS_endRec_>
        QS_MEM_APP();
        QS_CRIT_EXIT();
 8007690:	f7fa fe96 	bl	80023c0 <QF_crit_exit_>
        QS_REC_DONE(); // user callback (if defined)
    }
    else {
        QS_rxReportError_((int8_t)QS_RX_QUERY_CURR);
    }
}
 8007694:	e002      	b.n	800769c <QS_queryCurrObj+0x14c>
        QS_rxReportError_((int8_t)QS_RX_QUERY_CURR);
 8007696:	200f      	movs	r0, #15
 8007698:	f7ff ff24 	bl	80074e4 <QS_rxReportError_>
}
 800769c:	bf00      	nop
 800769e:	3708      	adds	r7, #8
 80076a0:	46bd      	mov	sp, r7
 80076a2:	bd80      	pop	{r7, pc}
 80076a4:	0800795c 	.word	0x0800795c
 80076a8:	20000abc 	.word	0x20000abc

080076ac <QS_rxPoke_>:

//............................................................................
static void QS_rxPoke_(void) {
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b082      	sub	sp, #8
 80076b0:	af00      	add	r7, sp, #0
    uint8_t *ptr = (uint8_t *)QS_rxPriv_.currObj[AP_OBJ];
 80076b2:	4b1f      	ldr	r3, [pc, #124]	@ (8007730 <QS_rxPoke_+0x84>)
 80076b4:	695b      	ldr	r3, [r3, #20]
 80076b6:	607b      	str	r3, [r7, #4]
    ptr = &ptr[QS_rxPriv_.var.poke.offs];
 80076b8:	4b1d      	ldr	r3, [pc, #116]	@ (8007730 <QS_rxPoke_+0x84>)
 80076ba:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80076bc:	461a      	mov	r2, r3
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	4413      	add	r3, r2
 80076c2:	607b      	str	r3, [r7, #4]
    switch (QS_rxPriv_.var.poke.size) {
 80076c4:	4b1a      	ldr	r3, [pc, #104]	@ (8007730 <QS_rxPoke_+0x84>)
 80076c6:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80076ca:	2b04      	cmp	r3, #4
 80076cc:	d012      	beq.n	80076f4 <QS_rxPoke_+0x48>
 80076ce:	2b04      	cmp	r3, #4
 80076d0:	dc15      	bgt.n	80076fe <QS_rxPoke_+0x52>
 80076d2:	2b01      	cmp	r3, #1
 80076d4:	d002      	beq.n	80076dc <QS_rxPoke_+0x30>
 80076d6:	2b02      	cmp	r3, #2
 80076d8:	d006      	beq.n	80076e8 <QS_rxPoke_+0x3c>
 80076da:	e010      	b.n	80076fe <QS_rxPoke_+0x52>
        case 1:
            *ptr = (uint8_t)QS_rxPriv_.var.poke.data;
 80076dc:	4b14      	ldr	r3, [pc, #80]	@ (8007730 <QS_rxPoke_+0x84>)
 80076de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076e0:	b2da      	uxtb	r2, r3
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	701a      	strb	r2, [r3, #0]
            break;
 80076e6:	e00f      	b.n	8007708 <QS_rxPoke_+0x5c>
        case 2:
            *(uint16_t *)ptr = (uint16_t)QS_rxPriv_.var.poke.data;
 80076e8:	4b11      	ldr	r3, [pc, #68]	@ (8007730 <QS_rxPoke_+0x84>)
 80076ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076ec:	b29a      	uxth	r2, r3
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	801a      	strh	r2, [r3, #0]
            break;
 80076f2:	e009      	b.n	8007708 <QS_rxPoke_+0x5c>
        case 4:
            *(uint32_t *)ptr = QS_rxPriv_.var.poke.data;
 80076f4:	4b0e      	ldr	r3, [pc, #56]	@ (8007730 <QS_rxPoke_+0x84>)
 80076f6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	601a      	str	r2, [r3, #0]
            break;
 80076fc:	e004      	b.n	8007708 <QS_rxPoke_+0x5c>
        default: {
            Q_ERROR_INCRIT(900);
 80076fe:	f44f 7161 	mov.w	r1, #900	@ 0x384
 8007702:	480c      	ldr	r0, [pc, #48]	@ (8007734 <QS_rxPoke_+0x88>)
 8007704:	f7f9 f992 	bl	8000a2c <Q_onError>
            break;
        }
    }

    QS_rxPriv_.var.poke.data = 0U;
 8007708:	4b09      	ldr	r3, [pc, #36]	@ (8007730 <QS_rxPoke_+0x84>)
 800770a:	2200      	movs	r2, #0
 800770c:	631a      	str	r2, [r3, #48]	@ 0x30
    QS_rxPriv_.var.poke.idx  = 0U;
 800770e:	4b08      	ldr	r3, [pc, #32]	@ (8007730 <QS_rxPoke_+0x84>)
 8007710:	2200      	movs	r2, #0
 8007712:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    QS_rxPriv_.var.poke.offs += (uint16_t)QS_rxPriv_.var.poke.size;
 8007716:	4b06      	ldr	r3, [pc, #24]	@ (8007730 <QS_rxPoke_+0x84>)
 8007718:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 800771a:	4a05      	ldr	r2, [pc, #20]	@ (8007730 <QS_rxPoke_+0x84>)
 800771c:	f892 2036 	ldrb.w	r2, [r2, #54]	@ 0x36
 8007720:	4413      	add	r3, r2
 8007722:	b29a      	uxth	r2, r3
 8007724:	4b02      	ldr	r3, [pc, #8]	@ (8007730 <QS_rxPoke_+0x84>)
 8007726:	869a      	strh	r2, [r3, #52]	@ 0x34
}
 8007728:	bf00      	nop
 800772a:	3708      	adds	r7, #8
 800772c:	46bd      	mov	sp, r7
 800772e:	bd80      	pop	{r7, pc}
 8007730:	20000abc 	.word	0x20000abc
 8007734:	0800795c 	.word	0x0800795c

08007738 <__libc_init_array>:
 8007738:	b570      	push	{r4, r5, r6, lr}
 800773a:	4d0d      	ldr	r5, [pc, #52]	@ (8007770 <__libc_init_array+0x38>)
 800773c:	4c0d      	ldr	r4, [pc, #52]	@ (8007774 <__libc_init_array+0x3c>)
 800773e:	1b64      	subs	r4, r4, r5
 8007740:	10a4      	asrs	r4, r4, #2
 8007742:	2600      	movs	r6, #0
 8007744:	42a6      	cmp	r6, r4
 8007746:	d109      	bne.n	800775c <__libc_init_array+0x24>
 8007748:	4d0b      	ldr	r5, [pc, #44]	@ (8007778 <__libc_init_array+0x40>)
 800774a:	4c0c      	ldr	r4, [pc, #48]	@ (800777c <__libc_init_array+0x44>)
 800774c:	f000 f818 	bl	8007780 <_init>
 8007750:	1b64      	subs	r4, r4, r5
 8007752:	10a4      	asrs	r4, r4, #2
 8007754:	2600      	movs	r6, #0
 8007756:	42a6      	cmp	r6, r4
 8007758:	d105      	bne.n	8007766 <__libc_init_array+0x2e>
 800775a:	bd70      	pop	{r4, r5, r6, pc}
 800775c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007760:	4798      	blx	r3
 8007762:	3601      	adds	r6, #1
 8007764:	e7ee      	b.n	8007744 <__libc_init_array+0xc>
 8007766:	f855 3b04 	ldr.w	r3, [r5], #4
 800776a:	4798      	blx	r3
 800776c:	3601      	adds	r6, #1
 800776e:	e7f2      	b.n	8007756 <__libc_init_array+0x1e>
 8007770:	08007984 	.word	0x08007984
 8007774:	08007984 	.word	0x08007984
 8007778:	08007984 	.word	0x08007984
 800777c:	08007988 	.word	0x08007988

08007780 <_init>:
 8007780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007782:	bf00      	nop
 8007784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007786:	bc08      	pop	{r3}
 8007788:	469e      	mov	lr, r3
 800778a:	4770      	bx	lr

0800778c <_fini>:
 800778c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800778e:	bf00      	nop
 8007790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007792:	bc08      	pop	{r3}
 8007794:	469e      	mov	lr, r3
 8007796:	4770      	bx	lr
